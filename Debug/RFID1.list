
RFID1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800ef10  0800ef10  0000ff10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc94  0800fc94  00011304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fc94  0800fc94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc9c  0800fc9c  00011304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc9c  0800fc9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fca0  0800fca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800fca4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011304  2**0
                  CONTENTS
 10 .bss          00001670  20000304  20000304  00011304  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001974  20001974  00011304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff8f  00000000  00000000  00011334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004816  00000000  00000000  000312c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00035ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001457  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e40  00000000  00000000  00038957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024831  00000000  00000000  00060797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3f48  00000000  00000000  00084fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00168f10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081a4  00000000  00000000  00168f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001710f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eef8 	.word	0x0800eef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800eef8 	.word	0x0800eef8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){  //BNO055 có 2 page thanh ghi: PAGE 0 và PAGE 1 → Chuyển qua lại giữa chúng.
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 8000f7e:	2364      	movs	r3, #100	@ 0x64
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2301      	movs	r3, #1
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	2150      	movs	r1, #80	@ 0x50
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <SelectPage+0x3c>)
 8000f92:	f006 f955 	bl	8007240 <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <SelectPage+0x2e>
		printf("Register page replacement could not be set\n");
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <SelectPage+0x40>)
 8000f9e:	f00b fa4f 	bl	800c440 <puts>
	}
	HAL_Delay(50);
 8000fa2:	2032      	movs	r0, #50	@ 0x32
 8000fa4:	f004 f82a 	bl	8004ffc <HAL_Delay>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200003d0 	.word	0x200003d0
 8000fb4:	0800ef70 	.word	0x0800ef70

08000fb8 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){ //Đọc dữ liệu cảm biến
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
	//Dựa vào kiểu dữ liệu được chọn (SENSOR_ACCEL, SENSOR_EULER, v.v.), đọc đúng thanh ghi từ BNO055.
	//Dữ liệu đọc được scale đúng đơn vị(e.g.chia cho 100.0 hoặc 16.0).
	//Dữ liệu gán vào struct sensorData
	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d05f      	beq.n	800108e <ReadData+0xd6>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	222e      	movs	r2, #46	@ 0x2e
 8000fe2:	2150      	movs	r1, #80	@ 0x50
 8000fe4:	48b7      	ldr	r0, [pc, #732]	@ (80012c4 <ReadData+0x30c>)
 8000fe6:	f006 fa25 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0); // chia cho 100 để quy đổi ra đơn vị chuẩn 
 8000fea:	7a7b      	ldrb	r3, [r7, #9]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7a3b      	ldrb	r3, [r7, #8]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa92 	bl	8000524 <__aeabi_i2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4bb0      	ldr	r3, [pc, #704]	@ (80012c8 <ReadData+0x310>)
 8001006:	f7ff fc21 	bl	800084c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdc9 	bl	8000ba8 <__aeabi_d2f>
 8001016:	4602      	mov	r2, r0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	b21b      	sxth	r3, r3
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4ba4      	ldr	r3, [pc, #656]	@ (80012c8 <ReadData+0x310>)
 8001038:	f7ff fc08 	bl	800084c <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb0 	bl	8000ba8 <__aeabi_d2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	b21b      	sxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa60 	bl	8000524 <__aeabi_i2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b97      	ldr	r3, [pc, #604]	@ (80012c8 <ReadData+0x310>)
 800106a:	f7ff fbef 	bl	800084c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd97 	bl	8000ba8 <__aeabi_d2f>
 800107a:	4602      	mov	r2, r0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	645a      	str	r2, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2208      	movs	r2, #8
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00b fb21 	bl	800c6d0 <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d06c      	beq.n	8001172 <ReadData+0x1ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2308      	movs	r3, #8
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2220      	movs	r2, #32
 80010ac:	2150      	movs	r1, #80	@ 0x50
 80010ae:	4885      	ldr	r0, [pc, #532]	@ (80012c4 <ReadData+0x30c>)
 80010b0:	f006 f9c0 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 80010b4:	7a7b      	ldrb	r3, [r7, #9]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da02      	bge.n	80010ce <ReadData+0x116>
 80010c8:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80010cc:	333f      	adds	r3, #63	@ 0x3f
 80010ce:	139b      	asrs	r3, r3, #14
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da02      	bge.n	80010fa <ReadData+0x142>
 80010f4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80010f8:	333f      	adds	r3, #63	@ 0x3f
 80010fa:	139b      	asrs	r3, r3, #14
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 800110c:	7b7b      	ldrb	r3, [r7, #13]
 800110e:	b21b      	sxth	r3, r3
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7b3b      	ldrb	r3, [r7, #12]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	da02      	bge.n	8001126 <ReadData+0x16e>
 8001120:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001124:	333f      	adds	r3, #63	@ 0x3f
 8001126:	139b      	asrs	r3, r3, #14
 8001128:	b21b      	sxth	r3, r3
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	b21b      	sxth	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	da02      	bge.n	8001152 <ReadData+0x19a>
 800114c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001150:	333f      	adds	r3, #63	@ 0x3f
 8001152:	139b      	asrs	r3, r3, #14
 8001154:	b21b      	sxth	r3, r3
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2208      	movs	r2, #8
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00b faaf 	bl	800c6d0 <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d05f      	beq.n	800123c <ReadData+0x284>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2306      	movs	r3, #6
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2228      	movs	r2, #40	@ 0x28
 8001190:	2150      	movs	r1, #80	@ 0x50
 8001192:	484c      	ldr	r0, [pc, #304]	@ (80012c4 <ReadData+0x30c>)
 8001194:	f006 f94e 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001198:	7a7b      	ldrb	r3, [r7, #9]
 800119a:	b21b      	sxth	r3, r3
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7a3b      	ldrb	r3, [r7, #8]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9bb 	bl	8000524 <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <ReadData+0x310>)
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcf2 	bl	8000ba8 <__aeabi_d2f>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7abb      	ldrb	r3, [r7, #10]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <ReadData+0x310>)
 80011e6:	f7ff fb31 	bl	800084c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcd9 	bl	8000ba8 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	635a      	str	r2, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 80011fc:	7b7b      	ldrb	r3, [r7, #13]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f989 	bl	8000524 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <ReadData+0x310>)
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fcc0 	bl	8000ba8 <__aeabi_d2f>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	639a      	str	r2, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2208      	movs	r2, #8
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fa4a 	bl	800c6d0 <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d066      	beq.n	8001314 <ReadData+0x35c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2306      	movs	r3, #6
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	2214      	movs	r2, #20
 800125a:	2150      	movs	r1, #80	@ 0x50
 800125c:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <ReadData+0x30c>)
 800125e:	f006 f8e9 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001262:	7a7b      	ldrb	r3, [r7, #9]
 8001264:	b21b      	sxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7a3b      	ldrb	r3, [r7, #8]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f956 	bl	8000524 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <ReadData+0x314>)
 800127e:	f7ff fae5 	bl	800084c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc8d 	bl	8000ba8 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b21b      	sxth	r3, r3
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7abb      	ldrb	r3, [r7, #10]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f93d 	bl	8000524 <__aeabi_i2d>
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <ReadData+0x314>)
 80012b0:	f7ff facc 	bl	800084c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc74 	bl	8000ba8 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	e005      	b.n	80012d0 <ReadData+0x318>
 80012c4:	200003d0 	.word	0x200003d0
 80012c8:	40590000 	.word	0x40590000
 80012cc:	40300000 	.word	0x40300000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f91d 	bl	8000524 <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4ba3      	ldr	r3, [pc, #652]	@ (800157c <ReadData+0x5c4>)
 80012f0:	f7ff faac 	bl	800084c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc54 	bl	8000ba8 <__aeabi_d2f>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	615a      	str	r2, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2208      	movs	r2, #8
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00b f9de 	bl	800c6d0 <memset>
	    }
	    if (sensors & SENSOR_ACCEL) {
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	d05f      	beq.n	80013de <ReadData+0x426>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2306      	movs	r3, #6
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	2208      	movs	r2, #8
 8001332:	2150      	movs	r1, #80	@ 0x50
 8001334:	4892      	ldr	r0, [pc, #584]	@ (8001580 <ReadData+0x5c8>)
 8001336:	f006 f87d 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 800133a:	7a7b      	ldrb	r3, [r7, #9]
 800133c:	b21b      	sxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	7a3b      	ldrb	r3, [r7, #8]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b8b      	ldr	r3, [pc, #556]	@ (8001584 <ReadData+0x5cc>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fc21 	bl	8000ba8 <__aeabi_d2f>
 8001366:	4602      	mov	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	601a      	str	r2, [r3, #0]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b21b      	sxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d1 	bl	8000524 <__aeabi_i2d>
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <ReadData+0x5cc>)
 8001388:	f7ff fa60 	bl	800084c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc08 	bl	8000ba8 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8b8 	bl	8000524 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b72      	ldr	r3, [pc, #456]	@ (8001584 <ReadData+0x5cc>)
 80013ba:	f7ff fa47 	bl	800084c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fbef 	bl	8000ba8 <__aeabi_d2f>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	2208      	movs	r2, #8
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f00b f979 	bl	800c6d0 <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d05f      	beq.n	80014a8 <ReadData+0x4f0>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2306      	movs	r3, #6
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	220e      	movs	r2, #14
 80013fc:	2150      	movs	r1, #80	@ 0x50
 80013fe:	4860      	ldr	r0, [pc, #384]	@ (8001580 <ReadData+0x5c8>)
 8001400:	f006 f818 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001404:	7a7b      	ldrb	r3, [r7, #9]
 8001406:	b21b      	sxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b57      	ldr	r3, [pc, #348]	@ (800157c <ReadData+0x5c4>)
 8001420:	f7ff fa14 	bl	800084c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fbbc 	bl	8000ba8 <__aeabi_d2f>
 8001430:	4602      	mov	r2, r0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7abb      	ldrb	r3, [r7, #10]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f86c 	bl	8000524 <__aeabi_i2d>
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <ReadData+0x5c4>)
 8001452:	f7ff f9fb 	bl	800084c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fba3 	bl	8000ba8 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	61da      	str	r2, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	b21b      	sxth	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21b      	sxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f853 	bl	8000524 <__aeabi_i2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b3e      	ldr	r3, [pc, #248]	@ (800157c <ReadData+0x5c4>)
 8001484:	f7ff f9e2 	bl	800084c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb8a 	bl	8000ba8 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	621a      	str	r2, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2208      	movs	r2, #8
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00b f914 	bl	800c6d0 <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05f      	beq.n	8001572 <ReadData+0x5ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2306      	movs	r3, #6
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	221a      	movs	r2, #26
 80014c6:	2150      	movs	r1, #80	@ 0x50
 80014c8:	482d      	ldr	r0, [pc, #180]	@ (8001580 <ReadData+0x5c8>)
 80014ca:	f005 ffb3 	bl	8007434 <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80014ce:	7a7b      	ldrb	r3, [r7, #9]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7a3b      	ldrb	r3, [r7, #8]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f820 	bl	8000524 <__aeabi_i2d>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b24      	ldr	r3, [pc, #144]	@ (800157c <ReadData+0x5c4>)
 80014ea:	f7ff f9af 	bl	800084c <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb57 	bl	8000ba8 <__aeabi_d2f>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001500:	7afb      	ldrb	r3, [r7, #11]
 8001502:	b21b      	sxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f807 	bl	8000524 <__aeabi_i2d>
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <ReadData+0x5c4>)
 800151c:	f7ff f996 	bl	800084c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb3e 	bl	8000ba8 <__aeabi_d2f>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	b21b      	sxth	r3, r3
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffee 	bl	8000524 <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <ReadData+0x5c4>)
 800154e:	f7ff f97d 	bl	800084c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb25 	bl	8000ba8 <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	2208      	movs	r2, #8
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b f8af 	bl	800c6d0 <memset>
	    }
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40300000 	.word	0x40300000
 8001580:	200003d0 	.word	0x200003d0
 8001584:	40590000 	.word	0x40590000

08001588 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){ //Đặt chế độ hoạt động (e.g. NDOF, IMU, CONFIG_MODE...)
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af04      	add	r7, sp, #16
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fcee 	bl	8000f74 <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 8001598:	2364      	movs	r3, #100	@ 0x64
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	223d      	movs	r2, #61	@ 0x3d
 80015a8:	2150      	movs	r1, #80	@ 0x50
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <Set_Operation_Mode+0x58>)
 80015ac:	f005 fe48 	bl	8007240 <HAL_I2C_Mem_Write>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <Set_Operation_Mode+0x36>
		printf("Operation mode could not be set!\n");
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <Set_Operation_Mode+0x5c>)
 80015b8:	f00a ff42 	bl	800c440 <puts>
 80015bc:	e002      	b.n	80015c4 <Set_Operation_Mode+0x3c>
	}
	else printf("Operation mode switching succeeded.\n");
 80015be:	480a      	ldr	r0, [pc, #40]	@ (80015e8 <Set_Operation_Mode+0x60>)
 80015c0:	f00a ff3e 	bl	800c440 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <Set_Operation_Mode+0x4a>
 80015ca:	2013      	movs	r0, #19
 80015cc:	f003 fd16 	bl	8004ffc <HAL_Delay>

	else HAL_Delay(9);

}
 80015d0:	e002      	b.n	80015d8 <Set_Operation_Mode+0x50>
	else HAL_Delay(9);
 80015d2:	2009      	movs	r0, #9
 80015d4:	f003 fd12 	bl	8004ffc <HAL_Delay>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200003d0 	.word	0x200003d0
 80015e4:	0800efb8 	.word	0x0800efb8
 80015e8:	0800efdc 	.word	0x0800efdc

080015ec <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){ //Cấu hình power mode: Normal, Low-power, Suspend.
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	2301      	movs	r3, #1
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	223e      	movs	r2, #62	@ 0x3e
 8001606:	2150      	movs	r1, #80	@ 0x50
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <SetPowerMODE+0x44>)
 800160a:	f005 fe19 	bl	8007240 <HAL_I2C_Mem_Write>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\n");
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <SetPowerMODE+0x48>)
 8001616:	f00a ff13 	bl	800c440 <puts>
 800161a:	e002      	b.n	8001622 <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\n");
 800161c:	4806      	ldr	r0, [pc, #24]	@ (8001638 <SetPowerMODE+0x4c>)
 800161e:	f00a ff0f 	bl	800c440 <puts>
	}
	HAL_Delay(50);
 8001622:	2032      	movs	r0, #50	@ 0x32
 8001624:	f003 fcea 	bl	8004ffc <HAL_Delay>

}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003d0 	.word	0x200003d0
 8001634:	0800f000 	.word	0x0800f000
 8001638:	0800f020 	.word	0x0800f020

0800163c <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) { //Chọn xung clock nội/ngoại.
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8001646:	2364      	movs	r3, #100	@ 0x64
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	223f      	movs	r2, #63	@ 0x3f
 8001656:	2150      	movs	r1, #80	@ 0x50
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <Clock_Source+0x2c>)
 800165a:	f005 fdf1 	bl	8007240 <HAL_I2C_Mem_Write>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200003d0 	.word	0x200003d0

0800166c <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){ // Chuyển đổi trục (Axis remap)
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af04      	add	r7, sp, #16
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]

	//Gán lại trục X–Y–Z hoặc đảo dấu (khi lắp cảm biến không đúng hướng).
	//Ví dụ : nếu gắn nghiêng 90°, có thể đổi trục để kết quả đúng.

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 800167c:	2364      	movs	r3, #100	@ 0x64
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2241      	movs	r2, #65	@ 0x41
 800168c:	2150      	movs	r1, #80	@ 0x50
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <BNO055_Axis+0x54>)
 8001690:	f005 fdd6 	bl	8007240 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001694:	2014      	movs	r0, #20
 8001696:	f003 fcb1 	bl	8004ffc <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	2242      	movs	r2, #66	@ 0x42
 80016aa:	2150      	movs	r1, #80	@ 0x50
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <BNO055_Axis+0x54>)
 80016ae:	f005 fdc7 	bl	8007240 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	@ 0x64
 80016b4:	f003 fca2 	bl	8004ffc <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003d0 	.word	0x200003d0

080016c4 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 80016ce:	2364      	movs	r3, #100	@ 0x64
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	2208      	movs	r2, #8
 80016de:	2150      	movs	r1, #80	@ 0x50
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <SET_Accel_Range+0x30>)
 80016e2:	f005 fdad 	bl	8007240 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	@ 0x64
 80016e8:	f003 fc88 	bl	8004ffc <HAL_Delay>

}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200003d0 	.word	0x200003d0

080016f8 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(void){  //Khởi tạo toàn bộ cảm biến
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af04      	add	r7, sp, #16
	//Đặt page = 0, chọn clock, map trục, chọn đơn vị(m / s² hay g…)
	//Đặt chế độ nguồn
	//Đặt chế độ hoạt động chính(ví dụ NDOF)
    BNO055_Init_t Init;

    Init.Unit_Sel     = UNIT_ORI_WINDOWS | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2;
 80016fe:	2300      	movs	r3, #0
 8001700:	723b      	strb	r3, [r7, #8]
    Init.Axis         = DEFAULT_AXIS_REMAP;
 8001702:	2324      	movs	r3, #36	@ 0x24
 8001704:	727b      	strb	r3, [r7, #9]
    Init.Axis_sign    = DEFAULT_AXIS_SIGN;
 8001706:	2300      	movs	r3, #0
 8001708:	72bb      	strb	r3, [r7, #10]
    Init.Mode         = BNO055_NORMAL_MODE;
 800170a:	2300      	movs	r3, #0
 800170c:	72fb      	strb	r3, [r7, #11]
    Init.OP_Modes     = NDOF;
 800170e:	230c      	movs	r3, #12
 8001710:	733b      	strb	r3, [r7, #12]
    Init.Clock_Source = CLOCK_INTERNAL;
 8001712:	2300      	movs	r3, #0
 8001714:	737b      	strb	r3, [r7, #13]
    Init.ACC_Range    = Range_2G;
 8001716:	2300      	movs	r3, #0
 8001718:	73bb      	strb	r3, [r7, #14]

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE); // cấu hình 
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff34 	bl	8001588 <Set_Operation_Mode>
	HAL_Delay(50);
 8001720:	2032      	movs	r0, #50	@ 0x32
 8001722:	f003 fc6b 	bl	8004ffc <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fc24 	bl	8000f74 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffc8 	bl	80016c4 <SET_Accel_Range>
	HAL_Delay(50);
 8001734:	2032      	movs	r0, #50	@ 0x32
 8001736:	f003 fc61 	bl	8004ffc <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fc1a 	bl	8000f74 <SelectPage>
	HAL_Delay(50);
 8001740:	2032      	movs	r0, #50	@ 0x32
 8001742:	f003 fc5b 	bl	8004ffc <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 8001746:	2364      	movs	r3, #100	@ 0x64
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	2238      	movs	r2, #56	@ 0x38
 8001756:	2150      	movs	r1, #80	@ 0x50
 8001758:	481e      	ldr	r0, [pc, #120]	@ (80017d4 <BNO055_Init+0xdc>)
 800175a:	f005 fe6b 	bl	8007434 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 800175e:	2032      	movs	r0, #50	@ 0x32
 8001760:	f003 fc4c 	bl	8004ffc <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <BNO055_Init+0x80>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff65 	bl	800163c <Clock_Source>
		HAL_Delay(100);
 8001772:	2064      	movs	r0, #100	@ 0x64
 8001774:	f003 fc42 	bl	8004ffc <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 8001778:	7a7b      	ldrb	r3, [r7, #9]
 800177a:	7aba      	ldrb	r2, [r7, #10]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff74 	bl	800166c <BNO055_Axis>
	HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	@ 0x64
 8001786:	f003 fc39 	bl	8004ffc <HAL_Delay>

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 800178a:	2364      	movs	r3, #100	@ 0x64
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	223b      	movs	r2, #59	@ 0x3b
 800179c:	2150      	movs	r1, #80	@ 0x50
 800179e:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <BNO055_Init+0xdc>)
 80017a0:	f005 fd4e 	bl	8007240 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f003 fc29 	bl	8004ffc <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff1d 	bl	80015ec <SetPowerMODE>
	HAL_Delay(100);
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	f003 fc22 	bl	8004ffc <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fee4 	bl	8001588 <Set_Operation_Mode>
	HAL_Delay(100);
 80017c0:	2064      	movs	r0, #100	@ 0x64
 80017c2:	f003 fc1b 	bl	8004ffc <HAL_Delay>

	printf("BNO055 Initialization process is done!\n");
 80017c6:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <BNO055_Init+0xe0>)
 80017c8:	f00a fe3a 	bl	800c440 <puts>
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200003d0 	.word	0x200003d0
 80017d8:	0800f040 	.word	0x0800f040

080017dc <BNO055_SendEulerCAN>:

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_SendEulerCAN(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09a      	sub	sp, #104	@ 0x68
 80017e0:	af00      	add	r7, sp, #0
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fbe5 	bl	8000fb8 <ReadData>

    // Giữ 2 chữ số thập phân
    int16_t roll  = (int16_t)(sensorData.Euler.Z *100);
 80017ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017f2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 80017f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fe:	ee17 3a90 	vmov	r3, s15
 8001802:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int16_t pitch = (int16_t)(sensorData.Euler.Y *100);
 8001806:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800180a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    int16_t yaw   = (int16_t)((sensorData.Euler.X) *100);
 800181e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001822:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001890 <BNO055_SendEulerCAN+0xb4>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
//
    // Nhân 100 để đưa về dạng int16_t gửi CAN
//    int16_t yaw = (int16_t)(yaw_deg * 100);


    uint8_t data[8] = {
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8001842:	121b      	asrs	r3, r3, #8
 8001844:	b21b      	sxth	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	703b      	strb	r3, [r7, #0]
 800184a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800184e:	b2db      	uxtb	r3, r3
 8001850:	707b      	strb	r3, [r7, #1]
 8001852:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001856:	121b      	asrs	r3, r3, #8
 8001858:	b21b      	sxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	70bb      	strb	r3, [r7, #2]
 800185e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001862:	b2db      	uxtb	r3, r3
 8001864:	70fb      	strb	r3, [r7, #3]
 8001866:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800186a:	121b      	asrs	r3, r3, #8
 800186c:	b21b      	sxth	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	713b      	strb	r3, [r7, #4]
 8001872:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001876:	b2db      	uxtb	r3, r3
 8001878:	717b      	strb	r3, [r7, #5]
            (pitch >> 8) & 0xFF, pitch & 0xFF,
			(yaw >> 8) & 0xFF,   yaw & 0xFF,
//			yaw & 0xFF,         // byte thấp
//			0, 0, 0, 0, 0, 0    // phần còn lại không dùng
    };
    CAN_SendTopicData(TOPIC_ID_IMU_EULER, data, 8);
 800187a:	463b      	mov	r3, r7
 800187c:	2208      	movs	r2, #8
 800187e:	4619      	mov	r1, r3
 8001880:	2012      	movs	r0, #18
 8001882:	f000 fd67 	bl	8002354 <CAN_SendTopicData>
}
 8001886:	bf00      	nop
 8001888:	3768      	adds	r7, #104	@ 0x68
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	42c80000 	.word	0x42c80000

08001894 <BNO055_PrintEulerDebug>:
            sensorData.Gyro.X, sensorData.Gyro.Y, sensorData.Gyro.Z);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void BNO055_PrintEulerDebug(void)
{
 8001894:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001898:	b0be      	sub	sp, #248	@ 0xf8
 800189a:	af04      	add	r7, sp, #16
    BNO055_Sensors_t sensorData;
    ReadData(&sensorData, SENSOR_EULER);
 800189c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80018a0:	2140      	movs	r1, #64	@ 0x40
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb88 	bl	8000fb8 <ReadData>

    float roll  = sensorData.Euler.Z;
 80018a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    float pitch = sensorData.Euler.Y;
 80018b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    float yaw   = sensorData.Euler.X;
 80018b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
//        yaw -= 360.0f;
//    else if (yaw < -180.0f)
//        yaw += 360.0f;

    char msg[128];
    sprintf(msg, "DEBUG: Roll=%.2f°, Pitch=%.2f°, Yaw=%.2f°\r\n", roll, pitch, yaw);
 80018c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80018c4:	f7fe fe40 	bl	8000548 <__aeabi_f2d>
 80018c8:	4680      	mov	r8, r0
 80018ca:	4689      	mov	r9, r1
 80018cc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	1d38      	adds	r0, r7, #4
 80018e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018ea:	e9cd 4500 	strd	r4, r5, [sp]
 80018ee:	4642      	mov	r2, r8
 80018f0:	464b      	mov	r3, r9
 80018f2:	490a      	ldr	r1, [pc, #40]	@ (800191c <BNO055_PrintEulerDebug+0x88>)
 80018f4:	f00a fde2 	bl	800c4bc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fcb8 	bl	8000270 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	1d39      	adds	r1, r7, #4
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <BNO055_PrintEulerDebug+0x8c>)
 800190c:	f009 f862 	bl	800a9d4 <HAL_UART_Transmit>

}
 8001910:	bf00      	nop
 8001912:	37e8      	adds	r7, #232	@ 0xe8
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800191a:	bf00      	nop
 800191c:	0800f3c8 	.word	0x0800f3c8
 8001920:	200006bc 	.word	0x200006bc

08001924 <CAN_DebugStatus>:
#include "display.h"
#include "rfid.h"
extern UART_HandleTypeDef huart2;
extern CAN_HandleTypeDef hcan1;
void CAN_DebugStatus(void)
{
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b0b2      	sub	sp, #200	@ 0xc8
 8001928:	af04      	add	r7, sp, #16
    char msg[128];
    uint32_t msr = hcan1.Instance->MSR;
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint32_t esr = hcan1.Instance->ESR;
 8001934:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    // In trạng thái FIFO
    uint32_t fifo0_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800193e:	2100      	movs	r1, #0
 8001940:	4843      	ldr	r0, [pc, #268]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 8001942:	f004 fc47 	bl	80061d4 <HAL_CAN_GetRxFifoFillLevel>
 8001946:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t fifo1_level = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1);
 800194a:	2101      	movs	r1, #1
 800194c:	4840      	ldr	r0, [pc, #256]	@ (8001a50 <CAN_DebugStatus+0x12c>)
 800194e:	f004 fc41 	bl	80061d4 <HAL_CAN_GetRxFifoFillLevel>
 8001952:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    snprintf(msg, sizeof(msg),
 8001956:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800195a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001970:	4a38      	ldr	r2, [pc, #224]	@ (8001a54 <CAN_DebugStatus+0x130>)
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	f00a fd6c 	bl	800c450 <sniprintf>
             "\r\n[CAN DEBUG]\r\nMSR=0x%08lX\r\nESR=0x%08lX\r\nFIFO0=%lu, FIFO1=%lu\r\n",
             msr, esr, fifo0_level, fifo1_level);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc77 	bl	8000270 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	4832      	ldr	r0, [pc, #200]	@ (8001a58 <CAN_DebugStatus+0x134>)
 8001990:	f009 f820 	bl	800a9d4 <HAL_UART_Transmit>

    // Giải thích các trạng thái nếu cần
    if (esr & CAN_ESR_BOFF) {
 8001994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <CAN_DebugStatus+0x8a>
        HAL_UART_Transmit(&huart2, (uint8_t*)"⚠️ CAN BUS-OFF\r\n", 17, HAL_MAX_DELAY);
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2211      	movs	r2, #17
 80019a6:	492d      	ldr	r1, [pc, #180]	@ (8001a5c <CAN_DebugStatus+0x138>)
 80019a8:	482b      	ldr	r0, [pc, #172]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019aa:	f009 f813 	bl	800a9d4 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EPVF) {
 80019ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <CAN_DebugStatus+0xa4>
        HAL_UART_Transmit(&huart2, (uint8_t*)"⚠️ Error Passive\r\n", 19, HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2213      	movs	r2, #19
 80019c0:	4927      	ldr	r1, [pc, #156]	@ (8001a60 <CAN_DebugStatus+0x13c>)
 80019c2:	4825      	ldr	r0, [pc, #148]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019c4:	f009 f806 	bl	800a9d4 <HAL_UART_Transmit>
    }
    if (esr & CAN_ESR_EWGF) {
 80019c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <CAN_DebugStatus+0xbe>
        HAL_UART_Transmit(&huart2, (uint8_t*)"⚠️ Error Warning\r\n", 19, HAL_MAX_DELAY);
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2213      	movs	r2, #19
 80019da:	4922      	ldr	r1, [pc, #136]	@ (8001a64 <CAN_DebugStatus+0x140>)
 80019dc:	481e      	ldr	r0, [pc, #120]	@ (8001a58 <CAN_DebugStatus+0x134>)
 80019de:	f008 fff9 	bl	800a9d4 <HAL_UART_Transmit>
    }

    if ((esr & CAN_ESR_LEC_Msk) != 0) {
 80019e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80019e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02b      	beq.n	8001a46 <CAN_DebugStatus+0x122>
        const char* lec_msgs[] = {
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <CAN_DebugStatus+0x144>)
 80019f0:	1d3c      	adds	r4, r7, #4
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            "No Error", "Stuff Error", "Form Error", "Ack Error",
            "Bit recessive Error", "Bit dominant Error", "CRC Error", "Unknown"
        };
        uint8_t lec = (esr & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos;
 8001a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        snprintf(msg, sizeof(msg), "❌ Last Error Code (LEC): %s\r\n", lec_msgs[lec]);
 8001a10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	33b8      	adds	r3, #184	@ 0xb8
 8001a18:	443b      	add	r3, r7
 8001a1a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001a1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <CAN_DebugStatus+0x148>)
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	f00a fd13 	bl	800c450 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc1e 	bl	8000270 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <CAN_DebugStatus+0x134>)
 8001a42:	f008 ffc7 	bl	800a9d4 <HAL_UART_Transmit>
    }
}
 8001a46:	bf00      	nop
 8001a48:	37b8      	adds	r7, #184	@ 0xb8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000378 	.word	0x20000378
 8001a54:	0800f3f8 	.word	0x0800f3f8
 8001a58:	200006bc 	.word	0x200006bc
 8001a5c:	0800f438 	.word	0x0800f438
 8001a60:	0800f450 	.word	0x0800f450
 8001a64:	0800f468 	.word	0x0800f468
 8001a68:	0800f50c 	.word	0x0800f50c
 8001a6c:	0800f480 	.word	0x0800f480

08001a70 <MQ135_Config>:
// Biến bên ngoài dùng cho lấy mẫu ADC qua ngắt
extern uint32_t ADC_SAMPLES[1000];
extern uint32_t NUM_SAMPLES;
extern volatile uint8_t mq135_done;

void MQ135_Config(MQ135_HandleTypeDef *mq, ADC_HandleTypeDef *hadc) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    mq->hadc = hadc;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
    mq->rl_value = 10.0f;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <MQ135_Config+0x44>)
 8001a84:	605a      	str	r2, [r3, #4]
    mq->ro_clean_air = 10.0f;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <MQ135_Config+0x44>)
 8001a8a:	609a      	str	r2, [r3, #8]
    mq->a = 116.6020682f;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <MQ135_Config+0x48>)
 8001a90:	60da      	str	r2, [r3, #12]
    mq->b = -2.769034857f;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <MQ135_Config+0x4c>)
 8001a96:	611a      	str	r2, [r3, #16]
    mq->vref = 3.3f;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <MQ135_Config+0x50>)
 8001a9c:	615a      	str	r2, [r3, #20]
    mq->resolution = 4096.0f;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	41200000 	.word	0x41200000
 8001ab8:	42e93442 	.word	0x42e93442
 8001abc:	c03137de 	.word	0xc03137de
 8001ac0:	40533333 	.word	0x40533333

08001ac4 <MQ135_CorrectionFactor>:

float MQ135_CorrectionFactor(float temp, float hum) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ace:	edc7 0a00 	vstr	s1, [r7]
    return MQ135_CORA * temp * temp
 8001ad2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ad6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001b24 <MQ135_CorrectionFactor+0x60>
 8001ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
         - MQ135_CORB * temp
 8001ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aea:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001b28 <MQ135_CorrectionFactor+0x64>
 8001aee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
         + MQ135_CORC
 8001af6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001b2c <MQ135_CorrectionFactor+0x68>
 8001afa:	ee37 7a87 	vadd.f32	s14, s15, s14
         - (hum - 33.0f) * MQ135_CORD;
 8001afe:	edd7 7a00 	vldr	s15, [r7]
 8001b02:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001b30 <MQ135_CorrectionFactor+0x6c>
 8001b06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b0a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001b34 <MQ135_CorrectionFactor+0x70>
 8001b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	39b78034 	.word	0x39b78034
 8001b28:	3cdea897 	.word	0x3cdea897
 8001b2c:	3fb29bd0 	.word	0x3fb29bd0
 8001b30:	42040000 	.word	0x42040000
 8001b34:	3aebedfa 	.word	0x3aebedfa

08001b38 <MQ135_ReadRs>:

float MQ135_ReadRs(MQ135_HandleTypeDef *mq) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    float rs = 0.0f;
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
    mq135_done = 0;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MQ135_ReadRs+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
    NUM_SAMPLES = MQ135_READ_SAMPLES;
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001b4e:	2264      	movs	r2, #100	@ 0x64
 8001b50:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start_IT(mq->hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fab8 	bl	80050cc <HAL_ADC_Start_IT>
    while (!mq135_done);  // đợi hoàn tất lấy mẫu
 8001b5c:	bf00      	nop
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MQ135_ReadRs+0xbc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0fa      	beq.n	8001b5e <MQ135_ReadRs+0x26>

    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e02c      	b.n	8001bc8 <MQ135_ReadRs+0x90>
        float v = ADC_SAMPLES[j] * mq->vref / mq->resolution;
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MQ135_ReadRs+0xc4>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	edc7 7a03 	vstr	s15, [r7, #12]
        rs += ((mq->vref - v) * mq->rl_value) / v;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001baa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint32_t j = 0; j < NUM_SAMPLES; j++) {
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3cd      	bcc.n	8001b6e <MQ135_ReadRs+0x36>
    }

    return rs / NUM_SAMPLES;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MQ135_ReadRs+0xc0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8001be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001be6:	eef0 7a66 	vmov.f32	s15, s13
}
 8001bea:	eeb0 0a67 	vmov.f32	s0, s15
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20001754 	.word	0x20001754
 8001bf8:	20001750 	.word	0x20001750
 8001bfc:	200007b0 	.word	0x200007b0

08001c00 <MQ135_ReadCorrectedPPM>:

float MQ135_ReadCorrectedPPM(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	ed2d 8b02 	vpush	{d8}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c10:	edc7 0a01 	vstr	s1, [r7, #4]
    float rs = MQ135_ReadRs(mq);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff ff8f 	bl	8001b38 <MQ135_ReadRs>
 8001c1a:	ed87 0a07 	vstr	s0, [r7, #28]
    float corr = MQ135_CorrectionFactor(temp, hum);
 8001c1e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c22:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c26:	f7ff ff4d 	bl	8001ac4 <MQ135_CorrectionFactor>
 8001c2a:	ed87 0a06 	vstr	s0, [r7, #24]
    float rsc = rs / corr;
 8001c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c32:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3a:	edc7 7a05 	vstr	s15, [r7, #20]
    return mq->a * powf(rsc / mq->ro_clean_air, mq->b);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	ed93 8a03 	vldr	s16, [r3, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8001c60:	f00c fd82 	bl	800e768 <powf>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	ecbd 8b02 	vpop	{d8}
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MQ135_CalibrateRo>:

void MQ135_CalibrateRo(MQ135_HandleTypeDef *mq, float temp, float hum) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	ed2d 8b02 	vpush	{d8}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c8c:	edc7 0a01 	vstr	s1, [r7, #4]
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff ff51 	bl	8001b38 <MQ135_ReadRs>
 8001c96:	eeb0 8a40 	vmov.f32	s16, s0
        powf((MQ135_ATMOCO2 / mq->a), (1.0f / mq->b));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001cdc <MQ135_CalibrateRo+0x60>
 8001ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001cb2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001cb6:	eef0 0a66 	vmov.f32	s1, s13
 8001cba:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbe:	f00c fd53 	bl	800e768 <powf>
 8001cc2:	eef0 7a40 	vmov.f32	s15, s0
    mq->ro_clean_air = MQ135_ReadRs(mq) *
 8001cc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	ecbd 8b02 	vpop	{d8}
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	43c80000 	.word	0x43c80000

08001ce0 <MQ135_Send_CAN>:

void MQ135_Send_CAN(MQ135_HandleTypeDef *mq, float temp, float hum, UART_HandleTypeDef *huart, uint16_t topic) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09e      	sub	sp, #120	@ 0x78
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6178      	str	r0, [r7, #20]
 8001ce8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cec:	edc7 0a03 	vstr	s1, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
    float ppm = MQ135_ReadCorrectedPPM(mq, temp, hum);
 8001cf6:	edd7 0a03 	vldr	s1, [r7, #12]
 8001cfa:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff7e 	bl	8001c00 <MQ135_ReadCorrectedPPM>
 8001d04:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    uint16_t v = (uint16_t)ppm;
 8001d08:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    char buf[80];
    sprintf(buf, "PPM: %.1f\r\n", ppm);
 8001d18:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	f107 0020 	add.w	r0, r7, #32
 8001d26:	4913      	ldr	r1, [pc, #76]	@ (8001d74 <MQ135_Send_CAN+0x94>)
 8001d28:	f00a fbc8 	bl	800c4bc <siprintf>
    HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa9d 	bl	8000270 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f107 0120 	add.w	r1, r7, #32
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f008 fe46 	bl	800a9d4 <HAL_UART_Transmit>

    uint8_t payload[2] = { (v >> 8) & 0xFF, v & 0xFF };
 8001d48:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	773b      	strb	r3, [r7, #28]
 8001d54:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	777b      	strb	r3, [r7, #29]
    CAN_SendTopicData(topic, payload, 2);
 8001d5c:	f107 011c 	add.w	r1, r7, #28
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 faf5 	bl	8002354 <CAN_SendTopicData>
}
 8001d6a:	bf00      	nop
 8001d6c:	3778      	adds	r7, #120	@ 0x78
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800f52c 	.word	0x0800f52c

08001d78 <RC522_SPI_Transfer>:
 * Des		cription: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b096      	sub	sp, #88	@ 0x58
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001d82:	f107 024f 	add.w	r2, r7, #79	@ 0x4f
 8001d86:	1df9      	adds	r1, r7, #7
 8001d88:	2364      	movs	r3, #100	@ 0x64
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <RC522_SPI_Transfer+0x28>)
 8001d90:	f006 fed9 	bl	8008b46 <HAL_SPI_TransmitReceive>
	 char debug[64];

	return rx_data;
 8001d94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3750      	adds	r7, #80	@ 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000424 	.word	0x20000424

08001da4 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <Write_MFRC522+0x48>)
 8001dba:	f004 ffe5 	bl	8006d88 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffd4 	bl	8001d78 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffd0 	bl	8001d78 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2180      	movs	r1, #128	@ 0x80
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <Write_MFRC522+0x48>)
 8001dde:	f004 ffd3 	bl	8006d88 <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020800 	.word	0x40020800

08001df0 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	4810      	ldr	r0, [pc, #64]	@ (8001e40 <Read_MFRC522+0x50>)
 8001e00:	f004 ffc2 	bl	8006d88 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffac 	bl	8001d78 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff ffa9 	bl	8001d78 <RC522_SPI_Transfer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <Read_MFRC522+0x50>)
 8001e30:	f004 ffaa 	bl	8006d88 <HAL_GPIO_WritePin>
	
	return val;	
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020800 	.word	0x40020800

08001e44 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ffca 	bl	8001df0 <Read_MFRC522>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff99 	bl	8001da4 <Write_MFRC522>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	460a      	mov	r2, r1
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	4613      	mov	r3, r2
 8001e88:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ffaf 	bl	8001df0 <Read_MFRC522>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001e96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff79 	bl	8001da4 <Write_MFRC522>
} 
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001ebe:	2014      	movs	r0, #20
 8001ec0:	f7ff ff96 	bl	8001df0 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f7ff ffbc 	bl	8001e44 <SetBitMask>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff ff64 	bl	8001da4 <Write_MFRC522>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	4812      	ldr	r0, [pc, #72]	@ (8001f34 <MFRC522_Init+0x54>)
 8001eea:	f004 ff4d 	bl	8006d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <MFRC522_Init+0x58>)
 8001ef4:	f004 ff48 	bl	8006d88 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001ef8:	f7ff ffea 	bl	8001ed0 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001efc:	218d      	movs	r1, #141	@ 0x8d
 8001efe:	202a      	movs	r0, #42	@ 0x2a
 8001f00:	f7ff ff50 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001f04:	213e      	movs	r1, #62	@ 0x3e
 8001f06:	202b      	movs	r0, #43	@ 0x2b
 8001f08:	f7ff ff4c 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8001f0c:	211e      	movs	r1, #30
 8001f0e:	202d      	movs	r0, #45	@ 0x2d
 8001f10:	f7ff ff48 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001f14:	2100      	movs	r1, #0
 8001f16:	202c      	movs	r0, #44	@ 0x2c
 8001f18:	f7ff ff44 	bl	8001da4 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001f1c:	2140      	movs	r1, #64	@ 0x40
 8001f1e:	2015      	movs	r0, #21
 8001f20:	f7ff ff40 	bl	8001da4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001f24:	213d      	movs	r1, #61	@ 0x3d
 8001f26:	2011      	movs	r0, #17
 8001f28:	f7ff ff3c 	bl	8001da4 <Write_MFRC522>

	AntennaOn();
 8001f2c:	f7ff ffc5 	bl	8001eba <AntennaOn>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020400 	.word	0x40020400

08001f3c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001f52:	2300      	movs	r3, #0
 8001f54:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d006      	beq.n	8001f6e <MFRC522_ToCard+0x32>
 8001f60:	2b0e      	cmp	r3, #14
 8001f62:	d109      	bne.n	8001f78 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001f64:	2312      	movs	r3, #18
 8001f66:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	777b      	strb	r3, [r7, #29]
			break;
 8001f6c:	e005      	b.n	8001f7a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001f6e:	2377      	movs	r3, #119	@ 0x77
 8001f70:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001f72:	2330      	movs	r3, #48	@ 0x30
 8001f74:	777b      	strb	r3, [r7, #29]
			break;
 8001f76:	e000      	b.n	8001f7a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001f78:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001f7a:	7fbb      	ldrb	r3, [r7, #30]
 8001f7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	2002      	movs	r0, #2
 8001f86:	f7ff ff0d 	bl	8001da4 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001f8a:	2180      	movs	r1, #128	@ 0x80
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	f7ff ff74 	bl	8001e7a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	200a      	movs	r0, #10
 8001f96:	f7ff ff55 	bl	8001e44 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff ff01 	bl	8001da4 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	e00a      	b.n	8001fbe <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2009      	movs	r0, #9
 8001fb4:	f7ff fef6 	bl	8001da4 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3f0      	bcc.n	8001fa8 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff feea 	bl	8001da4 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d103      	bne.n	8001fde <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	200d      	movs	r0, #13
 8001fda:	f7ff ff33 	bl	8001e44 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001fde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fe2:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001fe4:	2004      	movs	r0, #4
 8001fe6:	f7ff ff03 	bl	8001df0 <Read_MFRC522>
 8001fea:	4603      	mov	r3, r0
 8001fec:	773b      	strb	r3, [r7, #28]
        i--;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <MFRC522_ToCard+0xd4>
 8001ffa:	7f3b      	ldrb	r3, [r7, #28]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <MFRC522_ToCard+0xd4>
 8002004:	7f3a      	ldrb	r2, [r7, #28]
 8002006:	7f7b      	ldrb	r3, [r7, #29]
 8002008:	4013      	ands	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0e9      	beq.n	8001fe4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	200d      	movs	r0, #13
 8002014:	f7ff ff31 	bl	8001e7a <ClearBitMask>
	
    if (i != 0)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800201e:	2006      	movs	r0, #6
 8002020:	f7ff fee6 	bl	8001df0 <Read_MFRC522>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 031b 	and.w	r3, r3, #27
 800202a:	2b00      	cmp	r3, #0
 800202c:	d148      	bne.n	80020c0 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8002032:	7f3a      	ldrb	r2, [r7, #28]
 8002034:	7fbb      	ldrb	r3, [r7, #30]
 8002036:	4013      	ands	r3, r2
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8002042:	2301      	movs	r3, #1
 8002044:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b0c      	cmp	r3, #12
 800204a:	d13b      	bne.n	80020c4 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800204c:	200a      	movs	r0, #10
 800204e:	f7ff fecf 	bl	8001df0 <Read_MFRC522>
 8002052:	4603      	mov	r3, r0
 8002054:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002056:	200c      	movs	r0, #12
 8002058:	f7ff feca 	bl	8001df0 <Read_MFRC522>
 800205c:	4603      	mov	r3, r0
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800206a:	7f3b      	ldrb	r3, [r7, #28]
 800206c:	3b01      	subs	r3, #1
 800206e:	00da      	lsls	r2, r3, #3
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	4413      	add	r3, r2
 8002074:	461a      	mov	r2, r3
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e004      	b.n	8002086 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 800207c:	7f3b      	ldrb	r3, [r7, #28]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	461a      	mov	r2, r3
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002086:	7f3b      	ldrb	r3, [r7, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 800208c:	2301      	movs	r3, #1
 800208e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002090:	7f3b      	ldrb	r3, [r7, #28]
 8002092:	2b10      	cmp	r3, #16
 8002094:	d901      	bls.n	800209a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8002096:	2310      	movs	r3, #16
 8002098:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	e00a      	b.n	80020b6 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	18d4      	adds	r4, r2, r3
 80020a6:	2009      	movs	r0, #9
 80020a8:	f7ff fea2 	bl	8001df0 <Read_MFRC522>
 80020ac:	4603      	mov	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	7f3b      	ldrb	r3, [r7, #28]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3f0      	bcc.n	80020a0 <MFRC522_ToCard+0x164>
 80020be:	e001      	b.n	80020c4 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 80020c0:	2302      	movs	r3, #2
 80020c2:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	4603      	mov	r3, r0
 80020d6:	6039      	str	r1, [r7, #0]
 80020d8:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80020da:	2107      	movs	r1, #7
 80020dc:	200d      	movs	r0, #13
 80020de:	f7ff fe61 	bl	8001da4 <Write_MFRC522>
	
	TagType[0] = reqMode;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	79fa      	ldrb	r2, [r7, #7]
 80020e6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	200c      	movs	r0, #12
 80020f6:	f7ff ff21 	bl	8001f3c <MFRC522_ToCard>
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <MFRC522_Request+0x3c>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d001      	beq.n	800210e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 800210a:	2302      	movs	r3, #2
 800210c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af02      	add	r7, sp, #8
 800211e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002120:	2300      	movs	r3, #0
 8002122:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002124:	2100      	movs	r1, #0
 8002126:	200d      	movs	r0, #13
 8002128:	f7ff fe3c 	bl	8001da4 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2293      	movs	r2, #147	@ 0x93
 8002130:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	2220      	movs	r2, #32
 8002138:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	200c      	movs	r0, #12
 8002148:	f7ff fef8 	bl	8001f3c <MFRC522_ToCard>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	73bb      	strb	r3, [r7, #14]
 800215a:	e009      	b.n	8002170 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	4053      	eors	r3, r2
 8002168:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	3301      	adds	r3, #1
 800216e:	73bb      	strb	r3, [r7, #14]
 8002170:	7bbb      	ldrb	r3, [r7, #14]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d9f2      	bls.n	800215c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	7b7a      	ldrb	r2, [r7, #13]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8002184:	2302      	movs	r3, #2
 8002186:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
} 
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern volatile uint8_t can_rx_flag;
extern volatile uint32_t can_rx_count ;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
//    HAL_UART_Transmit(&huart2, (uint8_t*)"INTERRUPT OK\r\n", 15, HAL_MAX_DELAY);
        HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rxData) ;
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800219e:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80021a0:	2100      	movs	r1, #0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f003 fef4 	bl	8005f90 <HAL_CAN_GetRxMessage>
                  can_rx_flag = 1;  // báo về main xử lý
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
                  can_rx_count++;  // tăng biến đếm khi nhận
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000790 	.word	0x20000790
 80021c4:	20000774 	.word	0x20000774
 80021c8:	20000798 	.word	0x20000798
 80021cc:	200007a4 	.word	0x200007a4

080021d0 <CAN_ReceiveAndPrint>:

void CAN_ReceiveAndPrint(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0a2      	sub	sp, #136	@ 0x88
 80021d4:	af04      	add	r7, sp, #16
//    uint8_t RxData[8];
    char buffer[64];

//    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rxData) ;

    if (RxHeader.DLC == 0) {
 80021d6:	4b55      	ldr	r3, [pc, #340]	@ (800232c <CAN_ReceiveAndPrint+0x15c>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <CAN_ReceiveAndPrint+0x1e>
        HAL_UART_Transmit(&huart2, (uint8_t*)"⚠️ EMPTY FRAME RECEIVED\r\n", 26, HAL_MAX_DELAY);
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	221a      	movs	r2, #26
 80021e4:	4952      	ldr	r1, [pc, #328]	@ (8002330 <CAN_ReceiveAndPrint+0x160>)
 80021e6:	4853      	ldr	r0, [pc, #332]	@ (8002334 <CAN_ReceiveAndPrint+0x164>)
 80021e8:	f008 fbf4 	bl	800a9d4 <HAL_UART_Transmit>
 80021ec:	e09a      	b.n	8002324 <CAN_ReceiveAndPrint+0x154>
        return;
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)"✅ CAN RECEIVED\r\n", 17, HAL_MAX_DELAY);
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	2211      	movs	r2, #17
 80021f4:	4950      	ldr	r1, [pc, #320]	@ (8002338 <CAN_ReceiveAndPrint+0x168>)
 80021f6:	484f      	ldr	r0, [pc, #316]	@ (8002334 <CAN_ReceiveAndPrint+0x164>)
 80021f8:	f008 fbec 	bl	800a9d4 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "RX : ID=0x%03lX DLC=%lu DATA=",
             (uint32_t)RxHeader.StdId, (uint32_t)RxHeader.DLC);
 80021fc:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <CAN_ReceiveAndPrint+0x15c>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <CAN_ReceiveAndPrint+0x15c>)
 8002202:	691b      	ldr	r3, [r3, #16]
    snprintf(buffer, sizeof(buffer), "RX : ID=0x%03lX DLC=%lu DATA=",
 8002204:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <CAN_ReceiveAndPrint+0x16c>)
 800220e:	2140      	movs	r1, #64	@ 0x40
 8002210:	f00a f91e 	bl	800c450 <sniprintf>

    for (uint8_t i = 0; i < RxHeader.DLC; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800221a:	e017      	b.n	800224c <CAN_ReceiveAndPrint+0x7c>
        char hex[8];
        sprintf(hex, "%02X ", rxData[i]);
 800221c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002220:	4a47      	ldr	r2, [pc, #284]	@ (8002340 <CAN_ReceiveAndPrint+0x170>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	461a      	mov	r2, r3
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4946      	ldr	r1, [pc, #280]	@ (8002344 <CAN_ReceiveAndPrint+0x174>)
 800222c:	4618      	mov	r0, r3
 800222e:	f00a f945 	bl	800c4bc <siprintf>
        strcat(buffer, hex);
 8002232:	f107 0220 	add.w	r2, r7, #32
 8002236:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f00a fa4f 	bl	800c6e0 <strcat>
    for (uint8_t i = 0; i < RxHeader.DLC; i++) {
 8002242:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002246:	3301      	adds	r3, #1
 8002248:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800224c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8002250:	4b36      	ldr	r3, [pc, #216]	@ (800232c <CAN_ReceiveAndPrint+0x15c>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d3e1      	bcc.n	800221c <CAN_ReceiveAndPrint+0x4c>
    }

    strcat(buffer, "\r\n");
 8002258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f807 	bl	8000270 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800226a:	4413      	add	r3, r2
 800226c:	4a36      	ldr	r2, [pc, #216]	@ (8002348 <CAN_ReceiveAndPrint+0x178>)
 800226e:	8811      	ldrh	r1, [r2, #0]
 8002270:	7892      	ldrb	r2, [r2, #2]
 8002272:	8019      	strh	r1, [r3, #0]
 8002274:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002276:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800227a:	4618      	mov	r0, r3
 800227c:	f7fd fff8 	bl	8000270 <strlen>
 8002280:	4603      	mov	r3, r0
 8002282:	b29a      	uxth	r2, r3
 8002284:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	4829      	ldr	r0, [pc, #164]	@ (8002334 <CAN_ReceiveAndPrint+0x164>)
 800228e:	f008 fba1 	bl	800a9d4 <HAL_UART_Transmit>

    for (int i = 0; i < 4; i++) {
 8002292:	2300      	movs	r3, #0
 8002294:	673b      	str	r3, [r7, #112]	@ 0x70
 8002296:	e019      	b.n	80022cc <CAN_ReceiveAndPrint+0xfc>
        char dbg[32];
        snprintf(dbg, sizeof(dbg), "Byte[%d] = 0x%02X\r\n", i, rxData[i]);
 8002298:	4a29      	ldr	r2, [pc, #164]	@ (8002340 <CAN_ReceiveAndPrint+0x170>)
 800229a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4638      	mov	r0, r7
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022a6:	4a29      	ldr	r2, [pc, #164]	@ (800234c <CAN_ReceiveAndPrint+0x17c>)
 80022a8:	2120      	movs	r1, #32
 80022aa:	f00a f8d1 	bl	800c450 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 80022ae:	463b      	mov	r3, r7
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ffdd 	bl	8000270 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4639      	mov	r1, r7
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	481c      	ldr	r0, [pc, #112]	@ (8002334 <CAN_ReceiveAndPrint+0x164>)
 80022c2:	f008 fb87 	bl	800a9d4 <HAL_UART_Transmit>
    for (int i = 0; i < 4; i++) {
 80022c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022c8:	3301      	adds	r3, #1
 80022ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80022cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	dde2      	ble.n	8002298 <CAN_ReceiveAndPrint+0xc8>
    }
    float velocity_f = 0.00f;
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t velocity_i = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28

            memcpy(&velocity_f, rxData, sizeof(float));
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <CAN_ReceiveAndPrint+0x170>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            memcpy(&velocity_i, rxData, sizeof(int32_t)); // nếu cần int thay float
 80022e2:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <CAN_ReceiveAndPrint+0x170>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	62bb      	str	r3, [r7, #40]	@ 0x28

            snprintf(buffer, sizeof(buffer),
 80022e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f92c 	bl	8000548 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022f6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80022fa:	9102      	str	r1, [sp, #8]
 80022fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002300:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <CAN_ReceiveAndPrint+0x180>)
 8002302:	2140      	movs	r1, #64	@ 0x40
 8002304:	f00a f8a4 	bl	800c450 <sniprintf>
                     "\rVelocity: float = %.2f | int = %ld\r\n",
                     velocity_f, (long)velocity_i);

            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002308:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800230c:	4618      	mov	r0, r3
 800230e:	f7fd ffaf 	bl	8000270 <strlen>
 8002312:	4603      	mov	r3, r0
 8002314:	b29a      	uxth	r2, r3
 8002316:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <CAN_ReceiveAndPrint+0x164>)
 8002320:	f008 fb58 	bl	800a9d4 <HAL_UART_Transmit>
}
 8002324:	3778      	adds	r7, #120	@ 0x78
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000774 	.word	0x20000774
 8002330:	0800f538 	.word	0x0800f538
 8002334:	200006bc 	.word	0x200006bc
 8002338:	0800f558 	.word	0x0800f558
 800233c:	0800f56c 	.word	0x0800f56c
 8002340:	20000790 	.word	0x20000790
 8002344:	0800f58c 	.word	0x0800f58c
 8002348:	0800f594 	.word	0x0800f594
 800234c:	0800f598 	.word	0x0800f598
 8002350:	0800f5ac 	.word	0x0800f5ac

08002354 <CAN_SendTopicData>:

    return status;
}

HAL_StatusTypeDef CAN_SendTopicData(uint16_t topic_id, uint8_t *data, uint8_t len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	80fb      	strh	r3, [r7, #6]
 8002360:	4613      	mov	r3, r2
 8002362:	717b      	strb	r3, [r7, #5]
    uint32_t TxMailbox;

    if (len > 8) len = 8;
 8002364:	797b      	ldrb	r3, [r7, #5]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d901      	bls.n	800236e <CAN_SendTopicData+0x1a>
 800236a:	2308      	movs	r3, #8
 800236c:	717b      	strb	r3, [r7, #5]

    TxHeader.StdId = topic_id;
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	4a0f      	ldr	r2, [pc, #60]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 8002372:	6013      	str	r3, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = len;
 8002380:	797b      	ldrb	r3, [r7, #5]
 8002382:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 8002384:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 8002388:	2200      	movs	r2, #0
 800238a:	751a      	strb	r2, [r3, #20]
    }
    snprintf(log + offset, sizeof(log) - offset, "\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)log, strlen(log), 1);
#endif

    can_tx_count++;
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <CAN_SendTopicData+0x60>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <CAN_SendTopicData+0x60>)
 8002394:	6013      	str	r3, [r2, #0]
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4904      	ldr	r1, [pc, #16]	@ (80023b0 <CAN_SendTopicData+0x5c>)
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <CAN_SendTopicData+0x64>)
 80023a0:	f003 fd26 	bl	8005df0 <HAL_CAN_AddTxMessage>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000075c 	.word	0x2000075c
 80023b4:	200007a0 	.word	0x200007a0
 80023b8:	20000378 	.word	0x20000378

080023bc <Send_All_SensorData_CAN>:
extern uint32_t imu_timer;
extern volatile uint8_t timer10ms_flag ;


void Send_All_SensorData_CAN(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	static uint32_t last_us_trigger_time=0 ;
    if (timer10ms_flag) {
 80023c0:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <Send_All_SensorData_CAN+0x94>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <Send_All_SensorData_CAN+0x18>
        timer10ms_flag = 0;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <Send_All_SensorData_CAN+0x94>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
        BNO055_SendEulerCAN();
 80023d0:	f7ff fa04 	bl	80017dc <BNO055_SendEulerCAN>
    }

    if (HAL_GetTick() - debug_timer >= 10) {
 80023d4:	f002 fe06 	bl	8004fe4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <Send_All_SensorData_CAN+0x98>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d906      	bls.n	80023f2 <Send_All_SensorData_CAN+0x36>
        BNO055_PrintEulerDebug();
 80023e4:	f7ff fa56 	bl	8001894 <BNO055_PrintEulerDebug>
        debug_timer = HAL_GetTick();
 80023e8:	f002 fdfc 	bl	8004fe4 <HAL_GetTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <Send_All_SensorData_CAN+0x98>)
 80023f0:	6013      	str	r3, [r2, #0]
    }

    if (HAL_GetTick() - last_us_trigger_time >= 200) {
 80023f2:	f002 fdf7 	bl	8004fe4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <Send_All_SensorData_CAN+0x9c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8002400:	d90a      	bls.n	8002418 <Send_All_SensorData_CAN+0x5c>
            US01_TriggerAll_Sequential();      // Blocking đo 4 cảm biến
 8002402:	f002 fd26 	bl	8004e52 <US01_TriggerAll_Sequential>
            PrintAllDistances();               // UART in khoảng cách
 8002406:	f002 fd3d 	bl	8004e84 <PrintAllDistances>
            US01_SendAllDistances_CAN();       // Gửi qua CAN
 800240a:	f002 fce9 	bl	8004de0 <US01_SendAllDistances_CAN>
            last_us_trigger_time = HAL_GetTick();
 800240e:	f002 fde9 	bl	8004fe4 <HAL_GetTick>
 8002412:	4603      	mov	r3, r0
 8002414:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <Send_All_SensorData_CAN+0x9c>)
 8002416:	6013      	str	r3, [r2, #0]
        }


    static uint32_t last_mq135_time = 0;
    if (HAL_GetTick() - last_mq135_time >= 1000) {
 8002418:	f002 fde4 	bl	8004fe4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <Send_All_SensorData_CAN+0xa0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002428:	d30d      	bcc.n	8002446 <Send_All_SensorData_CAN+0x8a>
        MQ135_Send_CAN(&mq135, 25.0f, 50.0f, &huart2, TOPIC_ID_MQ135);  // Dùng hàm DMA mới
 800242a:	2211      	movs	r2, #17
 800242c:	490c      	ldr	r1, [pc, #48]	@ (8002460 <Send_All_SensorData_CAN+0xa4>)
 800242e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002464 <Send_All_SensorData_CAN+0xa8>
 8002432:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002436:	480c      	ldr	r0, [pc, #48]	@ (8002468 <Send_All_SensorData_CAN+0xac>)
 8002438:	f7ff fc52 	bl	8001ce0 <MQ135_Send_CAN>
        last_mq135_time = HAL_GetTick();
 800243c:	f002 fdd2 	bl	8004fe4 <HAL_GetTick>
 8002440:	4603      	mov	r3, r0
 8002442:	4a06      	ldr	r2, [pc, #24]	@ (800245c <Send_All_SensorData_CAN+0xa0>)
 8002444:	6013      	str	r3, [r2, #0]
    }
    checkRFIDAndControlRelay();
 8002446:	f001 fa9b 	bl	8003980 <checkRFIDAndControlRelay>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200007ac 	.word	0x200007ac
 8002454:	2000079c 	.word	0x2000079c
 8002458:	20000320 	.word	0x20000320
 800245c:	20000324 	.word	0x20000324
 8002460:	200006bc 	.word	0x200006bc
 8002464:	42480000 	.word	0x42480000
 8002468:	20000740 	.word	0x20000740

0800246c <check_it>:
    char adc[32];
    sprintf(adc, "ADC VALUE: %d\r\n", adc_value);
    HAL_UART_Transmit(&huart2, (uint8_t*)adc, strlen(adc), HAL_MAX_DELAY);
}

void check_it(TIM_HandleTypeDef *htimx) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b094      	sub	sp, #80	@ 0x50
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    char *timer_name = "UNKNOWN";
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <check_it+0x7c>)
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (htimx->Instance == TIM1) timer_name = "TIM1";
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <check_it+0x80>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <check_it+0x1c>
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <check_it+0x84>)
 8002484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002486:	e016      	b.n	80024b6 <check_it+0x4a>
    else if (htimx->Instance == TIM2) timer_name = "TIM2";
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002490:	d102      	bne.n	8002498 <check_it+0x2c>
 8002492:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <check_it+0x88>)
 8002494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002496:	e00e      	b.n	80024b6 <check_it+0x4a>
    else if (htimx->Instance == TIM4) timer_name = "TIM4";
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a16      	ldr	r2, [pc, #88]	@ (80024f8 <check_it+0x8c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d102      	bne.n	80024a8 <check_it+0x3c>
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <check_it+0x90>)
 80024a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024a6:	e006      	b.n	80024b6 <check_it+0x4a>
    else if (htimx->Instance == TIM8) timer_name = "TIM8";
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <check_it+0x94>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <check_it+0x4a>
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <check_it+0x98>)
 80024b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char msg[64];
    snprintf(msg, sizeof(msg), ">> [INTERRUPT] Callback from %s\r\n", timer_name);
 80024b6:	f107 000c 	add.w	r0, r7, #12
 80024ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <check_it+0x9c>)
 80024be:	2140      	movs	r1, #64	@ 0x40
 80024c0:	f009 ffc6 	bl	800c450 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd fed1 	bl	8000270 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f107 010c 	add.w	r1, r7, #12
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	480c      	ldr	r0, [pc, #48]	@ (800250c <check_it+0xa0>)
 80024dc:	f008 fa7a 	bl	800a9d4 <HAL_UART_Transmit>
}
 80024e0:	bf00      	nop
 80024e2:	3750      	adds	r7, #80	@ 0x50
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	0800f6b4 	.word	0x0800f6b4
 80024ec:	40010000 	.word	0x40010000
 80024f0:	0800f6bc 	.word	0x0800f6bc
 80024f4:	0800f6c4 	.word	0x0800f6c4
 80024f8:	40000800 	.word	0x40000800
 80024fc:	0800f6cc 	.word	0x0800f6cc
 8002500:	40010400 	.word	0x40010400
 8002504:	0800f6d4 	.word	0x0800f6d4
 8002508:	0800f6dc 	.word	0x0800f6dc
 800250c:	200006bc 	.word	0x200006bc

08002510 <DisplaySensorData_ByTopic>:
    }
}


void DisplaySensorData_ByTopic(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
    extern uint32_t debug_timer;
    extern MQ135_HandleTypeDef mq135;
    switch (current_display_topic) {
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <DisplaySensorData_ByTopic+0xb0>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b10      	subs	r3, #16
 800251c:	2b09      	cmp	r3, #9
 800251e:	d849      	bhi.n	80025b4 <DisplaySensorData_ByTopic+0xa4>
 8002520:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <DisplaySensorData_ByTopic+0x18>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	080025a9 	.word	0x080025a9
 800252c:	08002595 	.word	0x08002595
 8002530:	08002551 	.word	0x08002551
 8002534:	080025b5 	.word	0x080025b5
 8002538:	080025b5 	.word	0x080025b5
 800253c:	080025b5 	.word	0x080025b5
 8002540:	08002585 	.word	0x08002585
 8002544:	080025b5 	.word	0x080025b5
 8002548:	080025b5 	.word	0x080025b5
 800254c:	080025af 	.word	0x080025af

    case TOPIC_ID_IMU_EULER:
        if (timer10ms_flag){
 8002550:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <DisplaySensorData_ByTopic+0xb4>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <DisplaySensorData_ByTopic+0x54>
        	timer10ms_flag = 0;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <DisplaySensorData_ByTopic+0xb4>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
            BNO055_SendEulerCAN();
 8002560:	f7ff f93c 	bl	80017dc <BNO055_SendEulerCAN>
        }
        if (HAL_GetTick() - debug_timer >= 10) {
 8002564:	f002 fd3e 	bl	8004fe4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <DisplaySensorData_ByTopic+0xb8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b09      	cmp	r3, #9
 8002572:	d921      	bls.n	80025b8 <DisplaySensorData_ByTopic+0xa8>
            BNO055_PrintEulerDebug();
 8002574:	f7ff f98e 	bl	8001894 <BNO055_PrintEulerDebug>
            debug_timer = HAL_GetTick();
 8002578:	f002 fd34 	bl	8004fe4 <HAL_GetTick>
 800257c:	4603      	mov	r3, r0
 800257e:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <DisplaySensorData_ByTopic+0xb8>)
 8002580:	6013      	str	r3, [r2, #0]
        }
        break;
 8002582:	e019      	b.n	80025b8 <DisplaySensorData_ByTopic+0xa8>
//    case TOPIC_ID_IMU_Accel:
//        BNO055_SendAccelCAN();
//        break;

    case TOPIC_ID_US01:
        US01_TriggerAll_Sequential();
 8002584:	f002 fc65 	bl	8004e52 <US01_TriggerAll_Sequential>
        HAL_Delay(100);
 8002588:	2064      	movs	r0, #100	@ 0x64
 800258a:	f002 fd37 	bl	8004ffc <HAL_Delay>
        US01_SendAllDistances_CAN();
 800258e:	f002 fc27 	bl	8004de0 <US01_SendAllDistances_CAN>
        break;
 8002592:	e012      	b.n	80025ba <DisplaySensorData_ByTopic+0xaa>

    case TOPIC_ID_MQ135:
        MQ135_Send_CAN(&mq135, 25.0f, 50.0f, &huart2, TOPIC_ID_MQ135);
 8002594:	2211      	movs	r2, #17
 8002596:	490d      	ldr	r1, [pc, #52]	@ (80025cc <DisplaySensorData_ByTopic+0xbc>)
 8002598:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80025d0 <DisplaySensorData_ByTopic+0xc0>
 800259c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80025a0:	480c      	ldr	r0, [pc, #48]	@ (80025d4 <DisplaySensorData_ByTopic+0xc4>)
 80025a2:	f7ff fb9d 	bl	8001ce0 <MQ135_Send_CAN>
        break;
 80025a6:	e008      	b.n	80025ba <DisplaySensorData_ByTopic+0xaa>

    case TOPIC_ID_RFID:
        checkRFIDAndControlRelay();
 80025a8:	f001 f9ea 	bl	8003980 <checkRFIDAndControlRelay>
        break;
 80025ac:	e005      	b.n	80025ba <DisplaySensorData_ByTopic+0xaa>

    case TOPIC_ID_SEND_ALL:
        Send_All_SensorData_CAN();
 80025ae:	f7ff ff05 	bl	80023bc <Send_All_SensorData_CAN>
        break;
 80025b2:	e002      	b.n	80025ba <DisplaySensorData_ByTopic+0xaa>

    default:
        // Không làm gì nếu không có topic được chọn
        break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <DisplaySensorData_ByTopic+0xaa>
        break;
 80025b8:	bf00      	nop
    }
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000328 	.word	0x20000328
 80025c4:	200007ac 	.word	0x200007ac
 80025c8:	2000079c 	.word	0x2000079c
 80025cc:	200006bc 	.word	0x200006bc
 80025d0:	42480000 	.word	0x42480000
 80025d4:	20000740 	.word	0x20000740

080025d8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80025e2:	4a38      	ldr	r2, [pc, #224]	@ (80026c4 <HD44780_Init+0xec>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80025e8:	4b37      	ldr	r3, [pc, #220]	@ (80026c8 <HD44780_Init+0xf0>)
 80025ea:	2208      	movs	r2, #8
 80025ec:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80025ee:	4b37      	ldr	r3, [pc, #220]	@ (80026cc <HD44780_Init+0xf4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <HD44780_Init+0xec>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d907      	bls.n	800260c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80025fc:	4b33      	ldr	r3, [pc, #204]	@ (80026cc <HD44780_Init+0xf4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HD44780_Init+0xf4>)
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e006      	b.n	800261a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HD44780_Init+0xf4>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <HD44780_Init+0xf4>)
 8002618:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800261a:	f000 f94b 	bl	80028b4 <DelayInit>
  HAL_Delay(50);
 800261e:	2032      	movs	r0, #50	@ 0x32
 8002620:	f002 fcec 	bl	8004ffc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8002624:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HD44780_Init+0xf0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f909 	bl	8002840 <ExpanderWrite>
  HAL_Delay(1000);
 800262e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002632:	f002 fce3 	bl	8004ffc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8002636:	2030      	movs	r0, #48	@ 0x30
 8002638:	f000 f8f1 	bl	800281e <Write4Bits>
  DelayUS(4500);
 800263c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002640:	f000 f962 	bl	8002908 <DelayUS>

  Write4Bits(0x03 << 4);
 8002644:	2030      	movs	r0, #48	@ 0x30
 8002646:	f000 f8ea 	bl	800281e <Write4Bits>
  DelayUS(4500);
 800264a:	f241 1094 	movw	r0, #4500	@ 0x1194
 800264e:	f000 f95b 	bl	8002908 <DelayUS>

  Write4Bits(0x03 << 4);
 8002652:	2030      	movs	r0, #48	@ 0x30
 8002654:	f000 f8e3 	bl	800281e <Write4Bits>
  DelayUS(4500);
 8002658:	f241 1094 	movw	r0, #4500	@ 0x1194
 800265c:	f000 f954 	bl	8002908 <DelayUS>

  Write4Bits(0x02 << 4);
 8002660:	2020      	movs	r0, #32
 8002662:	f000 f8dc 	bl	800281e <Write4Bits>
  DelayUS(100);
 8002666:	2064      	movs	r0, #100	@ 0x64
 8002668:	f000 f94e 	bl	8002908 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HD44780_Init+0xf4>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f894 	bl	80027a4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <HD44780_Init+0xf8>)
 800267e:	2204      	movs	r2, #4
 8002680:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8002682:	f000 f843 	bl	800270c <HD44780_Display>
  HD44780_Clear();
 8002686:	f000 f82b 	bl	80026e0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HD44780_Init+0xfc>)
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <HD44780_Init+0xfc>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f882 	bl	80027a4 <SendCommand>
  DelayUS(4500);
 80026a0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80026a4:	f000 f930 	bl	8002908 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80026a8:	490b      	ldr	r1, [pc, #44]	@ (80026d8 <HD44780_Init+0x100>)
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f844 	bl	8002738 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80026b0:	490a      	ldr	r1, [pc, #40]	@ (80026dc <HD44780_Init+0x104>)
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 f840 	bl	8002738 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80026b8:	f000 f81d 	bl	80026f6 <HD44780_Home>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	2000032d 	.word	0x2000032d
 80026c8:	2000032e 	.word	0x2000032e
 80026cc:	2000032a 	.word	0x2000032a
 80026d0:	2000032b 	.word	0x2000032b
 80026d4:	2000032c 	.word	0x2000032c
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000008 	.word	0x20000008

080026e0 <HD44780_Clear>:

void HD44780_Clear()
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 f85d 	bl	80027a4 <SendCommand>
  DelayUS(2000);
 80026ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80026ee:	f000 f90b 	bl	8002908 <DelayUS>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HD44780_Home>:

void HD44780_Home()
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80026fa:	2002      	movs	r0, #2
 80026fc:	f000 f852 	bl	80027a4 <SendCommand>
  DelayUS(2000);
 8002700:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002704:	f000 f900 	bl	8002908 <DelayUS>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HD44780_Display+0x28>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HD44780_Display+0x28>)
 800271c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HD44780_Display+0x28>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f83b 	bl	80027a4 <SendCommand>
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000032b 	.word	0x2000032b

08002738 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	6039      	str	r1, [r7, #0]
 8002742:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	b25b      	sxtb	r3, r3
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	b25b      	sxtb	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f821 	bl	80027a4 <SendCommand>
  for (int i=0; i<8; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e009      	b.n	800277c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f825 	bl	80027c0 <SendChar>
  for (int i=0; i<8; i++)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3301      	adds	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b07      	cmp	r3, #7
 8002780:	ddf2      	ble.n	8002768 <HD44780_CreateSpecialChar+0x30>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HD44780_Backlight+0x14>)
 8002792:	2208      	movs	r2, #8
 8002794:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f852 	bl	8002840 <ExpanderWrite>
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000032e 	.word	0x2000032e

080027a4 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f812 	bl	80027dc <Send>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f804 	bl	80027dc <Send>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	460a      	mov	r2, r1
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f023 030f 	bic.w	r3, r3, #15
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	4313      	orrs	r3, r2
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f80b 	bl	800281e <Write4Bits>
  Write4Bits((lownib)|mode);
 8002808:	7bba      	ldrb	r2, [r7, #14]
 800280a:	79bb      	ldrb	r3, [r7, #6]
 800280c:	4313      	orrs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f804 	bl	800281e <Write4Bits>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f808 	bl	8002840 <ExpanderWrite>
  PulseEnable(value);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f820 	bl	8002878 <PulseEnable>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <ExpanderWrite+0x30>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4313      	orrs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8002856:	f107 020f 	add.w	r2, r7, #15
 800285a:	230a      	movs	r3, #10
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	214e      	movs	r1, #78	@ 0x4e
 8002862:	4804      	ldr	r0, [pc, #16]	@ (8002874 <ExpanderWrite+0x34>)
 8002864:	f004 fbee 	bl	8007044 <HAL_I2C_Master_Transmit>
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2000032e 	.word	0x2000032e
 8002874:	200003d0 	.word	0x200003d0

08002878 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ffd8 	bl	8002840 <ExpanderWrite>
  DelayUS(20);
 8002890:	2014      	movs	r0, #20
 8002892:	f000 f839 	bl	8002908 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffce 	bl	8002840 <ExpanderWrite>
  DelayUS(20);
 80028a4:	2014      	movs	r0, #20
 80028a6:	f000 f82f 	bl	8002908 <DelayUS>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <DelayInit>:

static void DelayInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <DelayInit+0x4c>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a10      	ldr	r2, [pc, #64]	@ (8002900 <DelayInit+0x4c>)
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <DelayInit+0x4c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <DelayInit+0x4c>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <DelayInit+0x50>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002904 <DelayInit+0x50>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <DelayInit+0x50>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <DelayInit+0x50>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <DelayInit+0x50>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80028ee:	bf00      	nop
  __ASM volatile ("NOP");
 80028f0:	bf00      	nop
  __ASM volatile ("NOP");
 80028f2:	bf00      	nop
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000edf0 	.word	0xe000edf0
 8002904:	e0001000 	.word	0xe0001000

08002908 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002910:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <DelayUS+0x44>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <DelayUS+0x48>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9a      	lsrs	r2, r3, #18
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <DelayUS+0x4c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <DelayUS+0x4c>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f6      	bhi.n	800292a <DelayUS+0x22>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	200000f8 	.word	0x200000f8
 8002950:	431bde83 	.word	0x431bde83
 8002954:	e0001000 	.word	0xe0001000

08002958 <HAL_TIM_PeriodElapsedCallback>:
uint32_t ADC_SAMPLES[1000];
uint32_t NUM_SAMPLES = 0;
volatile uint8_t mq135_done = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d102      	bne.n	8002970 <HAL_TIM_PeriodElapsedCallback+0x18>
        timer10ms_flag = 1;
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
    }
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40001400 	.word	0x40001400
 8002980:	200007ac 	.word	0x200007ac

08002984 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    static uint32_t idx = 0;
    ADC_SAMPLES[idx++] = HAL_ADC_GetValue(hadc);
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <HAL_ADC_ConvCpltCallback+0x50>)
 800298e:	681c      	ldr	r4, [r3, #0]
 8002990:	1c63      	adds	r3, r4, #1
 8002992:	4a10      	ldr	r2, [pc, #64]	@ (80029d4 <HAL_ADC_ConvCpltCallback+0x50>)
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f002 fdc3 	bl	8005522 <HAL_ADC_GetValue>
 800299c:	4603      	mov	r3, r0
 800299e:	4a0e      	ldr	r2, [pc, #56]	@ (80029d8 <HAL_ADC_ConvCpltCallback+0x54>)
 80029a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    if (idx < NUM_SAMPLES) {
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_ADC_ConvCpltCallback+0x50>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_ADC_ConvCpltCallback+0x58>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d203      	bcs.n	80029b8 <HAL_ADC_ConvCpltCallback+0x34>
        HAL_ADC_Start_IT(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f002 fb8b 	bl	80050cc <HAL_ADC_Start_IT>
    } else {
        HAL_ADC_Stop_IT(hadc);
        mq135_done = 1;
        idx = 0;
    }
}
 80029b6:	e008      	b.n	80029ca <HAL_ADC_ConvCpltCallback+0x46>
        HAL_ADC_Stop_IT(hadc);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f002 fc65 	bl	8005288 <HAL_ADC_Stop_IT>
        mq135_done = 1;
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
        idx = 0;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <HAL_ADC_ConvCpltCallback+0x50>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20001758 	.word	0x20001758
 80029d8:	200007b0 	.word	0x200007b0
 80029dc:	20001750 	.word	0x20001750
 80029e0:	20001754 	.word	0x20001754

080029e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b096      	sub	sp, #88	@ 0x58
 80029e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ea:	f002 fa95 	bl	8004f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ee:	f000 f8f1 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f2:	f000 fdf5 	bl	80035e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80029f6:	f000 fd9f 	bl	8003538 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029fa:	f000 fdc7 	bl	800358c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80029fe:	f000 fa71 	bl	8002ee4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002a02:	f000 f951 	bl	8002ca8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8002a06:	f000 f9a1 	bl	8002d4c <MX_CAN1_Init>
  MX_CRC_Init();
 8002a0a:	f000 fa29 	bl	8002e60 <MX_CRC_Init>
  MX_TIM8_Init();
 8002a0e:	f000 fd1f 	bl	8003450 <MX_TIM8_Init>
  MX_CAN2_Init();
 8002a12:	f000 f9f1 	bl	8002df8 <MX_CAN2_Init>
  MX_I2C3_Init();
 8002a16:	f000 fa37 	bl	8002e88 <MX_I2C3_Init>
  MX_TIM1_Init();
 8002a1a:	f000 fa99 	bl	8002f50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a1e:	f000 fb5b 	bl	80030d8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002a22:	f000 fc39 	bl	8003298 <MX_TIM4_Init>
  MX_TIM6_Init();
 8002a26:	f000 fca7 	bl	8003378 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002a2a:	f000 fbc5 	bl	80031b8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002a2e:	f000 fcd9 	bl	80033e4 <MX_TIM7_Init>
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
//  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
//  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1);
  MFRC522_Init();
 8002a32:	f7ff fa55 	bl	8001ee0 <MFRC522_Init>
  BNO055_Init();
 8002a36:	f7fe fe5f 	bl	80016f8 <BNO055_Init>
  HD44780_Init(2);       // LCD 2 dòng
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f7ff fdcc 	bl	80025d8 <HD44780_Init>
  HD44780_Backlight();   // Bật đèn nền
 8002a40:	f7ff fea4 	bl	800278c <HD44780_Backlight>
  MQ135_Config(&mq135, &hadc1);
 8002a44:	4950      	ldr	r1, [pc, #320]	@ (8002b88 <main+0x1a4>)
 8002a46:	4851      	ldr	r0, [pc, #324]	@ (8002b8c <main+0x1a8>)
 8002a48:	f7ff f812 	bl	8001a70 <MQ135_Config>
  HAL_CAN_Start(&hcan1);
 8002a4c:	4850      	ldr	r0, [pc, #320]	@ (8002b90 <main+0x1ac>)
 8002a4e:	f003 f98b 	bl	8005d68 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8002a52:	4850      	ldr	r0, [pc, #320]	@ (8002b94 <main+0x1b0>)
 8002a54:	f003 f988 	bl	8005d68 <HAL_CAN_Start>
  CAN_DebugStatus();
 8002a58:	f7fe ff64 	bl	8001924 <CAN_DebugStatus>
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8002a5c:	494e      	ldr	r1, [pc, #312]	@ (8002b98 <main+0x1b4>)
 8002a5e:	484c      	ldr	r0, [pc, #304]	@ (8002b90 <main+0x1ac>)
 8002a60:	f003 f8a4 	bl	8005bac <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8002a64:	494c      	ldr	r1, [pc, #304]	@ (8002b98 <main+0x1b4>)
 8002a66:	484b      	ldr	r0, [pc, #300]	@ (8002b94 <main+0x1b0>)
 8002a68:	f003 f8a0 	bl	8005bac <HAL_CAN_ConfigFilter>
	    // Cấu hình và hiệu chuẩn MQ135
	    MQ135_Config(&mq135, &hadc1);
 8002a6c:	4946      	ldr	r1, [pc, #280]	@ (8002b88 <main+0x1a4>)
 8002a6e:	4847      	ldr	r0, [pc, #284]	@ (8002b8c <main+0x1a8>)
 8002a70:	f7fe fffe 	bl	8001a70 <MQ135_Config>
	    MQ135_CalibrateRo(&mq135, 25.0f, 50.0f);  // không khí sạch giả lập
 8002a74:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002b9c <main+0x1b8>
 8002a78:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002a7c:	4843      	ldr	r0, [pc, #268]	@ (8002b8c <main+0x1a8>)
 8002a7e:	f7ff f8fd 	bl	8001c7c <MQ135_CalibrateRo>
// // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002a82:	2102      	movs	r1, #2
 8002a84:	4842      	ldr	r0, [pc, #264]	@ (8002b90 <main+0x1ac>)
 8002a86:	f003 fbcd 	bl	8006224 <HAL_CAN_ActivateNotification>
//  DisplayTopicMenuUART();
//  BNO055_SendEulerCAN();
//  checkRFIDAndControlRelay();
  HAL_TIM_Base_Start_IT(&htim7);
 8002a8a:	4845      	ldr	r0, [pc, #276]	@ (8002ba0 <main+0x1bc>)
 8002a8c:	f006 fbc0 	bl	8009210 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  HandleUARTChoice();

	  if (can_rx_flag) {
 8002a90:	4b44      	ldr	r3, [pc, #272]	@ (8002ba4 <main+0x1c0>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d045      	beq.n	8002b26 <main+0x142>
	      can_rx_flag = 0;
 8002a9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ba4 <main+0x1c0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
	      static uint8_t last_data[8] = {0};
	      static uint8_t last_dlc = 0;
	      static uint8_t first_time = 1;

	      // Sao lưu dữ liệu hiện tại để tránh bị ghi đè
	      uint32_t curr_id = RxHeader.StdId;
 8002aa0:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <main+0x1c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	      uint8_t curr_dlc = RxHeader.DLC;
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <main+0x1c4>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	      uint8_t curr_data[8];
	      memcpy(curr_data, rxData, curr_dlc);
 8002aae:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002ab2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ab6:	493d      	ldr	r1, [pc, #244]	@ (8002bac <main+0x1c8>)
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f009 fe98 	bl	800c7ee <memcpy>

	      if ((curr_id == 0x013 || curr_id == 0x020) &&
 8002abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac0:	2b13      	cmp	r3, #19
 8002ac2:	d002      	beq.n	8002aca <main+0xe6>
 8002ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d12d      	bne.n	8002b26 <main+0x142>
	          (first_time ||
 8002aca:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <main+0x1cc>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
	      if ((curr_id == 0x013 || curr_id == 0x020) &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d115      	bne.n	8002afe <main+0x11a>
	           curr_id != last_id ||
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <main+0x1d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
	          (first_time ||
 8002ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d110      	bne.n	8002afe <main+0x11a>
	           curr_dlc != last_dlc ||
 8002adc:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <main+0x1d4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
	           curr_id != last_id ||
 8002ae0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d10a      	bne.n	8002afe <main+0x11a>
	           memcmp(curr_data, last_data, curr_dlc) != 0)) {
 8002ae8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002af0:	4932      	ldr	r1, [pc, #200]	@ (8002bbc <main+0x1d8>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f009 fddc 	bl	800c6b0 <memcmp>
 8002af8:	4603      	mov	r3, r0
	           curr_dlc != last_dlc ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <main+0x142>

	          CAN_ReceiveAndPrint();
 8002afe:	f7ff fb67 	bl	80021d0 <CAN_ReceiveAndPrint>

	          // Cập nhật thông tin cho lần so sánh sau
	          last_id = curr_id;
 8002b02:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb4 <main+0x1d0>)
 8002b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b06:	6013      	str	r3, [r2, #0]
	          last_dlc = curr_dlc;
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <main+0x1d4>)
 8002b0a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002b0e:	7013      	strb	r3, [r2, #0]
	          memcpy(last_data, curr_data, curr_dlc);
 8002b10:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002b14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4828      	ldr	r0, [pc, #160]	@ (8002bbc <main+0x1d8>)
 8002b1c:	f009 fe67 	bl	800c7ee <memcpy>
	          first_time = 0;
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <main+0x1cc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
	      }
	  }
	  Send_All_SensorData_CAN();
 8002b26:	f7ff fc49 	bl	80023bc <Send_All_SensorData_CAN>
//	  checkRFIDAndControlRelay();
	  DisplaySensorData_ByTopic ();
 8002b2a:	f7ff fcf1 	bl	8002510 <DisplaySensorData_ByTopic>

	    if (HAL_GetTick() - last_tick_can_stat >= 1000) {
 8002b2e:	f002 fa59 	bl	8004fe4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <main+0x1dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b3e:	d3a7      	bcc.n	8002a90 <main+0xac>
	           char msg[64];
	           snprintf(msg, sizeof(msg), "\r\nCAN TX/s: %lu | RX/s: %lu\r\n", can_tx_count, can_rx_count);
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <main+0x1e0>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <main+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4638      	mov	r0, r7
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <main+0x1e8>)
 8002b50:	2140      	movs	r1, #64	@ 0x40
 8002b52:	f009 fc7d 	bl	800c450 <sniprintf>
	           HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002b56:	463b      	mov	r3, r7
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fb89 	bl	8000270 <strlen>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4639      	mov	r1, r7
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	4819      	ldr	r0, [pc, #100]	@ (8002bd0 <main+0x1ec>)
 8002b6a:	f007 ff33 	bl	800a9d4 <HAL_UART_Transmit>

	           can_tx_count = 0;
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <main+0x1e0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
	           can_rx_count = 0;
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <main+0x1e4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
	           last_tick_can_stat = HAL_GetTick();
 8002b7a:	f002 fa33 	bl	8004fe4 <HAL_GetTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc0 <main+0x1dc>)
 8002b82:	6013      	str	r3, [r2, #0]
	  if (can_rx_flag) {
 8002b84:	e784      	b.n	8002a90 <main+0xac>
 8002b86:	bf00      	nop
 8002b88:	20000330 	.word	0x20000330
 8002b8c:	20000740 	.word	0x20000740
 8002b90:	20000378 	.word	0x20000378
 8002b94:	200003a0 	.word	0x200003a0
 8002b98:	20000704 	.word	0x20000704
 8002b9c:	42480000 	.word	0x42480000
 8002ba0:	200005e4 	.word	0x200005e4
 8002ba4:	20000798 	.word	0x20000798
 8002ba8:	20000774 	.word	0x20000774
 8002bac:	20000790 	.word	0x20000790
 8002bb0:	20000010 	.word	0x20000010
 8002bb4:	20000014 	.word	0x20000014
 8002bb8:	2000175c 	.word	0x2000175c
 8002bbc:	20001760 	.word	0x20001760
 8002bc0:	200007a8 	.word	0x200007a8
 8002bc4:	200007a0 	.word	0x200007a0
 8002bc8:	200007a4 	.word	0x200007a4
 8002bcc:	0800f700 	.word	0x0800f700
 8002bd0:	200006bc 	.word	0x200006bc

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b094      	sub	sp, #80	@ 0x50
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2230      	movs	r2, #48	@ 0x30
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f009 fd74 	bl	800c6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <SystemClock_Config+0xcc>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <SystemClock_Config+0xcc>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <SystemClock_Config+0xcc>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <SystemClock_Config+0xd0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ca4 <SystemClock_Config+0xd0>)
 8002c1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <SystemClock_Config+0xd0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c44:	2304      	movs	r3, #4
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c48:	23a8      	movs	r3, #168	@ 0xa8
 8002c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c50:	2304      	movs	r3, #4
 8002c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 fa53 	bl	8008104 <HAL_RCC_OscConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c64:	f000 fd9c 	bl	80037a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c68:	230f      	movs	r3, #15
 8002c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c7a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2105      	movs	r1, #5
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 fcb4 	bl	80085f4 <HAL_RCC_ClockConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c92:	f000 fd85 	bl	80037a0 <Error_Handler>
  }
}
 8002c96:	bf00      	nop
 8002c98:	3750      	adds	r7, #80	@ 0x50
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000

08002ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cae:	463b      	mov	r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cba:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cbc:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <MX_ADC1_Init+0x9c>)
 8002cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cce:	2204      	movs	r2, #4
 8002cd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002ce8:	4a17      	ldr	r2, [pc, #92]	@ (8002d48 <MX_ADC1_Init+0xa0>)
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d06:	480e      	ldr	r0, [pc, #56]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002d08:	f002 f99c 	bl	8005044 <HAL_ADC_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d12:	f000 fd45 	bl	80037a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d22:	463b      	mov	r3, r7
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	@ (8002d40 <MX_ADC1_Init+0x98>)
 8002d28:	f002 fc1c 	bl	8005564 <HAL_ADC_ConfigChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002d32:	f000 fd35 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000330 	.word	0x20000330
 8002d44:	40012000 	.word	0x40012000
 8002d48:	0f000001 	.word	0x0f000001

08002d4c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d52:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <MX_CAN1_Init+0xa4>)
 8002d54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002d56:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d58:	2203      	movs	r2, #3
 8002d5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d62:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002d68:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d6a:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8002d6e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002d76:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002d9a:	4814      	ldr	r0, [pc, #80]	@ (8002dec <MX_CAN1_Init+0xa0>)
 8002d9c:	f002 fe0a 	bl	80059b4 <HAL_CAN_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002da6:	f000 fcfb 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 14;  // hoặc bank khác chưa dùng
 8002db0:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002db2:	220e      	movs	r2, #14
 8002db4:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterIdHigh = 0x0000;       // 0x100 << 5 = 0x0800
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;            // Không cần dùng
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;   // 0x7FF << 5 = 0xFFE0
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002dd4:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	61da      	str	r2, [r3, #28]
	canfilterconfig.SlaveStartFilterBank =0;
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <MX_CAN1_Init+0xa8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END CAN1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000378 	.word	0x20000378
 8002df0:	40006400 	.word	0x40006400
 8002df4:	20000704 	.word	0x20000704

08002df8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002dfe:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <MX_CAN2_Init+0x64>)
 8002e00:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e04:	2210      	movs	r2, #16
 8002e06:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002e26:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <MX_CAN2_Init+0x60>)
 8002e46:	f002 fdb5 	bl	80059b4 <HAL_CAN_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8002e50:	f000 fca6 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200003a0 	.word	0x200003a0
 8002e5c:	40006800 	.word	0x40006800

08002e60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_CRC_Init+0x20>)
 8002e66:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <MX_CRC_Init+0x24>)
 8002e68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_CRC_Init+0x20>)
 8002e6c:	f003 fd41 	bl	80068f2 <HAL_CRC_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002e76:	f000 fc93 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003c8 	.word	0x200003c8
 8002e84:	40023000 	.word	0x40023000

08002e88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <MX_I2C3_Init+0x54>)
 8002e90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002e92:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002e94:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <MX_I2C3_Init+0x58>)
 8002e96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002eaa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ec4:	4804      	ldr	r0, [pc, #16]	@ (8002ed8 <MX_I2C3_Init+0x50>)
 8002ec6:	f003 ff79 	bl	8006dbc <HAL_I2C_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ed0:	f000 fc66 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200003d0 	.word	0x200003d0
 8002edc:	40005c00 	.word	0x40005c00
 8002ee0:	000186a0 	.word	0x000186a0

08002ee4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ee8:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002eea:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <MX_SPI2_Init+0x68>)
 8002eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002ef0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f02:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002f16:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f18:	2238      	movs	r2, #56	@ 0x38
 8002f1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f28:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f30:	220a      	movs	r2, #10
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <MX_SPI2_Init+0x64>)
 8002f36:	f005 fd7d 	bl	8008a34 <HAL_SPI_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f40:	f000 fc2e 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000424 	.word	0x20000424
 8002f4c:	40003800 	.word	0x40003800

08002f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09a      	sub	sp, #104	@ 0x68
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
 8002f8c:	615a      	str	r2, [r3, #20]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2220      	movs	r2, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f009 fb9a 	bl	800c6d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80030d4 <MX_TIM1_Init+0x184>)
 8002fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fa4:	2253      	movs	r2, #83	@ 0x53
 8002fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa8:	4b49      	ldr	r3, [pc, #292]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8002fae:	4b48      	ldr	r3, [pc, #288]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fb0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb6:	4b46      	ldr	r3, [pc, #280]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fbc:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc2:	4b43      	ldr	r3, [pc, #268]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fc8:	4841      	ldr	r0, [pc, #260]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fca:	f006 f841 	bl	8009050 <HAL_TIM_Base_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002fd4:	f000 fbe4 	bl	80037a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fde:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	483a      	ldr	r0, [pc, #232]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002fe6:	f006 fe59 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002ff0:	f000 fbd6 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002ff4:	4836      	ldr	r0, [pc, #216]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8002ff6:	f006 f9d4 	bl	80093a2 <HAL_TIM_IC_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003000:	f000 fbce 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003004:	4832      	ldr	r0, [pc, #200]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8003006:	f006 f973 	bl	80092f0 <HAL_TIM_PWM_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003010:	f000 fbc6 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003014:	2300      	movs	r3, #0
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800301c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003020:	4619      	mov	r1, r3
 8003022:	482b      	ldr	r0, [pc, #172]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8003024:	f007 fba4 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800302e:	f000 fbb7 	bl	80037a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003032:	2300      	movs	r3, #0
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003036:	2301      	movs	r3, #1
 8003038:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800303a:	2300      	movs	r3, #0
 800303c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigIC.ICFilter = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003042:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003046:	2200      	movs	r2, #0
 8003048:	4619      	mov	r1, r3
 800304a:	4821      	ldr	r0, [pc, #132]	@ (80030d0 <MX_TIM1_Init+0x180>)
 800304c:	f006 fcc8 	bl	80099e0 <HAL_TIM_IC_ConfigChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8003056:	f000 fba3 	bl	80037a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305a:	2360      	movs	r3, #96	@ 0x60
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003062:	2300      	movs	r3, #0
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003066:	2300      	movs	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307a:	2204      	movs	r2, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4814      	ldr	r0, [pc, #80]	@ (80030d0 <MX_TIM1_Init+0x180>)
 8003080:	f006 fd4a 	bl	8009b18 <HAL_TIM_PWM_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800308a:	f000 fb89 	bl	80037a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <MX_TIM1_Init+0x180>)
 80030b2:	f007 fbd9 	bl	800a868 <HAL_TIMEx_ConfigBreakDeadTime>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80030bc:	f000 fb70 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030c0:	4803      	ldr	r0, [pc, #12]	@ (80030d0 <MX_TIM1_Init+0x180>)
 80030c2:	f001 f90f 	bl	80042e4 <HAL_TIM_MspPostInit>

}
 80030c6:	bf00      	nop
 80030c8:	3768      	adds	r7, #104	@ 0x68
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000047c 	.word	0x2000047c
 80030d4:	40010000 	.word	0x40010000

080030d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030f6:	463b      	mov	r3, r7
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003102:	4b2c      	ldr	r3, [pc, #176]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003104:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800310a:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 800310c:	2253      	movs	r2, #83	@ 0x53
 800310e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8003116:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003118:	f06f 0201 	mvn.w	r2, #1
 800311c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311e:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b23      	ldr	r3, [pc, #140]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800312a:	4822      	ldr	r0, [pc, #136]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 800312c:	f005 ff90 	bl	8009050 <HAL_TIM_Base_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003136:	f000 fb33 	bl	80037a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800313e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003140:	f107 0318 	add.w	r3, r7, #24
 8003144:	4619      	mov	r1, r3
 8003146:	481b      	ldr	r0, [pc, #108]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003148:	f006 fda8 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003152:	f000 fb25 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003156:	4817      	ldr	r0, [pc, #92]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003158:	f006 f923 	bl	80093a2 <HAL_TIM_IC_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003162:	f000 fb1d 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4619      	mov	r1, r3
 8003174:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 8003176:	f007 fafb 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003180:	f000 fb0e 	bl	80037a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003184:	2302      	movs	r3, #2
 8003186:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003188:	2301      	movs	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	4619      	mov	r1, r3
 800319a:	4806      	ldr	r0, [pc, #24]	@ (80031b4 <MX_TIM2_Init+0xdc>)
 800319c:	f006 fc20 	bl	80099e0 <HAL_TIM_IC_ConfigChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80031a6:	f000 fafb 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004c4 	.word	0x200004c4

080031b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031be:	f107 0318 	add.w	r3, r7, #24
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031d6:	463b      	mov	r3, r7
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <MX_TIM3_Init+0xd8>)
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <MX_TIM3_Init+0xdc>)
 80031e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80031e8:	4b29      	ldr	r3, [pc, #164]	@ (8003290 <MX_TIM3_Init+0xd8>)
 80031ea:	2253      	movs	r2, #83	@ 0x53
 80031ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <MX_TIM3_Init+0xd8>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80031f4:	4b26      	ldr	r3, [pc, #152]	@ (8003290 <MX_TIM3_Init+0xd8>)
 80031f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80031fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fc:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <MX_TIM3_Init+0xd8>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <MX_TIM3_Init+0xd8>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003208:	4821      	ldr	r0, [pc, #132]	@ (8003290 <MX_TIM3_Init+0xd8>)
 800320a:	f005 ff21 	bl	8009050 <HAL_TIM_Base_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003214:	f000 fac4 	bl	80037a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800321c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	4619      	mov	r1, r3
 8003224:	481a      	ldr	r0, [pc, #104]	@ (8003290 <MX_TIM3_Init+0xd8>)
 8003226:	f006 fd39 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003230:	f000 fab6 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003234:	4816      	ldr	r0, [pc, #88]	@ (8003290 <MX_TIM3_Init+0xd8>)
 8003236:	f006 f8b4 	bl	80093a2 <HAL_TIM_IC_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003240:	f000 faae 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	4619      	mov	r1, r3
 8003252:	480f      	ldr	r0, [pc, #60]	@ (8003290 <MX_TIM3_Init+0xd8>)
 8003254:	f007 fa8c 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800325e:	f000 fa9f 	bl	80037a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003266:	2301      	movs	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003272:	463b      	mov	r3, r7
 8003274:	2200      	movs	r2, #0
 8003276:	4619      	mov	r1, r3
 8003278:	4805      	ldr	r0, [pc, #20]	@ (8003290 <MX_TIM3_Init+0xd8>)
 800327a:	f006 fbb1 	bl	80099e0 <HAL_TIM_IC_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003284:	f000 fa8c 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	@ 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000050c 	.word	0x2000050c
 8003294:	40000400 	.word	0x40000400

08003298 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800329e:	f107 0318 	add.w	r3, r7, #24
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032b6:	463b      	mov	r3, r7
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003374 <MX_TIM4_Init+0xdc>)
 80032c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80032c8:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032ca:	2253      	movs	r2, #83	@ 0x53
 80032cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 80032d4:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80032da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032dc:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e2:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032e8:	4821      	ldr	r0, [pc, #132]	@ (8003370 <MX_TIM4_Init+0xd8>)
 80032ea:	f005 feb1 	bl	8009050 <HAL_TIM_Base_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80032f4:	f000 fa54 	bl	80037a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032fe:	f107 0318 	add.w	r3, r7, #24
 8003302:	4619      	mov	r1, r3
 8003304:	481a      	ldr	r0, [pc, #104]	@ (8003370 <MX_TIM4_Init+0xd8>)
 8003306:	f006 fcc9 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003310:	f000 fa46 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003314:	4816      	ldr	r0, [pc, #88]	@ (8003370 <MX_TIM4_Init+0xd8>)
 8003316:	f006 f844 	bl	80093a2 <HAL_TIM_IC_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003320:	f000 fa3e 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	4619      	mov	r1, r3
 8003332:	480f      	ldr	r0, [pc, #60]	@ (8003370 <MX_TIM4_Init+0xd8>)
 8003334:	f007 fa1c 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800333e:	f000 fa2f 	bl	80037a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003346:	2301      	movs	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003352:	463b      	mov	r3, r7
 8003354:	2200      	movs	r2, #0
 8003356:	4619      	mov	r1, r3
 8003358:	4805      	ldr	r0, [pc, #20]	@ (8003370 <MX_TIM4_Init+0xd8>)
 800335a:	f006 fb41 	bl	80099e0 <HAL_TIM_IC_ConfigChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8003364:	f000 fa1c 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003368:	bf00      	nop
 800336a:	3728      	adds	r7, #40	@ 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000554 	.word	0x20000554
 8003374:	40000800 	.word	0x40000800

08003378 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337e:	463b      	mov	r3, r7
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <MX_TIM6_Init+0x64>)
 8003388:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <MX_TIM6_Init+0x68>)
 800338a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <MX_TIM6_Init+0x64>)
 800338e:	2253      	movs	r2, #83	@ 0x53
 8003390:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003392:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <MX_TIM6_Init+0x64>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <MX_TIM6_Init+0x64>)
 800339a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800339e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <MX_TIM6_Init+0x64>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033a6:	480d      	ldr	r0, [pc, #52]	@ (80033dc <MX_TIM6_Init+0x64>)
 80033a8:	f005 fe52 	bl	8009050 <HAL_TIM_Base_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80033b2:	f000 f9f5 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033be:	463b      	mov	r3, r7
 80033c0:	4619      	mov	r1, r3
 80033c2:	4806      	ldr	r0, [pc, #24]	@ (80033dc <MX_TIM6_Init+0x64>)
 80033c4:	f007 f9d4 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80033ce:	f000 f9e7 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000059c 	.word	0x2000059c
 80033e0:	40001000 	.word	0x40001000

080033e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ea:	463b      	mov	r3, r7
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <MX_TIM7_Init+0x64>)
 80033f4:	4a15      	ldr	r2, [pc, #84]	@ (800344c <MX_TIM7_Init+0x68>)
 80033f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <MX_TIM7_Init+0x64>)
 80033fa:	2253      	movs	r2, #83	@ 0x53
 80033fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <MX_TIM7_Init+0x64>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <MX_TIM7_Init+0x64>)
 8003406:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800340a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <MX_TIM7_Init+0x64>)
 800340e:	2280      	movs	r2, #128	@ 0x80
 8003410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003412:	480d      	ldr	r0, [pc, #52]	@ (8003448 <MX_TIM7_Init+0x64>)
 8003414:	f005 fe1c 	bl	8009050 <HAL_TIM_Base_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800341e:	f000 f9bf 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800342a:	463b      	mov	r3, r7
 800342c:	4619      	mov	r1, r3
 800342e:	4806      	ldr	r0, [pc, #24]	@ (8003448 <MX_TIM7_Init+0x64>)
 8003430:	f007 f99e 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800343a:	f000 f9b1 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200005e4 	.word	0x200005e4
 800344c:	40001400 	.word	0x40001400

08003450 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003456:	f107 0318 	add.w	r3, r7, #24
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800346e:	463b      	mov	r3, r7
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800347a:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <MX_TIM8_Init+0xe0>)
 800347c:	4a2d      	ldr	r2, [pc, #180]	@ (8003534 <MX_TIM8_Init+0xe4>)
 800347e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 84-1;
 8003480:	4b2b      	ldr	r3, [pc, #172]	@ (8003530 <MX_TIM8_Init+0xe0>)
 8003482:	2253      	movs	r2, #83	@ 0x53
 8003484:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	4b2a      	ldr	r3, [pc, #168]	@ (8003530 <MX_TIM8_Init+0xe0>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0xffff-1;
 800348c:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <MX_TIM8_Init+0xe0>)
 800348e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003492:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <MX_TIM8_Init+0xe0>)
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800349a:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <MX_TIM8_Init+0xe0>)
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <MX_TIM8_Init+0xe0>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80034a6:	4822      	ldr	r0, [pc, #136]	@ (8003530 <MX_TIM8_Init+0xe0>)
 80034a8:	f005 fdd2 	bl	8009050 <HAL_TIM_Base_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80034b2:	f000 f975 	bl	80037a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034bc:	f107 0318 	add.w	r3, r7, #24
 80034c0:	4619      	mov	r1, r3
 80034c2:	481b      	ldr	r0, [pc, #108]	@ (8003530 <MX_TIM8_Init+0xe0>)
 80034c4:	f006 fbea 	bl	8009c9c <HAL_TIM_ConfigClockSource>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80034ce:	f000 f967 	bl	80037a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80034d2:	4817      	ldr	r0, [pc, #92]	@ (8003530 <MX_TIM8_Init+0xe0>)
 80034d4:	f005 ff65 	bl	80093a2 <HAL_TIM_IC_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80034de:	f000 f95f 	bl	80037a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	4619      	mov	r1, r3
 80034f0:	480f      	ldr	r0, [pc, #60]	@ (8003530 <MX_TIM8_Init+0xe0>)
 80034f2:	f007 f93d 	bl	800a770 <HAL_TIMEx_MasterConfigSynchronization>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80034fc:	f000 f950 	bl	80037a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003500:	2300      	movs	r3, #0
 8003502:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003504:	2301      	movs	r3, #1
 8003506:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003510:	463b      	mov	r3, r7
 8003512:	2200      	movs	r2, #0
 8003514:	4619      	mov	r1, r3
 8003516:	4806      	ldr	r0, [pc, #24]	@ (8003530 <MX_TIM8_Init+0xe0>)
 8003518:	f006 fa62 	bl	80099e0 <HAL_TIM_IC_ConfigChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003522:	f000 f93d 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003526:	bf00      	nop
 8003528:	3728      	adds	r7, #40	@ 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000062c 	.word	0x2000062c
 8003534:	40010400 	.word	0x40010400

08003538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 800353e:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <MX_USART1_UART_Init+0x50>)
 8003540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 8003544:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800354a:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800355c:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 800355e:	220c      	movs	r2, #12
 8003560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800356e:	4805      	ldr	r0, [pc, #20]	@ (8003584 <MX_USART1_UART_Init+0x4c>)
 8003570:	f007 f9e0 	bl	800a934 <HAL_UART_Init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800357a:	f000 f911 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000674 	.word	0x20000674
 8003588:	40011000 	.word	0x40011000

0800358c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 8003592:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <MX_USART2_UART_Init+0x50>)
 8003594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 8003598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800359c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800359e:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035aa:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035b2:	220c      	movs	r2, #12
 80035b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b6:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035c2:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <MX_USART2_UART_Init+0x4c>)
 80035c4:	f007 f9b6 	bl	800a934 <HAL_UART_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035ce:	f000 f8e7 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200006bc 	.word	0x200006bc
 80035dc:	40004400 	.word	0x40004400

080035e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08c      	sub	sp, #48	@ 0x30
 80035e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	4b63      	ldr	r3, [pc, #396]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a62      	ldr	r2, [pc, #392]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b60      	ldr	r3, [pc, #384]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	4b5c      	ldr	r3, [pc, #368]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a5b      	ldr	r2, [pc, #364]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b59      	ldr	r3, [pc, #356]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	4b55      	ldr	r3, [pc, #340]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a54      	ldr	r2, [pc, #336]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b52      	ldr	r3, [pc, #328]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	4a4d      	ldr	r2, [pc, #308]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	6313      	str	r3, [r2, #48]	@ 0x30
 800365a:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	4a46      	ldr	r2, [pc, #280]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	6313      	str	r3, [r2, #48]	@ 0x30
 8003676:	4b44      	ldr	r3, [pc, #272]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	4b40      	ldr	r3, [pc, #256]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	4a3f      	ldr	r2, [pc, #252]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 800368c:	f043 0308 	orr.w	r3, r3, #8
 8003690:	6313      	str	r3, [r2, #48]	@ 0x30
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <MX_GPIO_Init+0x1a8>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
 80036a0:	2150      	movs	r1, #80	@ 0x50
 80036a2:	483a      	ldr	r0, [pc, #232]	@ (800378c <MX_GPIO_Init+0x1ac>)
 80036a4:	f003 fb70 	bl	8006d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2101      	movs	r1, #1
 80036ac:	4838      	ldr	r0, [pc, #224]	@ (8003790 <MX_GPIO_Init+0x1b0>)
 80036ae:	f003 fb6b 	bl	8006d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036b8:	4836      	ldr	r0, [pc, #216]	@ (8003794 <MX_GPIO_Init+0x1b4>)
 80036ba:	f003 fb65 	bl	8006d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80036c4:	4834      	ldr	r0, [pc, #208]	@ (8003798 <MX_GPIO_Init+0x1b8>)
 80036c6:	f003 fb5f 	bl	8006d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	4833      	ldr	r0, [pc, #204]	@ (800379c <MX_GPIO_Init+0x1bc>)
 80036d0:	f003 fb5a 	bl	8006d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036d4:	2302      	movs	r3, #2
 80036d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	4828      	ldr	r0, [pc, #160]	@ (800378c <MX_GPIO_Init+0x1ac>)
 80036ea:	f003 f9b1 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80036ee:	2350      	movs	r3, #80	@ 0x50
 80036f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f2:	2301      	movs	r3, #1
 80036f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f6:	2302      	movs	r3, #2
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	4821      	ldr	r0, [pc, #132]	@ (800378c <MX_GPIO_Init+0x1ac>)
 8003706:	f003 f9a3 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370e:	2301      	movs	r3, #1
 8003710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371a:	f107 031c 	add.w	r3, r7, #28
 800371e:	4619      	mov	r1, r3
 8003720:	481b      	ldr	r0, [pc, #108]	@ (8003790 <MX_GPIO_Init+0x1b0>)
 8003722:	f003 f995 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800372a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372c:	2301      	movs	r3, #1
 800372e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003730:	2302      	movs	r3, #2
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	4619      	mov	r1, r3
 800373e:	4815      	ldr	r0, [pc, #84]	@ (8003794 <MX_GPIO_Init+0x1b4>)
 8003740:	f003 f986 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8003744:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8003748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	2301      	movs	r3, #1
 800374c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800374e:	2302      	movs	r3, #2
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	4619      	mov	r1, r3
 800375c:	480e      	ldr	r0, [pc, #56]	@ (8003798 <MX_GPIO_Init+0x1b8>)
 800375e:	f003 f977 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	4808      	ldr	r0, [pc, #32]	@ (800379c <MX_GPIO_Init+0x1bc>)
 800377a:	f003 f969 	bl	8006a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800377e:	bf00      	nop
 8003780:	3730      	adds	r7, #48	@ 0x30
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40020000 	.word	0x40020000
 8003790:	40020400 	.word	0x40020400
 8003794:	40021000 	.word	0x40021000
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40020800 	.word	0x40020800

080037a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a4:	b672      	cpsid	i
}
 80037a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <Error_Handler+0x8>

080037ac <printUserName>:
	    }
}


void printUserName(uint8_t *uid)
{
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ae:	b099      	sub	sp, #100	@ 0x64
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	6078      	str	r0, [r7, #4]
	   // Không có thẻ
	    if (uid == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <printUserName+0x32>
	    {
	        if (uidcheck)
 80037ba:	4b56      	ldr	r3, [pc, #344]	@ (8003914 <printUserName+0x168>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a2 	beq.w	8003908 <printUserName+0x15c>
	        {
	            HAL_UART_Transmit(&huart2, (uint8_t*)"Please charge your ID CARD \r\n", 31, HAL_MAX_DELAY);
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295
 80037c8:	221f      	movs	r2, #31
 80037ca:	4953      	ldr	r1, [pc, #332]	@ (8003918 <printUserName+0x16c>)
 80037cc:	4853      	ldr	r0, [pc, #332]	@ (800391c <printUserName+0x170>)
 80037ce:	f007 f901 	bl	800a9d4 <HAL_UART_Transmit>
	            memset(lastUID, 0, UID_LEN); //Gán toàn bộ giá trị trong mảng lastUID về 0 (zero)
 80037d2:	2205      	movs	r2, #5
 80037d4:	2100      	movs	r1, #0
 80037d6:	4852      	ldr	r0, [pc, #328]	@ (8003920 <printUserName+0x174>)
 80037d8:	f008 ff7a 	bl	800c6d0 <memset>
	        }
	        return;
 80037dc:	e094      	b.n	8003908 <printUserName+0x15c>
	    }

	    //  Nếu là UID giống lần trước thì không in lại
	    if (uidcheck && memcmp(uid, lastUID, UID_LEN) == 0)
 80037de:	4b4d      	ldr	r3, [pc, #308]	@ (8003914 <printUserName+0x168>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <printUserName+0x4c>
 80037e6:	2205      	movs	r2, #5
 80037e8:	494d      	ldr	r1, [pc, #308]	@ (8003920 <printUserName+0x174>)
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f008 ff60 	bl	800c6b0 <memcmp>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808a 	beq.w	800390c <printUserName+0x160>
	        return;
	    if (uid!=NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <printUserName+0x162>
	    {
	    //  UID mới thì cập nhật và xử lý
	    memcpy(lastUID, uid, UID_LEN);
 8003800:	4b47      	ldr	r3, [pc, #284]	@ (8003920 <printUserName+0x174>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6810      	ldr	r0, [r2, #0]
 8003806:	6018      	str	r0, [r3, #0]
 8003808:	7912      	ldrb	r2, [r2, #4]
 800380a:	711a      	strb	r2, [r3, #4]
	    uidcheck = 1;
 800380c:	4b41      	ldr	r3, [pc, #260]	@ (8003914 <printUserName+0x168>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < userCount; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003816:	e048      	b.n	80038aa <printUserName+0xfe>
    {
        if (memcmp(uid, userList[i].uid, UID_LEN) == 0)
 8003818:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	4a3f      	ldr	r2, [pc, #252]	@ (8003924 <printUserName+0x178>)
 8003826:	4413      	add	r3, r2
 8003828:	2205      	movs	r2, #5
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f008 ff3f 	bl	800c6b0 <memcmp>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d135      	bne.n	80038a4 <printUserName+0xf8>
        {
            char msg[64];
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 800383c:	461e      	mov	r6, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3301      	adds	r3, #1
 8003842:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003844:	469c      	mov	ip, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3302      	adds	r3, #2
 800384a:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 800384c:	4619      	mov	r1, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3303      	adds	r3, #3
 8003852:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003854:	461c      	mov	r4, r3
                    uid[0], uid[1], uid[2], uid[3], uid[4],
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	781b      	ldrb	r3, [r3, #0]
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 800385c:	461d      	mov	r5, r3
                    userList[i].name);
 800385e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	4a2e      	ldr	r2, [pc, #184]	@ (8003924 <printUserName+0x178>)
 800386c:	4413      	add	r3, r2
 800386e:	3305      	adds	r3, #5
            sprintf(msg, "YOUR ID: %02X %02X %02X %02X %02X - %s\r\n",
 8003870:	f107 000c 	add.w	r0, r7, #12
 8003874:	9303      	str	r3, [sp, #12]
 8003876:	9502      	str	r5, [sp, #8]
 8003878:	9401      	str	r4, [sp, #4]
 800387a:	9100      	str	r1, [sp, #0]
 800387c:	4663      	mov	r3, ip
 800387e:	4632      	mov	r2, r6
 8003880:	4929      	ldr	r1, [pc, #164]	@ (8003928 <printUserName+0x17c>)
 8003882:	f008 fe1b 	bl	800c4bc <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fcf0 	bl	8000270 <strlen>
 8003890:	4603      	mov	r3, r0
 8003892:	b29a      	uxth	r2, r3
 8003894:	f107 010c 	add.w	r1, r7, #12
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	481f      	ldr	r0, [pc, #124]	@ (800391c <printUserName+0x170>)
 800389e:	f007 f899 	bl	800a9d4 <HAL_UART_Transmit>
 80038a2:	e034      	b.n	800390e <printUserName+0x162>
    for (int i = 0; i < userCount; i++)
 80038a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a6:	3301      	adds	r3, #1
 80038a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038aa:	2206      	movs	r2, #6
 80038ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ae:	4293      	cmp	r3, r2
 80038b0:	dbb2      	blt.n	8003818 <printUserName+0x6c>
        }
    }
    // Không tìm thấy trong danh sách
    char unknown[64];
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 80038b6:	461c      	mov	r4, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 80038be:	461d      	mov	r5, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3302      	adds	r3, #2
 80038c4:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 80038c6:	461a      	mov	r2, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3303      	adds	r3, #3
 80038cc:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 80038ce:	4619      	mov	r1, r3
            uid[0], uid[1], uid[2], uid[3], uid[4]);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	781b      	ldrb	r3, [r3, #0]
    sprintf(unknown, "UID: %02X %02X %02X %02X %02X - User not valid\r\n",
 80038d6:	f107 000c 	add.w	r0, r7, #12
 80038da:	9302      	str	r3, [sp, #8]
 80038dc:	9101      	str	r1, [sp, #4]
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	462b      	mov	r3, r5
 80038e2:	4622      	mov	r2, r4
 80038e4:	4911      	ldr	r1, [pc, #68]	@ (800392c <printUserName+0x180>)
 80038e6:	f008 fde9 	bl	800c4bc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)unknown, strlen(unknown), HAL_MAX_DELAY);
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fcbe 	bl	8000270 <strlen>
 80038f4:	4603      	mov	r3, r0
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	f107 010c 	add.w	r1, r7, #12
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	4806      	ldr	r0, [pc, #24]	@ (800391c <printUserName+0x170>)
 8003902:	f007 f867 	bl	800a9d4 <HAL_UART_Transmit>
 8003906:	e002      	b.n	800390e <printUserName+0x162>
	        return;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <printUserName+0x162>
	        return;
 800390c:	bf00      	nop
}
}
 800390e:	3754      	adds	r7, #84	@ 0x54
 8003910:	46bd      	mov	sp, r7
 8003912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003914:	20001780 	.word	0x20001780
 8003918:	0800f7b0 	.word	0x0800f7b0
 800391c:	200006bc 	.word	0x200006bc
 8003920:	20001770 	.word	0x20001770
 8003924:	20000018 	.word	0x20000018
 8003928:	0800f7d0 	.word	0x0800f7d0
 800392c:	0800f7fc 	.word	0x0800f7fc

08003930 <isAuthorizedUID>:


bool isAuthorizedUID(uint8_t *uid)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < userCount; i++)
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e014      	b.n	8003968 <isAuthorizedUID+0x38>
    {
        if (memcmp(uid, userList[i].uid, 5) == 0)
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <isAuthorizedUID+0x4c>)
 800394c:	4413      	add	r3, r2
 800394e:	2205      	movs	r2, #5
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f008 feac 	bl	800c6b0 <memcmp>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <isAuthorizedUID+0x32>
            return true;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <isAuthorizedUID+0x42>
    for (int i = 0; i < userCount; i++)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	2206      	movs	r2, #6
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4293      	cmp	r3, r2
 800396e:	dbe6      	blt.n	800393e <isAuthorizedUID+0xe>
    }
    return false;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000018 	.word	0x20000018

08003980 <checkRFIDAndControlRelay>:


void checkRFIDAndControlRelay(void)
{
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b094      	sub	sp, #80	@ 0x50
 8003984:	af04      	add	r7, sp, #16
    status = MFRC522_Request(PICC_REQIDL, str);
 8003986:	4959      	ldr	r1, [pc, #356]	@ (8003aec <checkRFIDAndControlRelay+0x16c>)
 8003988:	2026      	movs	r0, #38	@ 0x26
 800398a:	f7fe fba0 	bl	80020ce <MFRC522_Request>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <checkRFIDAndControlRelay+0x170>)
 8003994:	701a      	strb	r2, [r3, #0]

    if (status == MI_OK && MFRC522_Anticoll(str) == MI_OK)
 8003996:	4b56      	ldr	r3, [pc, #344]	@ (8003af0 <checkRFIDAndControlRelay+0x170>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d175      	bne.n	8003a8a <checkRFIDAndControlRelay+0x10a>
 800399e:	4853      	ldr	r0, [pc, #332]	@ (8003aec <checkRFIDAndControlRelay+0x16c>)
 80039a0:	f7fe fbba 	bl	8002118 <MFRC522_Anticoll>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d16f      	bne.n	8003a8a <checkRFIDAndControlRelay+0x10a>
    {
        memcpy(currentUID, str, UID_LEN);
 80039aa:	4b52      	ldr	r3, [pc, #328]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039ac:	4a4f      	ldr	r2, [pc, #316]	@ (8003aec <checkRFIDAndControlRelay+0x16c>)
 80039ae:	6810      	ldr	r0, [r2, #0]
 80039b0:	6018      	str	r0, [r3, #0]
 80039b2:	7912      	ldrb	r2, [r2, #4]
 80039b4:	711a      	strb	r2, [r3, #4]
        rfidDetected = 1;
 80039b6:	4b50      	ldr	r3, [pc, #320]	@ (8003af8 <checkRFIDAndControlRelay+0x178>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
        rfidLostCounter = 0;
 80039bc:	4b4f      	ldr	r3, [pc, #316]	@ (8003afc <checkRFIDAndControlRelay+0x17c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

        // UART Debug
        char dbg[64];
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
                currentUID[0], currentUID[1], currentUID[2],
 80039c2:	4b4c      	ldr	r3, [pc, #304]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 80039c6:	461c      	mov	r4, r3
                currentUID[0], currentUID[1], currentUID[2],
 80039c8:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039ca:	785b      	ldrb	r3, [r3, #1]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 80039cc:	461d      	mov	r5, r3
                currentUID[0], currentUID[1], currentUID[2],
 80039ce:	4b49      	ldr	r3, [pc, #292]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039d0:	789b      	ldrb	r3, [r3, #2]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 80039d2:	461a      	mov	r2, r3
                currentUID[3], currentUID[4]);
 80039d4:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039d6:	78db      	ldrb	r3, [r3, #3]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 80039d8:	4619      	mov	r1, r3
                currentUID[3], currentUID[4]);
 80039da:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 80039dc:	791b      	ldrb	r3, [r3, #4]
        sprintf(dbg, "[RFID] UID: %02X %02X %02X %02X %02X\r\n",
 80039de:	4638      	mov	r0, r7
 80039e0:	9302      	str	r3, [sp, #8]
 80039e2:	9101      	str	r1, [sp, #4]
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	462b      	mov	r3, r5
 80039e8:	4622      	mov	r2, r4
 80039ea:	4945      	ldr	r1, [pc, #276]	@ (8003b00 <checkRFIDAndControlRelay+0x180>)
 80039ec:	f008 fd66 	bl	800c4bc <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)dbg, strlen(dbg), HAL_MAX_DELAY);
 80039f0:	463b      	mov	r3, r7
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fc3c 	bl	8000270 <strlen>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	4639      	mov	r1, r7
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	4840      	ldr	r0, [pc, #256]	@ (8003b04 <checkRFIDAndControlRelay+0x184>)
 8003a04:	f006 ffe6 	bl	800a9d4 <HAL_UART_Transmit>

//        // ✅ Chỉ gửi CAN nếu là UID mới
        if (!uidcheck || memcmp(currentUID, lastUID, UID_LEN) != 0)
 8003a08:	4b3f      	ldr	r3, [pc, #252]	@ (8003b08 <checkRFIDAndControlRelay+0x188>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <checkRFIDAndControlRelay+0xa0>
 8003a10:	2205      	movs	r2, #5
 8003a12:	493e      	ldr	r1, [pc, #248]	@ (8003b0c <checkRFIDAndControlRelay+0x18c>)
 8003a14:	4837      	ldr	r0, [pc, #220]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 8003a16:	f008 fe4b 	bl	800c6b0 <memcmp>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <checkRFIDAndControlRelay+0xc4>
        {
            printUserName(currentUID);
 8003a20:	4834      	ldr	r0, [pc, #208]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 8003a22:	f7ff fec3 	bl	80037ac <printUserName>
            memcpy(lastUID, currentUID, UID_LEN);
 8003a26:	4b39      	ldr	r3, [pc, #228]	@ (8003b0c <checkRFIDAndControlRelay+0x18c>)
 8003a28:	4a32      	ldr	r2, [pc, #200]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 8003a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a2e:	6018      	str	r0, [r3, #0]
 8003a30:	3304      	adds	r3, #4
 8003a32:	7019      	strb	r1, [r3, #0]
            uidcheck = 1;
 8003a34:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <checkRFIDAndControlRelay+0x188>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

            // Gửi CAN
            CAN_SendTopicData(TOPIC_ID_RFID, currentUID, UID_LEN);
 8003a3a:	2205      	movs	r2, #5
 8003a3c:	492d      	ldr	r1, [pc, #180]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 8003a3e:	2010      	movs	r0, #16
 8003a40:	f7fe fc88 	bl	8002354 <CAN_SendTopicData>
        }

        // ✅ Điều khiển Relay
        if (isAuthorizedUID(currentUID))
 8003a44:	482b      	ldr	r0, [pc, #172]	@ (8003af4 <checkRFIDAndControlRelay+0x174>)
 8003a46:	f7ff ff73 	bl	8003930 <isAuthorizedUID>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00f      	beq.n	8003a70 <checkRFIDAndControlRelay+0xf0>
        {
            if (!relayOn)
 8003a50:	4b2f      	ldr	r3, [pc, #188]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d042      	beq.n	8003ae4 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2110      	movs	r1, #16
 8003a62:	482c      	ldr	r0, [pc, #176]	@ (8003b14 <checkRFIDAndControlRelay+0x194>)
 8003a64:	f003 f990 	bl	8006d88 <HAL_GPIO_WritePin>
                relayOn = true;
 8003a68:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e039      	b.n	8003ae4 <checkRFIDAndControlRelay+0x164>
            }
        }
        else
        {
            if (relayOn)
 8003a70:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d035      	beq.n	8003ae4 <checkRFIDAndControlRelay+0x164>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2110      	movs	r1, #16
 8003a7c:	4825      	ldr	r0, [pc, #148]	@ (8003b14 <checkRFIDAndControlRelay+0x194>)
 8003a7e:	f003 f983 	bl	8006d88 <HAL_GPIO_WritePin>
                relayOn = false;
 8003a82:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e02c      	b.n	8003ae4 <checkRFIDAndControlRelay+0x164>

        return;
    }

    //  Không đọc được thẻ
    rfidLostCounter++;
 8003a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003afc <checkRFIDAndControlRelay+0x17c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a1a      	ldr	r2, [pc, #104]	@ (8003afc <checkRFIDAndControlRelay+0x17c>)
 8003a92:	6013      	str	r3, [r2, #0]
//    if (rfidLostCounter >= RFID_LOST_THRESHOLD)
//    {
        // Chỉ thực hiện reset khi thực sự không còn thẻ
        if (uidcheck)
 8003a94:	4b1c      	ldr	r3, [pc, #112]	@ (8003b08 <checkRFIDAndControlRelay+0x188>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <checkRFIDAndControlRelay+0x15e>
        {
            printUserName(NULL);
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7ff fe85 	bl	80037ac <printUserName>
            uidcheck = 0;
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <checkRFIDAndControlRelay+0x188>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
            memset(lastUID, 0, UID_LEN);
 8003aa8:	2205      	movs	r2, #5
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4817      	ldr	r0, [pc, #92]	@ (8003b0c <checkRFIDAndControlRelay+0x18c>)
 8003aae:	f008 fe0f 	bl	800c6d0 <memset>
            rfidDetected = 0;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <checkRFIDAndControlRelay+0x178>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

            HAL_UART_Transmit(&huart2,
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	2222      	movs	r2, #34	@ 0x22
 8003abe:	4916      	ldr	r1, [pc, #88]	@ (8003b18 <checkRFIDAndControlRelay+0x198>)
 8003ac0:	4810      	ldr	r0, [pc, #64]	@ (8003b04 <checkRFIDAndControlRelay+0x184>)
 8003ac2:	f006 ff87 	bl	800a9d4 <HAL_UART_Transmit>
                              (uint8_t*)"[RFID] Không phát hiện thẻ\r\n",
                              strlen("[RFID] Không phát hiện thẻ\r\n"),
                              HAL_MAX_DELAY);

            if (relayOn)
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <checkRFIDAndControlRelay+0x15e>
            {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	4810      	ldr	r0, [pc, #64]	@ (8003b14 <checkRFIDAndControlRelay+0x194>)
 8003ad4:	f003 f958 	bl	8006d88 <HAL_GPIO_WritePin>
                relayOn = false;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <checkRFIDAndControlRelay+0x190>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
            }
        }

        rfidLostCounter = 0;
 8003ade:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <checkRFIDAndControlRelay+0x17c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    }
 8003ae4:	3740      	adds	r7, #64	@ 0x40
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000730 	.word	0x20000730
 8003af0:	2000072c 	.word	0x2000072c
 8003af4:	20001768 	.word	0x20001768
 8003af8:	2000177c 	.word	0x2000177c
 8003afc:	20001778 	.word	0x20001778
 8003b00:	0800f830 	.word	0x0800f830
 8003b04:	200006bc 	.word	0x200006bc
 8003b08:	20001780 	.word	0x20001780
 8003b0c:	20001770 	.word	0x20001770
 8003b10:	20001775 	.word	0x20001775
 8003b14:	40020000 	.word	0x40020000
 8003b18:	0800f858 	.word	0x0800f858

08003b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	4a12      	ldr	r2, [pc, #72]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	4a0b      	ldr	r2, [pc, #44]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_MspInit+0x58>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	2005      	movs	r0, #5
 8003b60:	f002 fe91 	bl	8006886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003b64:	2005      	movs	r0, #5
 8003b66:	f002 feaa 	bl	80068be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_ADC_MspInit+0x8c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d12f      	bne.n	8003bfa <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003baa:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	4a12      	ldr	r2, [pc, #72]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc6:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <HAL_ADC_MspInit+0x90>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	4809      	ldr	r0, [pc, #36]	@ (8003c0c <HAL_ADC_MspInit+0x94>)
 8003be6:	f002 ff33 	bl	8006a50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2012      	movs	r0, #18
 8003bf0:	f002 fe49 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003bf4:	2012      	movs	r0, #18
 8003bf6:	f002 fe62 	bl	80068be <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3728      	adds	r7, #40	@ 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40012000 	.word	0x40012000
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40020000 	.word	0x40020000

08003c10 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	@ 0x30
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a56      	ldr	r2, [pc, #344]	@ (8003d88 <HAL_CAN_MspInit+0x178>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d15d      	bne.n	8003cee <HAL_CAN_MspInit+0xde>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003c32:	4b56      	ldr	r3, [pc, #344]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a54      	ldr	r2, [pc, #336]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003c3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10d      	bne.n	8003c60 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	4b51      	ldr	r3, [pc, #324]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	4a50      	ldr	r2, [pc, #320]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c54:	4b4e      	ldr	r3, [pc, #312]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	4b4a      	ldr	r3, [pc, #296]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	4a49      	ldr	r2, [pc, #292]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c70:	4b47      	ldr	r3, [pc, #284]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c84:	2301      	movs	r3, #1
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c8c:	2309      	movs	r3, #9
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c90:	f107 031c 	add.w	r3, r7, #28
 8003c94:	4619      	mov	r1, r3
 8003c96:	483f      	ldr	r0, [pc, #252]	@ (8003d94 <HAL_CAN_MspInit+0x184>)
 8003c98:	f002 feda 	bl	8006a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003cac:	2309      	movs	r3, #9
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cb0:	f107 031c 	add.w	r3, r7, #28
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4837      	ldr	r0, [pc, #220]	@ (8003d94 <HAL_CAN_MspInit+0x184>)
 8003cb8:	f002 feca 	bl	8006a50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	2013      	movs	r0, #19
 8003cc2:	f002 fde0 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003cc6:	2013      	movs	r0, #19
 8003cc8:	f002 fdf9 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2100      	movs	r1, #0
 8003cd0:	2014      	movs	r0, #20
 8003cd2:	f002 fdd8 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003cd6:	2014      	movs	r0, #20
 8003cd8:	f002 fdf1 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2015      	movs	r0, #21
 8003ce2:	f002 fdd0 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003ce6:	2015      	movs	r0, #21
 8003ce8:	f002 fde9 	bl	80068be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003cec:	e048      	b.n	8003d80 <HAL_CAN_MspInit+0x170>
  else if(hcan->Instance==CAN2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <HAL_CAN_MspInit+0x188>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d143      	bne.n	8003d80 <HAL_CAN_MspInit+0x170>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	4a23      	ldr	r2, [pc, #140]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d08:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003d1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d8c <HAL_CAN_MspInit+0x17c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10d      	bne.n	8003d42 <HAL_CAN_MspInit+0x132>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b16      	ldr	r3, [pc, #88]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d52:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <HAL_CAN_MspInit+0x180>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d64:	2302      	movs	r3, #2
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003d70:	2309      	movs	r3, #9
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4808      	ldr	r0, [pc, #32]	@ (8003d9c <HAL_CAN_MspInit+0x18c>)
 8003d7c:	f002 fe68 	bl	8006a50 <HAL_GPIO_Init>
}
 8003d80:	bf00      	nop
 8003d82:	3730      	adds	r7, #48	@ 0x30
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40006400 	.word	0x40006400
 8003d8c:	20001784 	.word	0x20001784
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020c00 	.word	0x40020c00
 8003d98:	40006800 	.word	0x40006800
 8003d9c:	40020400 	.word	0x40020400

08003da0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0b      	ldr	r2, [pc, #44]	@ (8003ddc <HAL_CRC_MspInit+0x3c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <HAL_CRC_MspInit+0x40>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_CRC_MspInit+0x40>)
 8003dbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_CRC_MspInit+0x40>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023000 	.word	0x40023000
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a29      	ldr	r2, [pc, #164]	@ (8003ea8 <HAL_I2C_MspInit+0xc4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d14b      	bne.n	8003e9e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	4b28      	ldr	r3, [pc, #160]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	4a27      	ldr	r2, [pc, #156]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e16:	4b25      	ldr	r3, [pc, #148]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e44:	2312      	movs	r3, #18
 8003e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e50:	2304      	movs	r3, #4
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4815      	ldr	r0, [pc, #84]	@ (8003eb0 <HAL_I2C_MspInit+0xcc>)
 8003e5c:	f002 fdf8 	bl	8006a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e66:	2312      	movs	r3, #18
 8003e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e72:	2304      	movs	r3, #4
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	f107 0314 	add.w	r3, r7, #20
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	480d      	ldr	r0, [pc, #52]	@ (8003eb4 <HAL_I2C_MspInit+0xd0>)
 8003e7e:	f002 fde7 	bl	8006a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_I2C_MspInit+0xc8>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	@ 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40005c00 	.word	0x40005c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020800 	.word	0x40020800
 8003eb4:	40020000 	.word	0x40020000

08003eb8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <HAL_SPI_MspInit+0xc0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d14a      	bne.n	8003f70 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	4a26      	ldr	r2, [pc, #152]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b20      	ldr	r3, [pc, #128]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f22:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <HAL_SPI_MspInit+0xc4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f2e:	230c      	movs	r3, #12
 8003f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f32:	2302      	movs	r3, #2
 8003f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f3e:	2305      	movs	r3, #5
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	4619      	mov	r1, r3
 8003f48:	480d      	ldr	r0, [pc, #52]	@ (8003f80 <HAL_SPI_MspInit+0xc8>)
 8003f4a:	f002 fd81 	bl	8006a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f60:	2305      	movs	r3, #5
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4806      	ldr	r0, [pc, #24]	@ (8003f84 <HAL_SPI_MspInit+0xcc>)
 8003f6c:	f002 fd70 	bl	8006a50 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003f70:	bf00      	nop
 8003f72:	3728      	adds	r7, #40	@ 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40020800 	.word	0x40020800
 8003f84:	40020400 	.word	0x40020400

08003f88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b094      	sub	sp, #80	@ 0x50
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a97      	ldr	r2, [pc, #604]	@ (8004204 <HAL_TIM_Base_MspInit+0x27c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d14d      	bne.n	8004046 <HAL_TIM_Base_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fae:	4b96      	ldr	r3, [pc, #600]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	4a95      	ldr	r2, [pc, #596]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fba:	4b93      	ldr	r3, [pc, #588]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fca:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a8e      	ldr	r2, [pc, #568]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ff8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4883      	ldr	r0, [pc, #524]	@ (800420c <HAL_TIM_Base_MspInit+0x284>)
 8004000:	f002 fd26 	bl	8006a50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2100      	movs	r1, #0
 8004008:	2018      	movs	r0, #24
 800400a:	f002 fc3c 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800400e:	2018      	movs	r0, #24
 8004010:	f002 fc55 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004014:	2200      	movs	r2, #0
 8004016:	2100      	movs	r1, #0
 8004018:	2019      	movs	r0, #25
 800401a:	f002 fc34 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800401e:	2019      	movs	r0, #25
 8004020:	f002 fc4d 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004024:	2200      	movs	r2, #0
 8004026:	2100      	movs	r1, #0
 8004028:	201a      	movs	r0, #26
 800402a:	f002 fc2c 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800402e:	201a      	movs	r0, #26
 8004030:	f002 fc45 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	201b      	movs	r0, #27
 800403a:	f002 fc24 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800403e:	201b      	movs	r0, #27
 8004040:	f002 fc3d 	bl	80068be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004044:	e143      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM2)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404e:	d134      	bne.n	80040ba <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
 8004054:	4b6c      	ldr	r3, [pc, #432]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	4a6b      	ldr	r2, [pc, #428]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004060:	4b69      	ldr	r3, [pc, #420]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004070:	4b65      	ldr	r3, [pc, #404]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	4a64      	ldr	r2, [pc, #400]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6313      	str	r3, [r2, #48]	@ 0x30
 800407c:	4b62      	ldr	r3, [pc, #392]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004088:	2320      	movs	r3, #32
 800408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408c:	2302      	movs	r3, #2
 800408e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	2300      	movs	r3, #0
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004098:	2301      	movs	r3, #1
 800409a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80040a0:	4619      	mov	r1, r3
 80040a2:	485b      	ldr	r0, [pc, #364]	@ (8004210 <HAL_TIM_Base_MspInit+0x288>)
 80040a4:	f002 fcd4 	bl	8006a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040a8:	2200      	movs	r2, #0
 80040aa:	2100      	movs	r1, #0
 80040ac:	201c      	movs	r0, #28
 80040ae:	f002 fbea 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040b2:	201c      	movs	r0, #28
 80040b4:	f002 fc03 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 80040b8:	e109      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM3)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a55      	ldr	r2, [pc, #340]	@ (8004214 <HAL_TIM_Base_MspInit+0x28c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d134      	bne.n	800412e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040c4:	2300      	movs	r3, #0
 80040c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040ce:	f043 0302 	orr.w	r3, r3, #2
 80040d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e4:	4b48      	ldr	r3, [pc, #288]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	4a47      	ldr	r2, [pc, #284]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040ea:	f043 0302 	orr.w	r3, r3, #2
 80040ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f0:	4b45      	ldr	r3, [pc, #276]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040fc:	2310      	movs	r3, #16
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004108:	2300      	movs	r3, #0
 800410a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800410c:	2302      	movs	r3, #2
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004110:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004114:	4619      	mov	r1, r3
 8004116:	4840      	ldr	r0, [pc, #256]	@ (8004218 <HAL_TIM_Base_MspInit+0x290>)
 8004118:	f002 fc9a 	bl	8006a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800411c:	2200      	movs	r2, #0
 800411e:	2100      	movs	r1, #0
 8004120:	201d      	movs	r0, #29
 8004122:	f002 fbb0 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004126:	201d      	movs	r0, #29
 8004128:	f002 fbc9 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 800412c:	e0cf      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM4)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3a      	ldr	r2, [pc, #232]	@ (800421c <HAL_TIM_Base_MspInit+0x294>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d135      	bne.n	80041a4 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	4b32      	ldr	r3, [pc, #200]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	4a31      	ldr	r2, [pc, #196]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6413      	str	r3, [r2, #64]	@ 0x40
 8004148:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 800415e:	f043 0308 	orr.w	r3, r3, #8
 8004162:	6313      	str	r3, [r2, #48]	@ 0x30
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004174:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004182:	2302      	movs	r3, #2
 8004184:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004186:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800418a:	4619      	mov	r1, r3
 800418c:	4824      	ldr	r0, [pc, #144]	@ (8004220 <HAL_TIM_Base_MspInit+0x298>)
 800418e:	f002 fc5f 	bl	8006a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004192:	2200      	movs	r2, #0
 8004194:	2100      	movs	r1, #0
 8004196:	201e      	movs	r0, #30
 8004198:	f002 fb75 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800419c:	201e      	movs	r0, #30
 800419e:	f002 fb8e 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 80041a2:	e094      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM6)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004224 <HAL_TIM_Base_MspInit+0x29c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041b8:	f043 0310 	orr.w	r3, r3, #16
 80041bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041be:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	69bb      	ldr	r3, [r7, #24]
}
 80041ca:	e080      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
  else if(htim_base->Instance==TIM7)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <HAL_TIM_Base_MspInit+0x2a0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d12a      	bne.n	800422c <HAL_TIM_Base_MspInit+0x2a4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <HAL_TIM_Base_MspInit+0x280>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	2037      	movs	r0, #55	@ 0x37
 80041f8:	f002 fb45 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041fc:	2037      	movs	r0, #55	@ 0x37
 80041fe:	f002 fb5e 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 8004202:	e064      	b.n	80042ce <HAL_TIM_Base_MspInit+0x346>
 8004204:	40010000 	.word	0x40010000
 8004208:	40023800 	.word	0x40023800
 800420c:	40021000 	.word	0x40021000
 8004210:	40020000 	.word	0x40020000
 8004214:	40000400 	.word	0x40000400
 8004218:	40020400 	.word	0x40020400
 800421c:	40000800 	.word	0x40000800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40001000 	.word	0x40001000
 8004228:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a29      	ldr	r2, [pc, #164]	@ (80042d8 <HAL_TIM_Base_MspInit+0x350>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d14b      	bne.n	80042ce <HAL_TIM_Base_MspInit+0x346>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	4b28      	ldr	r3, [pc, #160]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6453      	str	r3, [r2, #68]	@ 0x44
 8004246:	4b25      	ldr	r3, [pc, #148]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b21      	ldr	r3, [pc, #132]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6313      	str	r3, [r2, #48]	@ 0x30
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <HAL_TIM_Base_MspInit+0x354>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800426e:	2340      	movs	r3, #64	@ 0x40
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2302      	movs	r3, #2
 8004274:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800427e:	2303      	movs	r3, #3
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004282:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004286:	4619      	mov	r1, r3
 8004288:	4815      	ldr	r0, [pc, #84]	@ (80042e0 <HAL_TIM_Base_MspInit+0x358>)
 800428a:	f002 fbe1 	bl	8006a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	202b      	movs	r0, #43	@ 0x2b
 8004294:	f002 faf7 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004298:	202b      	movs	r0, #43	@ 0x2b
 800429a:	f002 fb10 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2100      	movs	r1, #0
 80042a2:	202c      	movs	r0, #44	@ 0x2c
 80042a4:	f002 faef 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80042a8:	202c      	movs	r0, #44	@ 0x2c
 80042aa:	f002 fb08 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	202d      	movs	r0, #45	@ 0x2d
 80042b4:	f002 fae7 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80042b8:	202d      	movs	r0, #45	@ 0x2d
 80042ba:	f002 fb00 	bl	80068be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	202e      	movs	r0, #46	@ 0x2e
 80042c4:	f002 fadf 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80042c8:	202e      	movs	r0, #46	@ 0x2e
 80042ca:	f002 faf8 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3750      	adds	r7, #80	@ 0x50
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40020800 	.word	0x40020800

080042e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a12      	ldr	r2, [pc, #72]	@ (800434c <HAL_TIM_MspPostInit+0x68>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d11e      	bne.n	8004344 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <HAL_TIM_MspPostInit+0x6c>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	4a10      	ldr	r2, [pc, #64]	@ (8004350 <HAL_TIM_MspPostInit+0x6c>)
 8004310:	f043 0310 	orr.w	r3, r3, #16
 8004314:	6313      	str	r3, [r2, #48]	@ 0x30
 8004316:	4b0e      	ldr	r3, [pc, #56]	@ (8004350 <HAL_TIM_MspPostInit+0x6c>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004322:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004328:	2302      	movs	r3, #2
 800432a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004334:	2301      	movs	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	4619      	mov	r1, r3
 800433e:	4805      	ldr	r0, [pc, #20]	@ (8004354 <HAL_TIM_MspPostInit+0x70>)
 8004340:	f002 fb86 	bl	8006a50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004344:	bf00      	nop
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40010000 	.word	0x40010000
 8004350:	40023800 	.word	0x40023800
 8004354:	40021000 	.word	0x40021000

08004358 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08c      	sub	sp, #48	@ 0x30
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	f107 031c 	add.w	r3, r7, #28
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a3a      	ldr	r2, [pc, #232]	@ (8004460 <HAL_UART_MspInit+0x108>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d135      	bne.n	80043e6 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 8004384:	f043 0310 	orr.w	r3, r3, #16
 8004388:	6453      	str	r3, [r2, #68]	@ 0x44
 800438a:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c0:	2303      	movs	r3, #3
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043c4:	2307      	movs	r3, #7
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	4619      	mov	r1, r3
 80043ce:	4826      	ldr	r0, [pc, #152]	@ (8004468 <HAL_UART_MspInit+0x110>)
 80043d0:	f002 fb3e 	bl	8006a50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	2025      	movs	r0, #37	@ 0x25
 80043da:	f002 fa54 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043de:	2025      	movs	r0, #37	@ 0x25
 80043e0:	f002 fa6d 	bl	80068be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80043e4:	e038      	b.n	8004458 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a20      	ldr	r2, [pc, #128]	@ (800446c <HAL_UART_MspInit+0x114>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d133      	bne.n	8004458 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	4b14      	ldr	r3, [pc, #80]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6313      	str	r3, [r2, #48]	@ 0x30
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_UART_MspInit+0x10c>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004428:	230c      	movs	r3, #12
 800442a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004438:	2307      	movs	r3, #7
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443c:	f107 031c 	add.w	r3, r7, #28
 8004440:	4619      	mov	r1, r3
 8004442:	4809      	ldr	r0, [pc, #36]	@ (8004468 <HAL_UART_MspInit+0x110>)
 8004444:	f002 fb04 	bl	8006a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004448:	2200      	movs	r2, #0
 800444a:	2100      	movs	r1, #0
 800444c:	2026      	movs	r0, #38	@ 0x26
 800444e:	f002 fa1a 	bl	8006886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004452:	2026      	movs	r0, #38	@ 0x26
 8004454:	f002 fa33 	bl	80068be <HAL_NVIC_EnableIRQ>
}
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	@ 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40011000 	.word	0x40011000
 8004464:	40023800 	.word	0x40023800
 8004468:	40020000 	.word	0x40020000
 800446c:	40004400 	.word	0x40004400

08004470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <NMI_Handler+0x4>

08004478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <HardFault_Handler+0x4>

08004480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <MemManage_Handler+0x4>

08004488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <BusFault_Handler+0x4>

08004490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <UsageFault_Handler+0x4>

08004498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c6:	f000 fd79 	bl	8004fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}

080044ce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80044e0:	4802      	ldr	r0, [pc, #8]	@ (80044ec <ADC_IRQHandler+0x10>)
 80044e2:	f000 ff0e 	bl	8005302 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000330 	.word	0x20000330

080044f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <CAN1_TX_IRQHandler+0x10>)
 80044f6:	f001 febb 	bl	8006270 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000378 	.word	0x20000378

08004504 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <CAN1_RX0_IRQHandler+0x10>)
 800450a:	f001 feb1 	bl	8006270 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000378 	.word	0x20000378

08004518 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800451c:	4802      	ldr	r0, [pc, #8]	@ (8004528 <CAN1_RX1_IRQHandler+0x10>)
 800451e:	f001 fea7 	bl	8006270 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000378 	.word	0x20000378

0800452c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004530:	4802      	ldr	r0, [pc, #8]	@ (800453c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004532:	f005 f965 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2000047c 	.word	0x2000047c

08004540 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004544:	4802      	ldr	r0, [pc, #8]	@ (8004550 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004546:	f005 f95b 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000047c 	.word	0x2000047c

08004554 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004558:	4802      	ldr	r0, [pc, #8]	@ (8004564 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800455a:	f005 f951 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	2000047c 	.word	0x2000047c

08004568 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800456c:	4802      	ldr	r0, [pc, #8]	@ (8004578 <TIM1_CC_IRQHandler+0x10>)
 800456e:	f005 f947 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2000047c 	.word	0x2000047c

0800457c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004580:	4802      	ldr	r0, [pc, #8]	@ (800458c <TIM2_IRQHandler+0x10>)
 8004582:	f005 f93d 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200004c4 	.word	0x200004c4

08004590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004594:	4802      	ldr	r0, [pc, #8]	@ (80045a0 <TIM3_IRQHandler+0x10>)
 8004596:	f005 f933 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000050c 	.word	0x2000050c

080045a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045a8:	4802      	ldr	r0, [pc, #8]	@ (80045b4 <TIM4_IRQHandler+0x10>)
 80045aa:	f005 f929 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000554 	.word	0x20000554

080045b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045bc:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <USART1_IRQHandler+0x10>)
 80045be:	f006 fa95 	bl	800aaec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000674 	.word	0x20000674

080045cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <USART2_IRQHandler+0x10>)
 80045d2:	f006 fa8b 	bl	800aaec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200006bc 	.word	0x200006bc

080045e0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80045e6:	f005 f90b 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2000062c 	.word	0x2000062c

080045f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80045fa:	f005 f901 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2000062c 	.word	0x2000062c

08004608 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800460e:	f005 f8f7 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000062c 	.word	0x2000062c

0800461c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <TIM8_CC_IRQHandler+0x10>)
 8004622:	f005 f8ed 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000062c 	.word	0x2000062c

08004630 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004634:	4802      	ldr	r0, [pc, #8]	@ (8004640 <TIM7_IRQHandler+0x10>)
 8004636:	f005 f8e3 	bl	8009800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200005e4 	.word	0x200005e4

08004644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return 1;
 8004648:	2301      	movs	r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_kill>:

int _kill(int pid, int sig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800465e:	f008 f899 	bl	800c794 <__errno>
 8004662:	4603      	mov	r3, r0
 8004664:	2216      	movs	r2, #22
 8004666:	601a      	str	r2, [r3, #0]
  return -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_exit>:

void _exit (int status)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800467c:	f04f 31ff 	mov.w	r1, #4294967295
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffe7 	bl	8004654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004686:	bf00      	nop
 8004688:	e7fd      	b.n	8004686 <_exit+0x12>

0800468a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e00a      	b.n	80046b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800469c:	f3af 8000 	nop.w
 80046a0:	4601      	mov	r1, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	60ba      	str	r2, [r7, #8]
 80046a8:	b2ca      	uxtb	r2, r1
 80046aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbf0      	blt.n	800469c <_read+0x12>
  }

  return len;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e009      	b.n	80046ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	60ba      	str	r2, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3301      	adds	r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	dbf1      	blt.n	80046d6 <_write+0x12>
  }
  return len;
 80046f2:	687b      	ldr	r3, [r7, #4]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_close>:

int _close(int file)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004724:	605a      	str	r2, [r3, #4]
  return 0;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_isatty>:

int _isatty(int file)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800473c:	2301      	movs	r3, #1
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800476c:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <_sbrk+0x5c>)
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <_sbrk+0x60>)
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004778:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <_sbrk+0x64>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <_sbrk+0x64>)
 8004782:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <_sbrk+0x68>)
 8004784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <_sbrk+0x64>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	d207      	bcs.n	80047a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004794:	f007 fffe 	bl	800c794 <__errno>
 8004798:	4603      	mov	r3, r0
 800479a:	220c      	movs	r2, #12
 800479c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e009      	b.n	80047b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <_sbrk+0x64>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <_sbrk+0x64>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <_sbrk+0x64>)
 80047b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20020000 	.word	0x20020000
 80047c4:	00000400 	.word	0x00000400
 80047c8:	20001788 	.word	0x20001788
 80047cc:	20001978 	.word	0x20001978

080047d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <SystemInit+0x20>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	4a05      	ldr	r2, [pc, #20]	@ (80047f0 <SystemInit+0x20>)
 80047dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <Median_Filter>:

uint32_t distance_history[NUM_SENSORS][FILTER_WINDOW_SIZE] = {0};
uint8_t filter_index[NUM_SENSORS] = {0};

// ==== HÀM LỌC TRUNG VỊ ====
uint32_t Median_Filter(uint8_t id, uint32_t new_sample) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	@ 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
    distance_history[id][filter_index[id]] = new_sample;
 8004800:	79fa      	ldrb	r2, [r7, #7]
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	4934      	ldr	r1, [pc, #208]	@ (80048d8 <Median_Filter+0xe4>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	4618      	mov	r0, r3
 800480a:	4934      	ldr	r1, [pc, #208]	@ (80048dc <Median_Filter+0xe8>)
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	4403      	add	r3, r0
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    filter_index[id] = (filter_index[id] + 1) % FILTER_WINDOW_SIZE;
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	4a2e      	ldr	r2, [pc, #184]	@ (80048d8 <Median_Filter+0xe4>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	4b2f      	ldr	r3, [pc, #188]	@ (80048e0 <Median_Filter+0xec>)
 8004824:	fb83 1302 	smull	r1, r3, r3, r2
 8004828:	1059      	asrs	r1, r3, #1
 800482a:	17d3      	asrs	r3, r2, #31
 800482c:	1ac9      	subs	r1, r1, r3
 800482e:	460b      	mov	r3, r1
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	1ad1      	subs	r1, r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	b2c9      	uxtb	r1, r1
 800483a:	4a27      	ldr	r2, [pc, #156]	@ (80048d8 <Median_Filter+0xe4>)
 800483c:	54d1      	strb	r1, [r2, r3]

    uint32_t temp[FILTER_WINDOW_SIZE];
    memcpy(temp, distance_history[id], sizeof(temp));
 800483e:	79fa      	ldrb	r2, [r7, #7]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a24      	ldr	r2, [pc, #144]	@ (80048dc <Median_Filter+0xe8>)
 800484a:	1899      	adds	r1, r3, r2
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	2214      	movs	r2, #20
 8004852:	4618      	mov	r0, r3
 8004854:	f007 ffcb 	bl	800c7ee <memcpy>

    // Sort
    for (int i = 0; i < FILTER_WINDOW_SIZE - 1; i++) {
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	e034      	b.n	80048c8 <Median_Filter+0xd4>
        for (int j = i + 1; j < FILTER_WINDOW_SIZE; j++) {
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	3301      	adds	r3, #1
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	e02a      	b.n	80048bc <Median_Filter+0xc8>
            if (temp[i] > temp[j]) {
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	3328      	adds	r3, #40	@ 0x28
 800486c:	443b      	add	r3, r7
 800486e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	3328      	adds	r3, #40	@ 0x28
 8004878:	443b      	add	r3, r7
 800487a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800487e:	429a      	cmp	r2, r3
 8004880:	d919      	bls.n	80048b6 <Median_Filter+0xc2>
                uint32_t t = temp[i];
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	443b      	add	r3, r7
 800488a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800488e:	61fb      	str	r3, [r7, #28]
                temp[i] = temp[j];
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	3328      	adds	r3, #40	@ 0x28
 8004896:	443b      	add	r3, r7
 8004898:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	3328      	adds	r3, #40	@ 0x28
 80048a2:	443b      	add	r3, r7
 80048a4:	f843 2c20 	str.w	r2, [r3, #-32]
                temp[j] = t;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3328      	adds	r3, #40	@ 0x28
 80048ae:	443b      	add	r3, r7
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	f843 2c20 	str.w	r2, [r3, #-32]
        for (int j = i + 1; j < FILTER_WINDOW_SIZE; j++) {
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	3301      	adds	r3, #1
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	ddd1      	ble.n	8004866 <Median_Filter+0x72>
    for (int i = 0; i < FILTER_WINDOW_SIZE - 1; i++) {
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	3301      	adds	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	ddc7      	ble.n	800485e <Median_Filter+0x6a>
            }
        }
    }

    return temp[FILTER_WINDOW_SIZE / 2];
 80048ce:	693b      	ldr	r3, [r7, #16]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	@ 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20001820 	.word	0x20001820
 80048dc:	200017d0 	.word	0x200017d0
 80048e0:	66666667 	.word	0x66666667

080048e4 <delay_us>:

// ==== DELAY MICRO GIÂY ====
void delay_us(uint16_t us) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim6, 0);
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <delay_us+0x34>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim6);
 80048f6:	4808      	ldr	r0, [pc, #32]	@ (8004918 <delay_us+0x34>)
 80048f8:	f004 fbfa 	bl	80090f0 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 80048fc:	bf00      	nop
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <delay_us+0x34>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3f9      	bcc.n	80048fe <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim6);
 800490a:	4803      	ldr	r0, [pc, #12]	@ (8004918 <delay_us+0x34>)
 800490c:	f004 fc58 	bl	80091c0 <HAL_TIM_Base_Stop>
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2000059c 	.word	0x2000059c

0800491c <US01_TriggerOne>:

// ==== TRIGGER MỘT CẢM BIẾN ====
void US01_TriggerOne(uint8_t id) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b092      	sub	sp, #72	@ 0x48
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_SET);
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <US01_TriggerOne+0xb4>)
 800492a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	4a28      	ldr	r2, [pc, #160]	@ (80049d4 <US01_TriggerOne+0xb8>)
 8004932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004936:	2201      	movs	r2, #1
 8004938:	4619      	mov	r1, r3
 800493a:	f002 fa25 	bl	8006d88 <HAL_GPIO_WritePin>
    delay_us(10);
 800493e:	200a      	movs	r0, #10
 8004940:	f7ff ffd0 	bl	80048e4 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT[id], TRIG_PIN[id], GPIO_PIN_RESET);
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	4a22      	ldr	r2, [pc, #136]	@ (80049d0 <US01_TriggerOne+0xb4>)
 8004948:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	4a21      	ldr	r2, [pc, #132]	@ (80049d4 <US01_TriggerOne+0xb8>)
 8004950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004954:	2200      	movs	r2, #0
 8004956:	4619      	mov	r1, r3
 8004958:	f002 fa16 	bl	8006d88 <HAL_GPIO_WritePin>

    Is_First_Captured[id] = 0;
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <US01_TriggerOne+0xbc>)
 8004960:	2100      	movs	r1, #0
 8004962:	54d1      	strb	r1, [r2, r3]
    HAL_TIM_IC_Start_IT(htim[id], TIM_CHANNEL[id]);
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	4a1d      	ldr	r2, [pc, #116]	@ (80049dc <US01_TriggerOne+0xc0>)
 8004968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	491c      	ldr	r1, [pc, #112]	@ (80049e0 <US01_TriggerOne+0xc4>)
 8004970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f004 fd6c 	bl	8009454 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_ENABLE_IT(htim[id], TIM_IT_CC[id]);
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <US01_TriggerOne+0xc0>)
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68d9      	ldr	r1, [r3, #12]
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <US01_TriggerOne+0xc8>)
 800498c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	4812      	ldr	r0, [pc, #72]	@ (80049dc <US01_TriggerOne+0xc0>)
 8004994:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	60da      	str	r2, [r3, #12]

    char msg[64];
    snprintf(msg, sizeof(msg), "TRIG sensor %d\r\n", id);
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f107 0008 	add.w	r0, r7, #8
 80049a4:	4a10      	ldr	r2, [pc, #64]	@ (80049e8 <US01_TriggerOne+0xcc>)
 80049a6:	2140      	movs	r1, #64	@ 0x40
 80049a8:	f007 fd52 	bl	800c450 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fb fc5d 	bl	8000270 <strlen>
 80049b6:	4603      	mov	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	f107 0108 	add.w	r1, r7, #8
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	480a      	ldr	r0, [pc, #40]	@ (80049ec <US01_TriggerOne+0xd0>)
 80049c4:	f006 f806 	bl	800a9d4 <HAL_UART_Transmit>
}
 80049c8:	bf00      	nop
 80049ca:	3748      	adds	r7, #72	@ 0x48
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200000fc 	.word	0x200000fc
 80049d4:	2000010c 	.word	0x2000010c
 80049d8:	200017bc 	.word	0x200017bc
 80049dc:	20000114 	.word	0x20000114
 80049e0:	2000178c 	.word	0x2000178c
 80049e4:	20000124 	.word	0x20000124
 80049e8:	0800f87c 	.word	0x0800f87c
 80049ec:	200006bc 	.word	0x200006bc

080049f0 <HAL_TIM_IC_CaptureCallback>:

// ==== NGẮT INPUT CAPTURE ====
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htimx) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0a8      	sub	sp, #160	@ 0xa0
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
    check_it(htimx);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fd fd37 	bl	800246c <check_it>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a04:	e1b1      	b.n	8004d6a <HAL_TIM_IC_CaptureCallback+0x37a>
        if (htimx->Instance == htim[i]->Instance) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	49b0      	ldr	r1, [pc, #704]	@ (8004ccc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	f040 81a2 	bne.w	8004d60 <HAL_TIM_IC_CaptureCallback+0x370>
            if (Is_First_Captured[i] == 0) {
 8004a1c:	4aac      	ldr	r2, [pc, #688]	@ (8004cd0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8004a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 8086 	bne.w	8004b3a <HAL_TIM_IC_CaptureCallback+0x14a>
                IC_Val1[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004a2e:	4aa9      	ldr	r2, [pc, #676]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f005 f9f6 	bl	8009e2c <HAL_TIM_ReadCapturedValue>
 8004a40:	4602      	mov	r2, r0
 8004a42:	49a5      	ldr	r1, [pc, #660]	@ (8004cd8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 1;
 8004a4c:	4aa0      	ldr	r2, [pc, #640]	@ (8004cd0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8004a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a52:	4413      	add	r3, r2
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004a58:	4a9e      	ldr	r2, [pc, #632]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_TIM_IC_CaptureCallback+0x88>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 020a 	bic.w	r2, r2, #10
 8004a74:	621a      	str	r2, [r3, #32]
 8004a76:	e027      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004a78:	4a96      	ldr	r2, [pc, #600]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d108      	bne.n	8004a98 <HAL_TIM_IC_CaptureCallback+0xa8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a94:	6213      	str	r3, [r2, #32]
 8004a96:	e017      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004a98:	4a8e      	ldr	r2, [pc, #568]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d108      	bne.n	8004ab8 <HAL_TIM_IC_CaptureCallback+0xc8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004ab4:	6213      	str	r3, [r2, #32]
 8004ab6:	e007      	b.n	8004ac8 <HAL_TIM_IC_CaptureCallback+0xd8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004ac6:	6213      	str	r3, [r2, #32]
 8004ac8:	4a82      	ldr	r2, [pc, #520]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <HAL_TIM_IC_CaptureCallback+0xf8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0202 	orr.w	r2, r2, #2
 8004ae4:	621a      	str	r2, [r3, #32]

                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
            }
            break;
 8004ae6:	e146      	b.n	8004d76 <HAL_TIM_IC_CaptureCallback+0x386>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_FALLING);
 8004ae8:	4a7a      	ldr	r2, [pc, #488]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d108      	bne.n	8004b08 <HAL_TIM_IC_CaptureCallback+0x118>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	f043 0320 	orr.w	r3, r3, #32
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	e12a      	b.n	8004d5e <HAL_TIM_IC_CaptureCallback+0x36e>
 8004b08:	4a72      	ldr	r2, [pc, #456]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d108      	bne.n	8004b28 <HAL_TIM_IC_CaptureCallback+0x138>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b24:	6213      	str	r3, [r2, #32]
 8004b26:	e11a      	b.n	8004d5e <HAL_TIM_IC_CaptureCallback+0x36e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b36:	6213      	str	r3, [r2, #32]
            break;
 8004b38:	e11d      	b.n	8004d76 <HAL_TIM_IC_CaptureCallback+0x386>
                IC_Val2[i] = HAL_TIM_ReadCapturedValue(htimx, TIM_CHANNEL[i]);
 8004b3a:	4a66      	ldr	r2, [pc, #408]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f005 f970 	bl	8009e2c <HAL_TIM_ReadCapturedValue>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4963      	ldr	r1, [pc, #396]	@ (8004cdc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                __HAL_TIM_SET_COUNTER(htimx, 0);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	625a      	str	r2, [r3, #36]	@ 0x24
                uint32_t max_timer = __HAL_TIM_GET_AUTORELOAD(htim[i]);
 8004b60:	4a5a      	ldr	r2, [pc, #360]	@ (8004ccc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8004b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8004b72:	4a5a      	ldr	r2, [pc, #360]	@ (8004cdc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b7c:	4956      	ldr	r1, [pc, #344]	@ (8004cd8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90b      	bls.n	8004ba2 <HAL_TIM_IC_CaptureCallback+0x1b2>
 8004b8a:	4a54      	ldr	r2, [pc, #336]	@ (8004cdc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b94:	4950      	ldr	r1, [pc, #320]	@ (8004cd8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	e00d      	b.n	8004bbe <HAL_TIM_IC_CaptureCallback+0x1ce>
                                ((max_timer - IC_Val1[i]) + IC_Val2[i]);
 8004ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8004cd8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8004ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	494a      	ldr	r1, [pc, #296]	@ (8004cdc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8004bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (IC_Val2[i] - IC_Val1[i]) :
 8004bbc:	4413      	add	r3, r2
                uint32_t diff = (IC_Val2[i] > IC_Val1[i]) ?
 8004bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                uint32_t raw = (diff * 0.034f) / 2.0f;
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8004ce0 <HAL_TIM_IC_CaptureCallback+0x2f0>
 8004bd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bd6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	ee17 3a90 	vmov	r3, s15
 8004be6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                Distances[i] = Median_Filter(i, raw);
 8004bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fdfd 	bl	80047f4 <Median_Filter>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4939      	ldr	r1, [pc, #228]	@ (8004ce4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8004bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                Is_First_Captured[i] = 0;
 8004c06:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8004c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
                         i, raw, Distances[i]);
 8004c12:	4a34      	ldr	r2, [pc, #208]	@ (8004ce4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8004c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                snprintf(msg, sizeof(msg),
 8004c1c:	f107 0008 	add.w	r0, r7, #8
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	f007 fc0e 	bl	800c450 <sniprintf>
                UART_SendString(msg);
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f8bb 	bl	8004db4 <UART_SendString>
                __HAL_TIM_SET_CAPTUREPOLARITY(htimx, TIM_CHANNEL[i], TIM_INPUTCHANNELPOLARITY_RISING);
 8004c3e:	4a25      	ldr	r2, [pc, #148]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <HAL_TIM_IC_CaptureCallback+0x26e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a1a      	ldr	r2, [r3, #32]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 020a 	bic.w	r2, r2, #10
 8004c5a:	621a      	str	r2, [r3, #32]
 8004c5c:	e027      	b.n	8004cae <HAL_TIM_IC_CaptureCallback+0x2be>
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d108      	bne.n	8004c7e <HAL_TIM_IC_CaptureCallback+0x28e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c7a:	6213      	str	r3, [r2, #32]
 8004c7c:	e017      	b.n	8004cae <HAL_TIM_IC_CaptureCallback+0x2be>
 8004c7e:	4a15      	ldr	r2, [pc, #84]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d108      	bne.n	8004c9e <HAL_TIM_IC_CaptureCallback+0x2ae>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c9a:	6213      	str	r3, [r2, #32]
 8004c9c:	e007      	b.n	8004cae <HAL_TIM_IC_CaptureCallback+0x2be>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004cac:	6213      	str	r3, [r2, #32]
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8004cb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d117      	bne.n	8004cec <HAL_TIM_IC_CaptureCallback+0x2fc>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a12      	ldr	r2, [r2, #32]
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e032      	b.n	8004d30 <HAL_TIM_IC_CaptureCallback+0x340>
 8004cca:	bf00      	nop
 8004ccc:	20000114 	.word	0x20000114
 8004cd0:	200017bc 	.word	0x200017bc
 8004cd4:	2000178c 	.word	0x2000178c
 8004cd8:	2000179c 	.word	0x2000179c
 8004cdc:	200017ac 	.word	0x200017ac
 8004ce0:	3d0b4396 	.word	0x3d0b4396
 8004ce4:	200017c0 	.word	0x200017c0
 8004ce8:	0800f890 	.word	0x0800f890
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_TIM_IC_CaptureCallback+0x390>)
 8004cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_IC_CaptureCallback+0x318>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	6213      	str	r3, [r2, #32]
 8004d06:	e013      	b.n	8004d30 <HAL_TIM_IC_CaptureCallback+0x340>
 8004d08:	4a1d      	ldr	r2, [pc, #116]	@ (8004d80 <HAL_TIM_IC_CaptureCallback+0x390>)
 8004d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_IC_CaptureCallback+0x334>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	e005      	b.n	8004d30 <HAL_TIM_IC_CaptureCallback+0x340>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	6213      	str	r3, [r2, #32]
                __HAL_TIM_DISABLE_IT(htimx, TIM_IT_CC[i]);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68d9      	ldr	r1, [r3, #12]
 8004d36:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <HAL_TIM_IC_CaptureCallback+0x394>)
 8004d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	43da      	mvns	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	400a      	ands	r2, r1
 8004d48:	60da      	str	r2, [r3, #12]
                HAL_TIM_IC_Stop_IT(htimx, TIM_CHANNEL[i]);
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d80 <HAL_TIM_IC_CaptureCallback+0x390>)
 8004d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f004 fca4 	bl	80096a4 <HAL_TIM_IC_Stop_IT>
            break;
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_IC_CaptureCallback+0x386>
 8004d5e:	e00a      	b.n	8004d76 <HAL_TIM_IC_CaptureCallback+0x386>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004d60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	f77f ae49 	ble.w	8004a06 <HAL_TIM_IC_CaptureCallback+0x16>
        }
    }
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3798      	adds	r7, #152	@ 0x98
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000178c 	.word	0x2000178c
 8004d84:	20000124 	.word	0x20000124

08004d88 <US01_GetDistance>:

// ==== TRUY XUẤT GIÁ TRỊ ====
uint32_t US01_GetDistance(uint8_t id) {
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
    return (id < NUM_SENSORS) ? Distances[id] : 0;
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d804      	bhi.n	8004da2 <US01_GetDistance+0x1a>
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	4a05      	ldr	r2, [pc, #20]	@ (8004db0 <US01_GetDistance+0x28>)
 8004d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da0:	e000      	b.n	8004da4 <US01_GetDistance+0x1c>
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	200017c0 	.word	0x200017c0

08004db4 <UART_SendString>:

void UART_SendString(char *str) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fb fa57 	bl	8000270 <strlen>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <UART_SendString+0x28>)
 8004dce:	f005 fe01 	bl	800a9d4 <HAL_UART_Transmit>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200006bc 	.word	0x200006bc

08004de0 <US01_SendAllDistances_CAN>:

// ==== GỬI DỮ LIỆU CAN ====
void US01_SendAllDistances_CAN(void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
    uint8_t data[8];

    for (int i = 0; i < NUM_SENSORS; i++) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e025      	b.n	8004e38 <US01_SendAllDistances_CAN+0x58>
        uint16_t dist = (uint16_t)US01_GetDistance(i);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ffc9 	bl	8004d88 <US01_GetDistance>
 8004df6:	4603      	mov	r3, r0
 8004df8:	817b      	strh	r3, [r7, #10]

        if (dist > 500 || dist <= 1) {
 8004dfa:	897b      	ldrh	r3, [r7, #10]
 8004dfc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004e00:	d802      	bhi.n	8004e08 <US01_SendAllDistances_CAN+0x28>
 8004e02:	897b      	ldrh	r3, [r7, #10]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d801      	bhi.n	8004e0c <US01_SendAllDistances_CAN+0x2c>
            dist = 0x0033;
 8004e08:	2333      	movs	r3, #51	@ 0x33
 8004e0a:	817b      	strh	r3, [r7, #10]
        }

        data[2 * i]     = (dist >> 8) & 0xFF;
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	3310      	adds	r3, #16
 8004e1a:	443b      	add	r3, r7
 8004e1c:	f803 2c10 	strb.w	r2, [r3, #-16]
        data[2 * i + 1] = dist & 0xFF;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	3301      	adds	r3, #1
 8004e26:	897a      	ldrh	r2, [r7, #10]
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	3310      	adds	r3, #16
 8004e2c:	443b      	add	r3, r7
 8004e2e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3301      	adds	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	ddd6      	ble.n	8004dec <US01_SendAllDistances_CAN+0xc>
    }

    CAN_SendTopicData(TOPIC_ID_US01, data, 8);
 8004e3e:	463b      	mov	r3, r7
 8004e40:	2208      	movs	r2, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	2016      	movs	r0, #22
 8004e46:	f7fd fa85 	bl	8002354 <CAN_SendTopicData>
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <US01_TriggerAll_Sequential>:

void US01_TriggerAll_Sequential(void) {
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
    // KHÔNG DÙNG nếu bạn đã dùng trigger từng sensor trong vòng lặp
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e00a      	b.n	8004e74 <US01_TriggerAll_Sequential+0x22>
        US01_TriggerOne(i);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fd5a 	bl	800491c <US01_TriggerOne>
        HAL_Delay(100); // chỉ dùng tạm khi chưa dùng loop thời gian
 8004e68:	2064      	movs	r0, #100	@ 0x64
 8004e6a:	f000 f8c7 	bl	8004ffc <HAL_Delay>
    for (int i = 0; i < NUM_SENSORS; i++) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3301      	adds	r3, #1
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	ddf1      	ble.n	8004e5e <US01_TriggerAll_Sequential+0xc>
    }
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <PrintAllDistances>:

// ==== IN KẾT QUẢ ====
void PrintAllDistances(void) {
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b0a5      	sub	sp, #148	@ 0x94
 8004e88:	af04      	add	r7, sp, #16
    char buf[128];
    snprintf(buf, sizeof(buf),
             "Truoc2: %lucm | Trai: %lucm | Truoc1: %lucm | Phai: %lucm\r\n",
             Distances[0], Distances[1], Distances[2], Distances[3]);
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <PrintAllDistances+0x38>)
 8004e8c:	681c      	ldr	r4, [r3, #0]
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <PrintAllDistances+0x38>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <PrintAllDistances+0x38>)
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	4909      	ldr	r1, [pc, #36]	@ (8004ebc <PrintAllDistances+0x38>)
 8004e98:	68c9      	ldr	r1, [r1, #12]
    snprintf(buf, sizeof(buf),
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	9102      	str	r1, [sp, #8]
 8004e9e:	9201      	str	r2, [sp, #4]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	4a06      	ldr	r2, [pc, #24]	@ (8004ec0 <PrintAllDistances+0x3c>)
 8004ea6:	2180      	movs	r1, #128	@ 0x80
 8004ea8:	f007 fad2 	bl	800c450 <sniprintf>
    UART_SendString(buf);
 8004eac:	463b      	mov	r3, r7
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff80 	bl	8004db4 <UART_SendString>
}
 8004eb4:	bf00      	nop
 8004eb6:	3784      	adds	r7, #132	@ 0x84
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	200017c0 	.word	0x200017c0
 8004ec0:	0800f8b4 	.word	0x0800f8b4

08004ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004ec8:	f7ff fc82 	bl	80047d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ecc:	480c      	ldr	r0, [pc, #48]	@ (8004f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ece:	490d      	ldr	r1, [pc, #52]	@ (8004f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ed4:	e002      	b.n	8004edc <LoopCopyDataInit>

08004ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eda:	3304      	adds	r3, #4

08004edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee0:	d3f9      	bcc.n	8004ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8004f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8004f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ee8:	e001      	b.n	8004eee <LoopFillZerobss>

08004eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004eec:	3204      	adds	r2, #4

08004eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef0:	d3fb      	bcc.n	8004eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ef2:	f007 fc55 	bl	800c7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ef6:	f7fd fd75 	bl	80029e4 <main>
  bx  lr    
 8004efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f04:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8004f08:	0800fca4 	.word	0x0800fca4
  ldr r2, =_sbss
 8004f0c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004f10:	20001974 	.word	0x20001974

08004f14 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f14:	e7fe      	b.n	8004f14 <CAN1_SCE_IRQHandler>
	...

08004f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_Init+0x40>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	@ (8004f58 <HAL_Init+0x40>)
 8004f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <HAL_Init+0x40>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f58 <HAL_Init+0x40>)
 8004f2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f34:	4b08      	ldr	r3, [pc, #32]	@ (8004f58 <HAL_Init+0x40>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a07      	ldr	r2, [pc, #28]	@ (8004f58 <HAL_Init+0x40>)
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f40:	2003      	movs	r0, #3
 8004f42:	f001 fc95 	bl	8006870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f46:	200f      	movs	r0, #15
 8004f48:	f000 f808 	bl	8004f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f4c:	f7fe fde6 	bl	8003b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00

08004f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f64:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <HAL_InitTick+0x54>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <HAL_InitTick+0x58>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 fcad 	bl	80068da <HAL_SYSTICK_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e00e      	b.n	8004fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b0f      	cmp	r3, #15
 8004f8e:	d80a      	bhi.n	8004fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f90:	2200      	movs	r2, #0
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	f001 fc75 	bl	8006886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f9c:	4a06      	ldr	r2, [pc, #24]	@ (8004fb8 <HAL_InitTick+0x5c>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200000f8 	.word	0x200000f8
 8004fb4:	20000138 	.word	0x20000138
 8004fb8:	20000134 	.word	0x20000134

08004fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_IncTick+0x20>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_IncTick+0x24>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4413      	add	r3, r2
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <HAL_IncTick+0x24>)
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000138 	.word	0x20000138
 8004fe0:	20001824 	.word	0x20001824

08004fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_GetTick+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20001824 	.word	0x20001824

08004ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005004:	f7ff ffee 	bl	8004fe4 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d005      	beq.n	8005022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005016:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <HAL_Delay+0x44>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005022:	bf00      	nop
 8005024:	f7ff ffde 	bl	8004fe4 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	d8f7      	bhi.n	8005024 <HAL_Delay+0x28>
  {
  }
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000138 	.word	0x20000138

08005044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e033      	b.n	80050c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fe fd88 	bl	8003b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d118      	bne.n	80050b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800508a:	f023 0302 	bic.w	r3, r3, #2
 800508e:	f043 0202 	orr.w	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fb86 	bl	80057a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	f043 0201 	orr.w	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80050b2:	e001      	b.n	80050b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_ADC_Start_IT+0x1a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0bd      	b.n	8005262 <HAL_ADC_Start_IT+0x196>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d018      	beq.n	800512e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800510c:	4b58      	ldr	r3, [pc, #352]	@ (8005270 <HAL_ADC_Start_IT+0x1a4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a58      	ldr	r2, [pc, #352]	@ (8005274 <HAL_ADC_Start_IT+0x1a8>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0c9a      	lsrs	r2, r3, #18
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005120:	e002      	b.n	8005128 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	3b01      	subs	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f9      	bne.n	8005122 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 8085 	bne.w	8005248 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005168:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517c:	d106      	bne.n	800518c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	f023 0206 	bic.w	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44
 800518a:	e002      	b.n	8005192 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800519a:	4b37      	ldr	r3, [pc, #220]	@ (8005278 <HAL_ADC_Start_IT+0x1ac>)
 800519c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80051a6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d12a      	bne.n	800521e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2b      	ldr	r2, [pc, #172]	@ (800527c <HAL_ADC_Start_IT+0x1b0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d015      	beq.n	80051fe <HAL_ADC_Start_IT+0x132>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005280 <HAL_ADC_Start_IT+0x1b4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d105      	bne.n	80051e8 <HAL_ADC_Start_IT+0x11c>
 80051dc:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <HAL_ADC_Start_IT+0x1ac>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a25      	ldr	r2, [pc, #148]	@ (8005284 <HAL_ADC_Start_IT+0x1b8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d136      	bne.n	8005260 <HAL_ADC_Start_IT+0x194>
 80051f2:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_ADC_Start_IT+0x1ac>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d130      	bne.n	8005260 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d129      	bne.n	8005260 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	e020      	b.n	8005260 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a16      	ldr	r2, [pc, #88]	@ (800527c <HAL_ADC_Start_IT+0x1b0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d11b      	bne.n	8005260 <HAL_ADC_Start_IT+0x194>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d114      	bne.n	8005260 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	e00b      	b.n	8005260 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0210 	orr.w	r2, r3, #16
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005258:	f043 0201 	orr.w	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200000f8 	.word	0x200000f8
 8005274:	431bde83 	.word	0x431bde83
 8005278:	40012300 	.word	0x40012300
 800527c:	40012000 	.word	0x40012000
 8005280:	40012100 	.word	0x40012100
 8005284:	40012200 	.word	0x40012200

08005288 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_ADC_Stop_IT+0x16>
 800529a:	2302      	movs	r3, #2
 800529c:	e02b      	b.n	80052f6 <HAL_ADC_Stop_IT+0x6e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d113      	bne.n	80052ec <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052d2:	f023 0320 	bic.w	r3, r3, #32
 80052d6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d049      	beq.n	80053cc <HAL_ADC_IRQHandler+0xca>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d046      	beq.n	80053cc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d12b      	bne.n	80053bc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005368:	2b00      	cmp	r3, #0
 800536a:	d127      	bne.n	80053bc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d119      	bne.n	80053bc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0220 	bic.w	r2, r2, #32
 8005396:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f043 0201 	orr.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fd fae1 	bl	8002984 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0212 	mvn.w	r2, #18
 80053ca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d057      	beq.n	8005492 <HAL_ADC_IRQHandler+0x190>
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d054      	beq.n	8005492 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d139      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005426:	2b00      	cmp	r3, #0
 8005428:	d12b      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005434:	2b00      	cmp	r3, #0
 8005436:	d124      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d119      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800545c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d105      	bne.n	8005482 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa8c 	bl	80059a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 020c 	mvn.w	r2, #12
 8005490:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d017      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x1d6>
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d014      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10d      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f837 	bl	800553c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0201 	mvn.w	r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <HAL_ADC_IRQHandler+0x218>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d012      	beq.n	800551a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0220 	mvn.w	r2, #32
 8005508:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f820 	bl	8005550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0220 	mvn.w	r2, #32
 8005518:	601a      	str	r2, [r3, #0]
  }
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1c>
 800557c:	2302      	movs	r3, #2
 800557e:	e105      	b.n	800578c <HAL_ADC_ConfigChannel+0x228>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b09      	cmp	r3, #9
 800558e:	d925      	bls.n	80055dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68d9      	ldr	r1, [r3, #12]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	3b1e      	subs	r3, #30
 80055a6:	2207      	movs	r2, #7
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43da      	mvns	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	400a      	ands	r2, r1
 80055b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68d9      	ldr	r1, [r3, #12]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4618      	mov	r0, r3
 80055c8:	4603      	mov	r3, r0
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4403      	add	r3, r0
 80055ce:	3b1e      	subs	r3, #30
 80055d0:	409a      	lsls	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e022      	b.n	8005622 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6919      	ldr	r1, [r3, #16]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	4613      	mov	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	4413      	add	r3, r2
 80055f0:	2207      	movs	r2, #7
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43da      	mvns	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	400a      	ands	r2, r1
 80055fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6919      	ldr	r1, [r3, #16]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	4618      	mov	r0, r3
 8005612:	4603      	mov	r3, r0
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4403      	add	r3, r0
 8005618:	409a      	lsls	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b06      	cmp	r3, #6
 8005628:	d824      	bhi.n	8005674 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	3b05      	subs	r3, #5
 800563c:	221f      	movs	r2, #31
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	400a      	ands	r2, r1
 800564a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	4618      	mov	r0, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	3b05      	subs	r3, #5
 8005666:	fa00 f203 	lsl.w	r2, r0, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	635a      	str	r2, [r3, #52]	@ 0x34
 8005672:	e04c      	b.n	800570e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d824      	bhi.n	80056c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	3b23      	subs	r3, #35	@ 0x23
 800568e:	221f      	movs	r2, #31
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43da      	mvns	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	400a      	ands	r2, r1
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4618      	mov	r0, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	3b23      	subs	r3, #35	@ 0x23
 80056b8:	fa00 f203 	lsl.w	r2, r0, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80056c4:	e023      	b.n	800570e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	3b41      	subs	r3, #65	@ 0x41
 80056d8:	221f      	movs	r2, #31
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43da      	mvns	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	400a      	ands	r2, r1
 80056e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4618      	mov	r0, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	3b41      	subs	r3, #65	@ 0x41
 8005702:	fa00 f203 	lsl.w	r2, r0, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800570e:	4b22      	ldr	r3, [pc, #136]	@ (8005798 <HAL_ADC_ConfigChannel+0x234>)
 8005710:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a21      	ldr	r2, [pc, #132]	@ (800579c <HAL_ADC_ConfigChannel+0x238>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x1cc>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b12      	cmp	r3, #18
 8005722:	d105      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a19      	ldr	r2, [pc, #100]	@ (800579c <HAL_ADC_ConfigChannel+0x238>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d123      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x21e>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b10      	cmp	r3, #16
 8005740:	d003      	beq.n	800574a <HAL_ADC_ConfigChannel+0x1e6>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b11      	cmp	r3, #17
 8005748:	d11b      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b10      	cmp	r3, #16
 800575c:	d111      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800575e:	4b10      	ldr	r3, [pc, #64]	@ (80057a0 <HAL_ADC_ConfigChannel+0x23c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a10      	ldr	r2, [pc, #64]	@ (80057a4 <HAL_ADC_ConfigChannel+0x240>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	0c9a      	lsrs	r2, r3, #18
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005774:	e002      	b.n	800577c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3b01      	subs	r3, #1
 800577a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f9      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40012300 	.word	0x40012300
 800579c:	40012000 	.word	0x40012000
 80057a0:	200000f8 	.word	0x200000f8
 80057a4:	431bde83 	.word	0x431bde83

080057a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057b0:	4b79      	ldr	r3, [pc, #484]	@ (8005998 <ADC_Init+0x1f0>)
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	021a      	lsls	r2, r3, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	4a58      	ldr	r2, [pc, #352]	@ (800599c <ADC_Init+0x1f4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800584e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	e00f      	b.n	80058a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80058a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0202 	bic.w	r2, r2, #2
 80058b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6899      	ldr	r1, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7e1b      	ldrb	r3, [r3, #24]
 80058c0:	005a      	lsls	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80058f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	3b01      	subs	r3, #1
 8005900:	035a      	lsls	r2, r3, #13
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
 800590a:	e007      	b.n	800591c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800592a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	3b01      	subs	r3, #1
 8005938:	051a      	lsls	r2, r3, #20
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6899      	ldr	r1, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800595e:	025a      	lsls	r2, r3, #9
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	029a      	lsls	r2, r3, #10
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40012300 	.word	0x40012300
 800599c:	0f000001 	.word	0x0f000001

080059a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0ed      	b.n	8005ba2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fe f91c 	bl	8003c10 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e8:	f7ff fafc 	bl	8004fe4 <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80059ee:	e012      	b.n	8005a16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059f0:	f7ff faf8 	bl	8004fe4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b0a      	cmp	r3, #10
 80059fc:	d90b      	bls.n	8005a16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e0c5      	b.n	8005ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0e5      	beq.n	80059f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0202 	bic.w	r2, r2, #2
 8005a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a34:	f7ff fad6 	bl	8004fe4 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a3a:	e012      	b.n	8005a62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a3c:	f7ff fad2 	bl	8004fe4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b0a      	cmp	r3, #10
 8005a48:	d90b      	bls.n	8005a62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2205      	movs	r2, #5
 8005a5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e09f      	b.n	8005ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7e1b      	ldrb	r3, [r3, #24]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d108      	bne.n	8005a8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e007      	b.n	8005a9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7e5b      	ldrb	r3, [r3, #25]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d108      	bne.n	8005ab4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e007      	b.n	8005ac4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	7e9b      	ldrb	r3, [r3, #26]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d108      	bne.n	8005ade <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0220 	orr.w	r2, r2, #32
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e007      	b.n	8005aee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0220 	bic.w	r2, r2, #32
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	7edb      	ldrb	r3, [r3, #27]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d108      	bne.n	8005b08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0210 	bic.w	r2, r2, #16
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e007      	b.n	8005b18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0210 	orr.w	r2, r2, #16
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7f1b      	ldrb	r3, [r3, #28]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d108      	bne.n	8005b32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e007      	b.n	8005b42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0208 	bic.w	r2, r2, #8
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7f5b      	ldrb	r3, [r3, #29]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d108      	bne.n	8005b5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0204 	orr.w	r2, r2, #4
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e007      	b.n	8005b6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0204 	bic.w	r2, r2, #4
 8005b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	ea42 0103 	orr.w	r1, r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	1e5a      	subs	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bbc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d003      	beq.n	8005bcc <HAL_CAN_ConfigFilter+0x20>
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	f040 80be 	bne.w	8005d48 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005bcc:	4b65      	ldr	r3, [pc, #404]	@ (8005d64 <HAL_CAN_ConfigFilter+0x1b8>)
 8005bce:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005bd6:	f043 0201 	orr.w	r2, r3, #1
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005be6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	401a      	ands	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d123      	bne.n	8005c76 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	401a      	ands	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3248      	adds	r2, #72	@ 0x48
 8005c56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c6c:	6939      	ldr	r1, [r7, #16]
 8005c6e:	3348      	adds	r3, #72	@ 0x48
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	440b      	add	r3, r1
 8005c74:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d122      	bne.n	8005cc4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3248      	adds	r2, #72	@ 0x48
 8005ca4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005cb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005cba:	6939      	ldr	r1, [r7, #16]
 8005cbc:	3348      	adds	r3, #72	@ 0x48
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005cde:	e007      	b.n	8005cf0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005d0a:	e007      	b.n	8005d1c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e006      	b.n	8005d56 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40006400 	.word	0x40006400

08005d68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d12e      	bne.n	8005dda <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d94:	f7ff f926 	bl	8004fe4 <HAL_GetTick>
 8005d98:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d9a:	e012      	b.n	8005dc2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d9c:	f7ff f922 	bl	8004fe4 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b0a      	cmp	r3, #10
 8005da8:	d90b      	bls.n	8005dc2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2205      	movs	r2, #5
 8005dba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e012      	b.n	8005de8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e006      	b.n	8005de8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	@ 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e0e:	7ffb      	ldrb	r3, [r7, #31]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d003      	beq.n	8005e1c <HAL_CAN_AddTxMessage+0x2c>
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	f040 80ad 	bne.w	8005f76 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8095 	beq.w	8005f66 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	0e1b      	lsrs	r3, r3, #24
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005e46:	2201      	movs	r2, #1
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10d      	bne.n	8005e74 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	6809      	ldr	r1, [r1, #0]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3318      	adds	r3, #24
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	440b      	add	r3, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e00f      	b.n	8005e94 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005e88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	440b      	add	r3, r1
 8005e92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6819      	ldr	r1, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	3318      	adds	r3, #24
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	7d1b      	ldrb	r3, [r3, #20]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d111      	bne.n	8005ed4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	6811      	ldr	r1, [r2, #0]
 8005ec4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	440b      	add	r3, r1
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3307      	adds	r3, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	061a      	lsls	r2, r3, #24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3306      	adds	r3, #6
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3305      	adds	r3, #5
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	3204      	adds	r2, #4
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	6811      	ldr	r1, [r2, #0]
 8005efc:	ea43 0200 	orr.w	r2, r3, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	440b      	add	r3, r1
 8005f06:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005f0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3303      	adds	r3, #3
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	061a      	lsls	r2, r3, #24
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3302      	adds	r3, #2
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3301      	adds	r3, #1
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	4313      	orrs	r3, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7812      	ldrb	r2, [r2, #0]
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	ea43 0200 	orr.w	r2, r3, r0
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	440b      	add	r3, r1
 8005f3c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005f40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	3318      	adds	r3, #24
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	4413      	add	r3, r2
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	6811      	ldr	r1, [r2, #0]
 8005f54:	f043 0201 	orr.w	r2, r3, #1
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	440b      	add	r3, r1
 8005f60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e00e      	b.n	8005f84 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e006      	b.n	8005f84 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3724      	adds	r7, #36	@ 0x24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fa4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d003      	beq.n	8005fb4 <HAL_CAN_GetRxMessage+0x24>
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	f040 8103 	bne.w	80061ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0f7      	b.n	80061c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e0e8      	b.n	80061c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	331b      	adds	r3, #27
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0204 	and.w	r2, r3, #4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	331b      	adds	r3, #27
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	4413      	add	r3, r2
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	0d5b      	lsrs	r3, r3, #21
 8006024:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e00b      	b.n	8006046 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	331b      	adds	r3, #27
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	331b      	adds	r3, #27
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4413      	add	r3, r2
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0202 	and.w	r2, r3, #2
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	331b      	adds	r3, #27
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	4413      	add	r3, r2
 8006068:	3304      	adds	r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2208      	movs	r2, #8
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	e00b      	b.n	8006094 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	331b      	adds	r3, #27
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	3304      	adds	r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	331b      	adds	r3, #27
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	331b      	adds	r3, #27
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	0a1a      	lsrs	r2, r3, #8
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	0c1a      	lsrs	r2, r3, #16
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3302      	adds	r3, #2
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	4413      	add	r3, r2
 8006118:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	0e1a      	lsrs	r2, r3, #24
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3303      	adds	r3, #3
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	3304      	adds	r3, #4
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	4413      	add	r3, r2
 800614a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	0a1a      	lsrs	r2, r3, #8
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	3305      	adds	r3, #5
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	4413      	add	r3, r2
 8006164:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	0c1a      	lsrs	r2, r3, #16
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	3306      	adds	r3, #6
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	4413      	add	r3, r2
 800617e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0e1a      	lsrs	r2, r3, #24
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	3307      	adds	r3, #7
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0220 	orr.w	r2, r2, #32
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	e007      	b.n	80061b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0220 	orr.w	r2, r2, #32
 80061b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e006      	b.n	80061c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061e8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d002      	beq.n	80061f6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d10f      	bne.n	8006216 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e005      	b.n	8006216 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006234:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d002      	beq.n	8006242 <HAL_CAN_ActivateNotification+0x1e>
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d109      	bne.n	8006256 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6959      	ldr	r1, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e006      	b.n	8006264 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006278:	2300      	movs	r3, #0
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d07c      	beq.n	80063b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d023      	beq.n	8006308 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f983 	bl	80065de <HAL_CAN_TxMailbox0CompleteCallback>
 80062d8:	e016      	b.n	8006308 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ec:	e00c      	b.n	8006308 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006300:	e002      	b.n	8006308 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f989 	bl	800661a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d024      	beq.n	800635c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800631a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f963 	bl	80065f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800632c:	e016      	b.n	800635c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006340:	e00c      	b.n	800635c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
 8006354:	e002      	b.n	800635c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f969 	bl	800662e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d024      	beq.n	80063b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800636e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f943 	bl	8006606 <HAL_CAN_TxMailbox2CompleteCallback>
 8006380:	e016      	b.n	80063b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
 8006394:	e00c      	b.n	80063b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a8:	e002      	b.n	80063b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f949 	bl	8006642 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2210      	movs	r2, #16
 80063d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2208      	movs	r2, #8
 80063ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f930 	bl	8006656 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb fec0 	bl	8002194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2210      	movs	r2, #16
 8006436:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2208      	movs	r2, #8
 8006452:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f912 	bl	800667e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8f9 	bl	800666a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d006      	beq.n	800649a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2210      	movs	r2, #16
 8006492:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f8fc 	bl	8006692 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2208      	movs	r2, #8
 80064b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8f5 	bl	80066a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d07b      	beq.n	80065be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d072      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	f043 0302 	orr.w	r3, r3, #2
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800652a:	2b00      	cmp	r3, #0
 800652c:	d043      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006534:	2b00      	cmp	r3, #0
 8006536:	d03e      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800653e:	2b60      	cmp	r3, #96	@ 0x60
 8006540:	d02b      	beq.n	800659a <HAL_CAN_IRQHandler+0x32a>
 8006542:	2b60      	cmp	r3, #96	@ 0x60
 8006544:	d82e      	bhi.n	80065a4 <HAL_CAN_IRQHandler+0x334>
 8006546:	2b50      	cmp	r3, #80	@ 0x50
 8006548:	d022      	beq.n	8006590 <HAL_CAN_IRQHandler+0x320>
 800654a:	2b50      	cmp	r3, #80	@ 0x50
 800654c:	d82a      	bhi.n	80065a4 <HAL_CAN_IRQHandler+0x334>
 800654e:	2b40      	cmp	r3, #64	@ 0x40
 8006550:	d019      	beq.n	8006586 <HAL_CAN_IRQHandler+0x316>
 8006552:	2b40      	cmp	r3, #64	@ 0x40
 8006554:	d826      	bhi.n	80065a4 <HAL_CAN_IRQHandler+0x334>
 8006556:	2b30      	cmp	r3, #48	@ 0x30
 8006558:	d010      	beq.n	800657c <HAL_CAN_IRQHandler+0x30c>
 800655a:	2b30      	cmp	r3, #48	@ 0x30
 800655c:	d822      	bhi.n	80065a4 <HAL_CAN_IRQHandler+0x334>
 800655e:	2b10      	cmp	r3, #16
 8006560:	d002      	beq.n	8006568 <HAL_CAN_IRQHandler+0x2f8>
 8006562:	2b20      	cmp	r3, #32
 8006564:	d005      	beq.n	8006572 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006566:	e01d      	b.n	80065a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	f043 0308 	orr.w	r3, r3, #8
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006570:	e019      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	f043 0310 	orr.w	r3, r3, #16
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800657a:	e014      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	f043 0320 	orr.w	r3, r3, #32
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006584:	e00f      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800658e:	e00a      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006598:	e005      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80065a2:	e000      	b.n	80065a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80065a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80065b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2204      	movs	r2, #4
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f872 	bl	80066ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80065d6:	bf00      	nop
 80065d8:	3728      	adds	r7, #40	@ 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <__NVIC_SetPriorityGrouping+0x44>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066ec:	4013      	ands	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006702:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <__NVIC_SetPriorityGrouping+0x44>)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	60d3      	str	r3, [r2, #12]
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	e000ed00 	.word	0xe000ed00

08006718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__NVIC_GetPriorityGrouping+0x18>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	f003 0307 	and.w	r3, r3, #7
}
 8006726:	4618      	mov	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000ed00 	.word	0xe000ed00

08006734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	db0b      	blt.n	800675e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	f003 021f 	and.w	r2, r3, #31
 800674c:	4907      	ldr	r1, [pc, #28]	@ (800676c <__NVIC_EnableIRQ+0x38>)
 800674e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	2001      	movs	r0, #1
 8006756:	fa00 f202 	lsl.w	r2, r0, r2
 800675a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	e000e100 	.word	0xe000e100

08006770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800677c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db0a      	blt.n	800679a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	490c      	ldr	r1, [pc, #48]	@ (80067bc <__NVIC_SetPriority+0x4c>)
 800678a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	440b      	add	r3, r1
 8006794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006798:	e00a      	b.n	80067b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	4908      	ldr	r1, [pc, #32]	@ (80067c0 <__NVIC_SetPriority+0x50>)
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	3b04      	subs	r3, #4
 80067a8:	0112      	lsls	r2, r2, #4
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	440b      	add	r3, r1
 80067ae:	761a      	strb	r2, [r3, #24]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	e000e100 	.word	0xe000e100
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b089      	sub	sp, #36	@ 0x24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f1c3 0307 	rsb	r3, r3, #7
 80067de:	2b04      	cmp	r3, #4
 80067e0:	bf28      	it	cs
 80067e2:	2304      	movcs	r3, #4
 80067e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3304      	adds	r3, #4
 80067ea:	2b06      	cmp	r3, #6
 80067ec:	d902      	bls.n	80067f4 <NVIC_EncodePriority+0x30>
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3b03      	subs	r3, #3
 80067f2:	e000      	b.n	80067f6 <NVIC_EncodePriority+0x32>
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	43da      	mvns	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	401a      	ands	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800680c:	f04f 31ff 	mov.w	r1, #4294967295
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	43d9      	mvns	r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800681c:	4313      	orrs	r3, r2
         );
}
 800681e:	4618      	mov	r0, r3
 8006820:	3724      	adds	r7, #36	@ 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3b01      	subs	r3, #1
 8006838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683c:	d301      	bcc.n	8006842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800683e:	2301      	movs	r3, #1
 8006840:	e00f      	b.n	8006862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006842:	4a0a      	ldr	r2, [pc, #40]	@ (800686c <SysTick_Config+0x40>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3b01      	subs	r3, #1
 8006848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800684a:	210f      	movs	r1, #15
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	f7ff ff8e 	bl	8006770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <SysTick_Config+0x40>)
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <SysTick_Config+0x40>)
 800685c:	2207      	movs	r2, #7
 800685e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	e000e010 	.word	0xe000e010

08006870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff ff29 	bl	80066d0 <__NVIC_SetPriorityGrouping>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	4603      	mov	r3, r0
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006898:	f7ff ff3e 	bl	8006718 <__NVIC_GetPriorityGrouping>
 800689c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	f7ff ff8e 	bl	80067c4 <NVIC_EncodePriority>
 80068a8:	4602      	mov	r2, r0
 80068aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff ff5d 	bl	8006770 <__NVIC_SetPriority>
}
 80068b6:	bf00      	nop
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	4603      	mov	r3, r0
 80068c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff ff31 	bl	8006734 <__NVIC_EnableIRQ>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff ffa2 	bl	800682c <SysTick_Config>
 80068e8:	4603      	mov	r3, r0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e00e      	b.n	8006922 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	795b      	ldrb	r3, [r3, #5]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fd fa43 	bl	8003da0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006936:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006938:	f7fe fb54 	bl	8004fe4 <HAL_GetTick>
 800693c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d008      	beq.n	800695c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2280      	movs	r2, #128	@ 0x80
 800694e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e052      	b.n	8006a02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0216 	bic.w	r2, r2, #22
 800696a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800697a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <HAL_DMA_Abort+0x62>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0208 	bic.w	r2, r2, #8
 800699a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069ac:	e013      	b.n	80069d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069ae:	f7fe fb19 	bl	8004fe4 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b05      	cmp	r3, #5
 80069ba:	d90c      	bls.n	80069d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e015      	b.n	8006a02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e4      	bne.n	80069ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e8:	223f      	movs	r2, #63	@ 0x3f
 80069ea:	409a      	lsls	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2280      	movs	r2, #128	@ 0x80
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e00c      	b.n	8006a42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b089      	sub	sp, #36	@ 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	e16b      	b.n	8006d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	f040 815a 	bne.w	8006d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d005      	beq.n	8006aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d130      	bne.n	8006b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	2203      	movs	r2, #3
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ad8:	2201      	movs	r2, #1
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 0201 	and.w	r2, r3, #1
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	fa02 f303 	lsl.w	r3, r2, r3
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 0303 	and.w	r3, r3, #3
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d017      	beq.n	8006b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d123      	bne.n	8006b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	08da      	lsrs	r2, r3, #3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3208      	adds	r2, #8
 8006b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	220f      	movs	r2, #15
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	08da      	lsrs	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3208      	adds	r2, #8
 8006b8e:	69b9      	ldr	r1, [r7, #24]
 8006b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 0203 	and.w	r2, r3, #3
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80b4 	beq.w	8006d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	4b60      	ldr	r3, [pc, #384]	@ (8006d5c <HAL_GPIO_Init+0x30c>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	4a5f      	ldr	r2, [pc, #380]	@ (8006d5c <HAL_GPIO_Init+0x30c>)
 8006be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006be6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d5c <HAL_GPIO_Init+0x30c>)
 8006be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8006d60 <HAL_GPIO_Init+0x310>)
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	220f      	movs	r2, #15
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4013      	ands	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a52      	ldr	r2, [pc, #328]	@ (8006d64 <HAL_GPIO_Init+0x314>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02b      	beq.n	8006c76 <HAL_GPIO_Init+0x226>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a51      	ldr	r2, [pc, #324]	@ (8006d68 <HAL_GPIO_Init+0x318>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d025      	beq.n	8006c72 <HAL_GPIO_Init+0x222>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a50      	ldr	r2, [pc, #320]	@ (8006d6c <HAL_GPIO_Init+0x31c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01f      	beq.n	8006c6e <HAL_GPIO_Init+0x21e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a4f      	ldr	r2, [pc, #316]	@ (8006d70 <HAL_GPIO_Init+0x320>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d019      	beq.n	8006c6a <HAL_GPIO_Init+0x21a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a4e      	ldr	r2, [pc, #312]	@ (8006d74 <HAL_GPIO_Init+0x324>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_GPIO_Init+0x216>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a4d      	ldr	r2, [pc, #308]	@ (8006d78 <HAL_GPIO_Init+0x328>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00d      	beq.n	8006c62 <HAL_GPIO_Init+0x212>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a4c      	ldr	r2, [pc, #304]	@ (8006d7c <HAL_GPIO_Init+0x32c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <HAL_GPIO_Init+0x20e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a4b      	ldr	r2, [pc, #300]	@ (8006d80 <HAL_GPIO_Init+0x330>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d101      	bne.n	8006c5a <HAL_GPIO_Init+0x20a>
 8006c56:	2307      	movs	r3, #7
 8006c58:	e00e      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	e00c      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c5e:	2306      	movs	r3, #6
 8006c60:	e00a      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c62:	2305      	movs	r3, #5
 8006c64:	e008      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c66:	2304      	movs	r3, #4
 8006c68:	e006      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e004      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e002      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <HAL_GPIO_Init+0x228>
 8006c76:	2300      	movs	r3, #0
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	f002 0203 	and.w	r2, r2, #3
 8006c7e:	0092      	lsls	r2, r2, #2
 8006c80:	4093      	lsls	r3, r2
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c88:	4935      	ldr	r1, [pc, #212]	@ (8006d60 <HAL_GPIO_Init+0x310>)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	089b      	lsrs	r3, r3, #2
 8006c8e:	3302      	adds	r3, #2
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c96:	4b3b      	ldr	r3, [pc, #236]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cba:	4a32      	ldr	r2, [pc, #200]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cc0:	4b30      	ldr	r3, [pc, #192]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ce4:	4a27      	ldr	r2, [pc, #156]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006cea:	4b26      	ldr	r3, [pc, #152]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d14:	4b1b      	ldr	r3, [pc, #108]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4013      	ands	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d38:	4a12      	ldr	r2, [pc, #72]	@ (8006d84 <HAL_GPIO_Init+0x334>)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	3301      	adds	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	f67f ae90 	bls.w	8006a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	3724      	adds	r7, #36	@ 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40013800 	.word	0x40013800
 8006d64:	40020000 	.word	0x40020000
 8006d68:	40020400 	.word	0x40020400
 8006d6c:	40020800 	.word	0x40020800
 8006d70:	40020c00 	.word	0x40020c00
 8006d74:	40021000 	.word	0x40021000
 8006d78:	40021400 	.word	0x40021400
 8006d7c:	40021800 	.word	0x40021800
 8006d80:	40021c00 	.word	0x40021c00
 8006d84:	40013c00 	.word	0x40013c00

08006d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	807b      	strh	r3, [r7, #2]
 8006d94:	4613      	mov	r3, r2
 8006d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d98:	787b      	ldrb	r3, [r7, #1]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d9e:	887a      	ldrh	r2, [r7, #2]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006da4:	e003      	b.n	8006dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006da6:	887b      	ldrh	r3, [r7, #2]
 8006da8:	041a      	lsls	r2, r3, #16
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	619a      	str	r2, [r3, #24]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e12b      	b.n	8007026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fc fffe 	bl	8003de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2224      	movs	r2, #36	@ 0x24
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e20:	f001 fde0 	bl	80089e4 <HAL_RCC_GetPCLK1Freq>
 8006e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4a81      	ldr	r2, [pc, #516]	@ (8007030 <HAL_I2C_Init+0x274>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d807      	bhi.n	8006e40 <HAL_I2C_Init+0x84>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a80      	ldr	r2, [pc, #512]	@ (8007034 <HAL_I2C_Init+0x278>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	bf94      	ite	ls
 8006e38:	2301      	movls	r3, #1
 8006e3a:	2300      	movhi	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e006      	b.n	8006e4e <HAL_I2C_Init+0x92>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a7d      	ldr	r2, [pc, #500]	@ (8007038 <HAL_I2C_Init+0x27c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bf94      	ite	ls
 8006e48:	2301      	movls	r3, #1
 8006e4a:	2300      	movhi	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0e7      	b.n	8007026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a78      	ldr	r2, [pc, #480]	@ (800703c <HAL_I2C_Init+0x280>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	0c9b      	lsrs	r3, r3, #18
 8006e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	4a6a      	ldr	r2, [pc, #424]	@ (8007030 <HAL_I2C_Init+0x274>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d802      	bhi.n	8006e90 <HAL_I2C_Init+0xd4>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	e009      	b.n	8006ea4 <HAL_I2C_Init+0xe8>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	4a69      	ldr	r2, [pc, #420]	@ (8007040 <HAL_I2C_Init+0x284>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006eb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	495c      	ldr	r1, [pc, #368]	@ (8007030 <HAL_I2C_Init+0x274>)
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	d819      	bhi.n	8006ef8 <HAL_I2C_Init+0x13c>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	1e59      	subs	r1, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ed2:	1c59      	adds	r1, r3, #1
 8006ed4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ed8:	400b      	ands	r3, r1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_I2C_Init+0x138>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1e59      	subs	r1, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eec:	3301      	adds	r3, #1
 8006eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef2:	e051      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	e04f      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d111      	bne.n	8006f24 <HAL_I2C_Init+0x168>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	1e58      	subs	r0, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6859      	ldr	r1, [r3, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	440b      	add	r3, r1
 8006f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f12:	3301      	adds	r3, #1
 8006f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e012      	b.n	8006f4a <HAL_I2C_Init+0x18e>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	1e58      	subs	r0, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	0099      	lsls	r1, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf0c      	ite	eq
 8006f44:	2301      	moveq	r3, #1
 8006f46:	2300      	movne	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_I2C_Init+0x196>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e022      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <HAL_I2C_Init+0x1bc>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1e58      	subs	r0, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6859      	ldr	r1, [r3, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	440b      	add	r3, r1
 8006f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f76:	e00f      	b.n	8006f98 <HAL_I2C_Init+0x1dc>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1e58      	subs	r0, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	0099      	lsls	r1, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f8e:	3301      	adds	r3, #1
 8006f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	6809      	ldr	r1, [r1, #0]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006fc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6911      	ldr	r1, [r2, #16]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68d2      	ldr	r2, [r2, #12]
 8006fd2:	4311      	orrs	r1, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	000186a0 	.word	0x000186a0
 8007034:	001e847f 	.word	0x001e847f
 8007038:	003d08ff 	.word	0x003d08ff
 800703c:	431bde83 	.word	0x431bde83
 8007040:	10624dd3 	.word	0x10624dd3

08007044 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	461a      	mov	r2, r3
 8007050:	460b      	mov	r3, r1
 8007052:	817b      	strh	r3, [r7, #10]
 8007054:	4613      	mov	r3, r2
 8007056:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007058:	f7fd ffc4 	bl	8004fe4 <HAL_GetTick>
 800705c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b20      	cmp	r3, #32
 8007068:	f040 80e0 	bne.w	800722c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2319      	movs	r3, #25
 8007072:	2201      	movs	r2, #1
 8007074:	4970      	ldr	r1, [pc, #448]	@ (8007238 <HAL_I2C_Master_Transmit+0x1f4>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fe0e 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
 8007084:	e0d3      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_I2C_Master_Transmit+0x50>
 8007090:	2302      	movs	r3, #2
 8007092:	e0cc      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d007      	beq.n	80070ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2221      	movs	r2, #33	@ 0x21
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2210      	movs	r2, #16
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	893a      	ldrh	r2, [r7, #8]
 80070ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a50      	ldr	r2, [pc, #320]	@ (800723c <HAL_I2C_Master_Transmit+0x1f8>)
 80070fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070fc:	8979      	ldrh	r1, [r7, #10]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fbc8 	bl	8007898 <I2C_MasterRequestWrite>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e08d      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007128:	e066      	b.n	80071f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	6a39      	ldr	r1, [r7, #32]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fecc 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	2b04      	cmp	r3, #4
 8007140:	d107      	bne.n	8007152 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e06b      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	781a      	ldrb	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d11b      	bne.n	80071cc <HAL_I2C_Master_Transmit+0x188>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fec3 	bl	8007f5c <I2C_WaitOnBTFFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d107      	bne.n	80071f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e01a      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d194      	bne.n	800712a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	00100002 	.word	0x00100002
 800723c:	ffff0000 	.word	0xffff0000

08007240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800725a:	f7fd fec3 	bl	8004fe4 <HAL_GetTick>
 800725e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	f040 80d9 	bne.w	8007420 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2319      	movs	r3, #25
 8007274:	2201      	movs	r2, #1
 8007276:	496d      	ldr	r1, [pc, #436]	@ (800742c <HAL_I2C_Mem_Write+0x1ec>)
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fd0d 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
 8007286:	e0cc      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_I2C_Mem_Write+0x56>
 8007292:	2302      	movs	r3, #2
 8007294:	e0c5      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d007      	beq.n	80072bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2221      	movs	r2, #33	@ 0x21
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a4d      	ldr	r2, [pc, #308]	@ (8007430 <HAL_I2C_Mem_Write+0x1f0>)
 80072fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072fe:	88f8      	ldrh	r0, [r7, #6]
 8007300:	893a      	ldrh	r2, [r7, #8]
 8007302:	8979      	ldrh	r1, [r7, #10]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4603      	mov	r3, r0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fb44 	bl	800799c <I2C_RequestMemoryWrite>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d052      	beq.n	80073c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e081      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fdd2 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	2b04      	cmp	r3, #4
 8007334:	d107      	bne.n	8007346 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e06b      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	781a      	ldrb	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d11b      	bne.n	80073c0 <HAL_I2C_Mem_Write+0x180>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738c:	2b00      	cmp	r3, #0
 800738e:	d017      	beq.n	80073c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	781a      	ldrb	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1aa      	bne.n	800731e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fdc5 	bl	8007f5c <I2C_WaitOnBTFFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00d      	beq.n	80073f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d107      	bne.n	80073f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e016      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	00100002 	.word	0x00100002
 8007430:	ffff0000 	.word	0xffff0000

08007434 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08c      	sub	sp, #48	@ 0x30
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	461a      	mov	r2, r3
 8007442:	4603      	mov	r3, r0
 8007444:	817b      	strh	r3, [r7, #10]
 8007446:	460b      	mov	r3, r1
 8007448:	813b      	strh	r3, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800744e:	f7fd fdc9 	bl	8004fe4 <HAL_GetTick>
 8007452:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b20      	cmp	r3, #32
 800745e:	f040 8214 	bne.w	800788a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	2319      	movs	r3, #25
 8007468:	2201      	movs	r2, #1
 800746a:	497b      	ldr	r1, [pc, #492]	@ (8007658 <HAL_I2C_Mem_Read+0x224>)
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fc13 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
 800747a:	e207      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_I2C_Mem_Read+0x56>
 8007486:	2302      	movs	r3, #2
 8007488:	e200      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d007      	beq.n	80074b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2222      	movs	r2, #34	@ 0x22
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2240      	movs	r2, #64	@ 0x40
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80074e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a5b      	ldr	r2, [pc, #364]	@ (800765c <HAL_I2C_Mem_Read+0x228>)
 80074f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074f2:	88f8      	ldrh	r0, [r7, #6]
 80074f4:	893a      	ldrh	r2, [r7, #8]
 80074f6:	8979      	ldrh	r1, [r7, #10]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4603      	mov	r3, r0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fae0 	bl	8007ac8 <I2C_RequestMemoryRead>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e1bc      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d113      	bne.n	8007542 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751a:	2300      	movs	r3, #0
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	e190      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007546:	2b01      	cmp	r3, #1
 8007548:	d11b      	bne.n	8007582 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e170      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007586:	2b02      	cmp	r3, #2
 8007588:	d11b      	bne.n	80075c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	e150      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075d8:	e144      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075de:	2b03      	cmp	r3, #3
 80075e0:	f200 80f1 	bhi.w	80077c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d123      	bne.n	8007634 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fcfb 	bl	8007fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e145      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007632:	e117      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007638:	2b02      	cmp	r3, #2
 800763a:	d14e      	bne.n	80076da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	2200      	movs	r2, #0
 8007644:	4906      	ldr	r1, [pc, #24]	@ (8007660 <HAL_I2C_Mem_Read+0x22c>)
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fb26 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e11a      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
 8007656:	bf00      	nop
 8007658:	00100002 	.word	0x00100002
 800765c:	ffff0000 	.word	0xffff0000
 8007660:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076d8:	e0c4      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	2200      	movs	r2, #0
 80076e2:	496c      	ldr	r1, [pc, #432]	@ (8007894 <HAL_I2C_Mem_Read+0x460>)
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fad7 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0cb      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773c:	2200      	movs	r2, #0
 800773e:	4955      	ldr	r1, [pc, #340]	@ (8007894 <HAL_I2C_Mem_Read+0x460>)
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 faa9 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e09d      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800775e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077c4:	e04e      	b.n	8007864 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fc0e 	bl	8007fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e058      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b04      	cmp	r3, #4
 8007818:	d124      	bne.n	8007864 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800781e:	2b03      	cmp	r3, #3
 8007820:	d107      	bne.n	8007832 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007830:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f aeb6 	bne.w	80075da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	e000      	b.n	800788c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800788a:	2302      	movs	r3, #2
  }
}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	@ 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	00010004 	.word	0x00010004

08007898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	460b      	mov	r3, r1
 80078a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d006      	beq.n	80078c2 <I2C_MasterRequestWrite+0x2a>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d003      	beq.n	80078c2 <I2C_MasterRequestWrite+0x2a>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078c0:	d108      	bne.n	80078d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e00b      	b.n	80078ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d8:	2b12      	cmp	r3, #18
 80078da:	d107      	bne.n	80078ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f9cd 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00d      	beq.n	8007920 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	d103      	bne.n	800791c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800791a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e035      	b.n	800798c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007928:	d108      	bne.n	800793c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800792a:	897b      	ldrh	r3, [r7, #10]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007938:	611a      	str	r2, [r3, #16]
 800793a:	e01b      	b.n	8007974 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800793c:	897b      	ldrh	r3, [r7, #10]
 800793e:	11db      	asrs	r3, r3, #7
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0306 	and.w	r3, r3, #6
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f063 030f 	orn	r3, r3, #15
 800794c:	b2da      	uxtb	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	490e      	ldr	r1, [pc, #56]	@ (8007994 <I2C_MasterRequestWrite+0xfc>)
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 fa16 	bl	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e010      	b.n	800798c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4907      	ldr	r1, [pc, #28]	@ (8007998 <I2C_MasterRequestWrite+0x100>)
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fa06 	bl	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	00010008 	.word	0x00010008
 8007998:	00010002 	.word	0x00010002

0800799c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	817b      	strh	r3, [r7, #10]
 80079ae:	460b      	mov	r3, r1
 80079b0:	813b      	strh	r3, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f960 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00d      	beq.n	80079fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ec:	d103      	bne.n	80079f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e05f      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079fa:	897b      	ldrh	r3, [r7, #10]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	492d      	ldr	r1, [pc, #180]	@ (8007ac4 <I2C_RequestMemoryWrite+0x128>)
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f9bb 	bl	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e04c      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a38:	6a39      	ldr	r1, [r7, #32]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fa46 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d107      	bne.n	8007a5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e02b      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	611a      	str	r2, [r3, #16]
 8007a72:	e021      	b.n	8007ab8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a74:	893b      	ldrh	r3, [r7, #8]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a84:	6a39      	ldr	r1, [r7, #32]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa20 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00d      	beq.n	8007aae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d107      	bne.n	8007aaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e005      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aae:	893b      	ldrh	r3, [r7, #8]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	00010002 	.word	0x00010002

08007ac8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	817b      	strh	r3, [r7, #10]
 8007ada:	460b      	mov	r3, r1
 8007adc:	813b      	strh	r3, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007af0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f8c2 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b28:	d103      	bne.n	8007b32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e0aa      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	4952      	ldr	r1, [pc, #328]	@ (8007c94 <I2C_RequestMemoryRead+0x1cc>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f91d 	bl	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e097      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b74:	6a39      	ldr	r1, [r7, #32]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 f9a8 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d107      	bne.n	8007b9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e076      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d105      	bne.n	8007bb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	611a      	str	r2, [r3, #16]
 8007bae:	e021      	b.n	8007bf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc0:	6a39      	ldr	r1, [r7, #32]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f982 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d107      	bne.n	8007be6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e050      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bea:	893b      	ldrh	r3, [r7, #8]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf6:	6a39      	ldr	r1, [r7, #32]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f967 	bl	8007ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00d      	beq.n	8007c20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d107      	bne.n	8007c1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e035      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f82b 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c56:	d103      	bne.n	8007c60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e013      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c64:	897b      	ldrh	r3, [r7, #10]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	4906      	ldr	r1, [pc, #24]	@ (8007c94 <I2C_RequestMemoryRead+0x1cc>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f886 	bl	8007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	00010002 	.word	0x00010002

08007c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ca8:	e048      	b.n	8007d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d044      	beq.n	8007d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fd f997 	bl	8004fe4 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d139      	bne.n	8007d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	0c1b      	lsrs	r3, r3, #16
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10d      	bne.n	8007cee <I2C_WaitOnFlagUntilTimeout+0x56>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	43da      	mvns	r2, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2301      	moveq	r3, #1
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	e00c      	b.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	43da      	mvns	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d116      	bne.n	8007d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e023      	b.n	8007d84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10d      	bne.n	8007d62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	43da      	mvns	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4013      	ands	r3, r2
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	e00c      	b.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	43da      	mvns	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d093      	beq.n	8007caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d9a:	e071      	b.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007daa:	d123      	bne.n	8007df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de0:	f043 0204 	orr.w	r2, r3, #4
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e067      	b.n	8007ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d041      	beq.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfc:	f7fd f8f2 	bl	8004fe4 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d136      	bne.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d10c      	bne.n	8007e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	43da      	mvns	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	2300      	moveq	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	e00b      	b.n	8007e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	43da      	mvns	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bf14      	ite	ne
 8007e48:	2301      	movne	r3, #1
 8007e4a:	2300      	moveq	r3, #0
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e021      	b.n	8007ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d10c      	bne.n	8007ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	43da      	mvns	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4013      	ands	r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	e00b      	b.n	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	43da      	mvns	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f af6d 	bne.w	8007d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ed8:	e034      	b.n	8007f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f8e3 	bl	80080a6 <I2C_IsAcknowledgeFailed>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e034      	b.n	8007f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef0:	d028      	beq.n	8007f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef2:	f7fd f877 	bl	8004fe4 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d302      	bcc.n	8007f08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11d      	bne.n	8007f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f12:	2b80      	cmp	r3, #128	@ 0x80
 8007f14:	d016      	beq.n	8007f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	f043 0220 	orr.w	r2, r3, #32
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e007      	b.n	8007f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f4e:	2b80      	cmp	r3, #128	@ 0x80
 8007f50:	d1c3      	bne.n	8007eda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f68:	e034      	b.n	8007fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f89b 	bl	80080a6 <I2C_IsAcknowledgeFailed>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e034      	b.n	8007fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d028      	beq.n	8007fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fd f82f 	bl	8004fe4 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d016      	beq.n	8007fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	f043 0220 	orr.w	r2, r3, #32
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e007      	b.n	8007fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d1c3      	bne.n	8007f6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ff8:	e049      	b.n	800808e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b10      	cmp	r3, #16
 8008006:	d119      	bne.n	800803c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0210 	mvn.w	r2, #16
 8008010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e030      	b.n	800809e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803c:	f7fc ffd2 	bl	8004fe4 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d11d      	bne.n	800808e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b40      	cmp	r3, #64	@ 0x40
 800805e:	d016      	beq.n	800808e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	f043 0220 	orr.w	r2, r3, #32
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e007      	b.n	800809e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008098:	2b40      	cmp	r3, #64	@ 0x40
 800809a:	d1ae      	bne.n	8007ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080bc:	d11b      	bne.n	80080f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80080c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e2:	f043 0204 	orr.w	r2, r3, #4
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e267      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d075      	beq.n	800820e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008122:	4b88      	ldr	r3, [pc, #544]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b04      	cmp	r3, #4
 800812c:	d00c      	beq.n	8008148 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800812e:	4b85      	ldr	r3, [pc, #532]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008136:	2b08      	cmp	r3, #8
 8008138:	d112      	bne.n	8008160 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800813a:	4b82      	ldr	r3, [pc, #520]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008146:	d10b      	bne.n	8008160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008148:	4b7e      	ldr	r3, [pc, #504]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d05b      	beq.n	800820c <HAL_RCC_OscConfig+0x108>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d157      	bne.n	800820c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e242      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008168:	d106      	bne.n	8008178 <HAL_RCC_OscConfig+0x74>
 800816a:	4b76      	ldr	r3, [pc, #472]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a75      	ldr	r2, [pc, #468]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e01d      	b.n	80081b4 <HAL_RCC_OscConfig+0xb0>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008180:	d10c      	bne.n	800819c <HAL_RCC_OscConfig+0x98>
 8008182:	4b70      	ldr	r3, [pc, #448]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a6f      	ldr	r2, [pc, #444]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	4b6d      	ldr	r3, [pc, #436]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a6c      	ldr	r2, [pc, #432]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e00b      	b.n	80081b4 <HAL_RCC_OscConfig+0xb0>
 800819c:	4b69      	ldr	r3, [pc, #420]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a68      	ldr	r2, [pc, #416]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80081a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	4b66      	ldr	r3, [pc, #408]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a65      	ldr	r2, [pc, #404]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80081ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d013      	beq.n	80081e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081bc:	f7fc ff12 	bl	8004fe4 <HAL_GetTick>
 80081c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081c4:	f7fc ff0e 	bl	8004fe4 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b64      	cmp	r3, #100	@ 0x64
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e207      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d6:	4b5b      	ldr	r3, [pc, #364]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0f0      	beq.n	80081c4 <HAL_RCC_OscConfig+0xc0>
 80081e2:	e014      	b.n	800820e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e4:	f7fc fefe 	bl	8004fe4 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081ec:	f7fc fefa 	bl	8004fe4 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b64      	cmp	r3, #100	@ 0x64
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e1f3      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081fe:	4b51      	ldr	r3, [pc, #324]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f0      	bne.n	80081ec <HAL_RCC_OscConfig+0xe8>
 800820a:	e000      	b.n	800820e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800820c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d063      	beq.n	80082e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800821a:	4b4a      	ldr	r3, [pc, #296]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 030c 	and.w	r3, r3, #12
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008226:	4b47      	ldr	r3, [pc, #284]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800822e:	2b08      	cmp	r3, #8
 8008230:	d11c      	bne.n	800826c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008232:	4b44      	ldr	r3, [pc, #272]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d116      	bne.n	800826c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800823e:	4b41      	ldr	r3, [pc, #260]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_RCC_OscConfig+0x152>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d001      	beq.n	8008256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e1c7      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008256:	4b3b      	ldr	r3, [pc, #236]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4937      	ldr	r1, [pc, #220]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008266:	4313      	orrs	r3, r2
 8008268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826a:	e03a      	b.n	80082e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d020      	beq.n	80082b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008274:	4b34      	ldr	r3, [pc, #208]	@ (8008348 <HAL_RCC_OscConfig+0x244>)
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827a:	f7fc feb3 	bl	8004fe4 <HAL_GetTick>
 800827e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008282:	f7fc feaf 	bl	8004fe4 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e1a8      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008294:	4b2b      	ldr	r3, [pc, #172]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a0:	4b28      	ldr	r3, [pc, #160]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	4925      	ldr	r1, [pc, #148]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]
 80082b4:	e015      	b.n	80082e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b6:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <HAL_RCC_OscConfig+0x244>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fc fe92 	bl	8004fe4 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c4:	f7fc fe8e 	bl	8004fe4 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e187      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f0      	bne.n	80082c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d036      	beq.n	800835c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d016      	beq.n	8008324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082f6:	4b15      	ldr	r3, [pc, #84]	@ (800834c <HAL_RCC_OscConfig+0x248>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fc:	f7fc fe72 	bl	8004fe4 <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008304:	f7fc fe6e 	bl	8004fe4 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e167      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <HAL_RCC_OscConfig+0x240>)
 8008318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f0      	beq.n	8008304 <HAL_RCC_OscConfig+0x200>
 8008322:	e01b      	b.n	800835c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008324:	4b09      	ldr	r3, [pc, #36]	@ (800834c <HAL_RCC_OscConfig+0x248>)
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800832a:	f7fc fe5b 	bl	8004fe4 <HAL_GetTick>
 800832e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008330:	e00e      	b.n	8008350 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008332:	f7fc fe57 	bl	8004fe4 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d907      	bls.n	8008350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e150      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
 8008344:	40023800 	.word	0x40023800
 8008348:	42470000 	.word	0x42470000
 800834c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008350:	4b88      	ldr	r3, [pc, #544]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1ea      	bne.n	8008332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8097 	beq.w	8008498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800836e:	4b81      	ldr	r3, [pc, #516]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10f      	bne.n	800839a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800837a:	2300      	movs	r3, #0
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	4b7d      	ldr	r3, [pc, #500]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008382:	4a7c      	ldr	r2, [pc, #496]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008388:	6413      	str	r3, [r2, #64]	@ 0x40
 800838a:	4b7a      	ldr	r3, [pc, #488]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008392:	60bb      	str	r3, [r7, #8]
 8008394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008396:	2301      	movs	r3, #1
 8008398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800839a:	4b77      	ldr	r3, [pc, #476]	@ (8008578 <HAL_RCC_OscConfig+0x474>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d118      	bne.n	80083d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083a6:	4b74      	ldr	r3, [pc, #464]	@ (8008578 <HAL_RCC_OscConfig+0x474>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a73      	ldr	r2, [pc, #460]	@ (8008578 <HAL_RCC_OscConfig+0x474>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083b2:	f7fc fe17 	bl	8004fe4 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ba:	f7fc fe13 	bl	8004fe4 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e10c      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083cc:	4b6a      	ldr	r3, [pc, #424]	@ (8008578 <HAL_RCC_OscConfig+0x474>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d106      	bne.n	80083ee <HAL_RCC_OscConfig+0x2ea>
 80083e0:	4b64      	ldr	r3, [pc, #400]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80083e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e4:	4a63      	ldr	r2, [pc, #396]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ec:	e01c      	b.n	8008428 <HAL_RCC_OscConfig+0x324>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d10c      	bne.n	8008410 <HAL_RCC_OscConfig+0x30c>
 80083f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80083f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083fa:	4a5e      	ldr	r2, [pc, #376]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80083fc:	f043 0304 	orr.w	r3, r3, #4
 8008400:	6713      	str	r3, [r2, #112]	@ 0x70
 8008402:	4b5c      	ldr	r3, [pc, #368]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008406:	4a5b      	ldr	r2, [pc, #364]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6713      	str	r3, [r2, #112]	@ 0x70
 800840e:	e00b      	b.n	8008428 <HAL_RCC_OscConfig+0x324>
 8008410:	4b58      	ldr	r3, [pc, #352]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008414:	4a57      	ldr	r2, [pc, #348]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008416:	f023 0301 	bic.w	r3, r3, #1
 800841a:	6713      	str	r3, [r2, #112]	@ 0x70
 800841c:	4b55      	ldr	r3, [pc, #340]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008420:	4a54      	ldr	r2, [pc, #336]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008422:	f023 0304 	bic.w	r3, r3, #4
 8008426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d015      	beq.n	800845c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008430:	f7fc fdd8 	bl	8004fe4 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008436:	e00a      	b.n	800844e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008438:	f7fc fdd4 	bl	8004fe4 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e0cb      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800844e:	4b49      	ldr	r3, [pc, #292]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ee      	beq.n	8008438 <HAL_RCC_OscConfig+0x334>
 800845a:	e014      	b.n	8008486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800845c:	f7fc fdc2 	bl	8004fe4 <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008462:	e00a      	b.n	800847a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008464:	f7fc fdbe 	bl	8004fe4 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0b5      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800847a:	4b3e      	ldr	r3, [pc, #248]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800847c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1ee      	bne.n	8008464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d105      	bne.n	8008498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800848c:	4b39      	ldr	r3, [pc, #228]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	4a38      	ldr	r2, [pc, #224]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008496:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a1 	beq.w	80085e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084a2:	4b34      	ldr	r3, [pc, #208]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d05c      	beq.n	8008568 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d141      	bne.n	800853a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b6:	4b31      	ldr	r3, [pc, #196]	@ (800857c <HAL_RCC_OscConfig+0x478>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084bc:	f7fc fd92 	bl	8004fe4 <HAL_GetTick>
 80084c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084c2:	e008      	b.n	80084d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c4:	f7fc fd8e 	bl	8004fe4 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e087      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084d6:	4b27      	ldr	r3, [pc, #156]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f0      	bne.n	80084c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69da      	ldr	r2, [r3, #28]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f0:	019b      	lsls	r3, r3, #6
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	3b01      	subs	r3, #1
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	491b      	ldr	r1, [pc, #108]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 8008508:	4313      	orrs	r3, r2
 800850a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800850c:	4b1b      	ldr	r3, [pc, #108]	@ (800857c <HAL_RCC_OscConfig+0x478>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008512:	f7fc fd67 	bl	8004fe4 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800851a:	f7fc fd63 	bl	8004fe4 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e05c      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800852c:	4b11      	ldr	r3, [pc, #68]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <HAL_RCC_OscConfig+0x416>
 8008538:	e054      	b.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <HAL_RCC_OscConfig+0x478>)
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008540:	f7fc fd50 	bl	8004fe4 <HAL_GetTick>
 8008544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008548:	f7fc fd4c 	bl	8004fe4 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e045      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855a:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_RCC_OscConfig+0x470>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f0      	bne.n	8008548 <HAL_RCC_OscConfig+0x444>
 8008566:	e03d      	b.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d107      	bne.n	8008580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e038      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
 8008574:	40023800 	.word	0x40023800
 8008578:	40007000 	.word	0x40007000
 800857c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008580:	4b1b      	ldr	r3, [pc, #108]	@ (80085f0 <HAL_RCC_OscConfig+0x4ec>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d028      	beq.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008598:	429a      	cmp	r2, r3
 800859a:	d121      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d11a      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80085b0:	4013      	ands	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d111      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	085b      	lsrs	r3, r3, #1
 80085c8:	3b01      	subs	r3, #1
 80085ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d107      	bne.n	80085e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085dc:	429a      	cmp	r2, r3
 80085de:	d001      	beq.n	80085e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800

080085f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e0cc      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008608:	4b68      	ldr	r3, [pc, #416]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d90c      	bls.n	8008630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008616:	4b65      	ldr	r3, [pc, #404]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800861e:	4b63      	ldr	r3, [pc, #396]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d001      	beq.n	8008630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e0b8      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d020      	beq.n	800867e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008648:	4b59      	ldr	r3, [pc, #356]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4a58      	ldr	r2, [pc, #352]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008660:	4b53      	ldr	r3, [pc, #332]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4a52      	ldr	r2, [pc, #328]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800866a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866c:	4b50      	ldr	r3, [pc, #320]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	494d      	ldr	r1, [pc, #308]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	4313      	orrs	r3, r2
 800867c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d044      	beq.n	8008714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d107      	bne.n	80086a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008692:	4b47      	ldr	r3, [pc, #284]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d119      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e07f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d003      	beq.n	80086b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d107      	bne.n	80086c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086b2:	4b3f      	ldr	r3, [pc, #252]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e06f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c2:	4b3b      	ldr	r3, [pc, #236]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e067      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086d2:	4b37      	ldr	r3, [pc, #220]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f023 0203 	bic.w	r2, r3, #3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4934      	ldr	r1, [pc, #208]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086e4:	f7fc fc7e 	bl	8004fe4 <HAL_GetTick>
 80086e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ea:	e00a      	b.n	8008702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ec:	f7fc fc7a 	bl	8004fe4 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e04f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008702:	4b2b      	ldr	r3, [pc, #172]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 020c 	and.w	r2, r3, #12
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	429a      	cmp	r2, r3
 8008712:	d1eb      	bne.n	80086ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	4b25      	ldr	r3, [pc, #148]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d20c      	bcs.n	800873c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b22      	ldr	r3, [pc, #136]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800872a:	4b20      	ldr	r3, [pc, #128]	@ (80087ac <HAL_RCC_ClockConfig+0x1b8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d001      	beq.n	800873c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e032      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008748:	4b19      	ldr	r3, [pc, #100]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4916      	ldr	r1, [pc, #88]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008766:	4b12      	ldr	r3, [pc, #72]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	490e      	ldr	r1, [pc, #56]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	4313      	orrs	r3, r2
 8008778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800877a:	f000 f821 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 800877e:	4602      	mov	r2, r0
 8008780:	4b0b      	ldr	r3, [pc, #44]	@ (80087b0 <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	490a      	ldr	r1, [pc, #40]	@ (80087b4 <HAL_RCC_ClockConfig+0x1c0>)
 800878c:	5ccb      	ldrb	r3, [r1, r3]
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	4a09      	ldr	r2, [pc, #36]	@ (80087b8 <HAL_RCC_ClockConfig+0x1c4>)
 8008794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008796:	4b09      	ldr	r3, [pc, #36]	@ (80087bc <HAL_RCC_ClockConfig+0x1c8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7fc fbde 	bl	8004f5c <HAL_InitTick>

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40023c00 	.word	0x40023c00
 80087b0:	40023800 	.word	0x40023800
 80087b4:	0800f8f0 	.word	0x0800f8f0
 80087b8:	200000f8 	.word	0x200000f8
 80087bc:	20000134 	.word	0x20000134

080087c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c4:	b094      	sub	sp, #80	@ 0x50
 80087c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d8:	4b79      	ldr	r3, [pc, #484]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 030c 	and.w	r3, r3, #12
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d00d      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x40>
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	f200 80e1 	bhi.w	80089ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <HAL_RCC_GetSysClockFreq+0x34>
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d003      	beq.n	80087fa <HAL_RCC_GetSysClockFreq+0x3a>
 80087f2:	e0db      	b.n	80089ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087f4:	4b73      	ldr	r3, [pc, #460]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80087f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087f8:	e0db      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087fa:	4b73      	ldr	r3, [pc, #460]	@ (80089c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80087fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087fe:	e0d8      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008800:	4b6f      	ldr	r3, [pc, #444]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008808:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800880a:	4b6d      	ldr	r3, [pc, #436]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d063      	beq.n	80088de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008816:	4b6a      	ldr	r3, [pc, #424]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	099b      	lsrs	r3, r3, #6
 800881c:	2200      	movs	r2, #0
 800881e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008820:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008828:	633b      	str	r3, [r7, #48]	@ 0x30
 800882a:	2300      	movs	r3, #0
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
 800882e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f04f 0000 	mov.w	r0, #0
 800883a:	f04f 0100 	mov.w	r1, #0
 800883e:	0159      	lsls	r1, r3, #5
 8008840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008844:	0150      	lsls	r0, r2, #5
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4621      	mov	r1, r4
 800884c:	1a51      	subs	r1, r2, r1
 800884e:	6139      	str	r1, [r7, #16]
 8008850:	4629      	mov	r1, r5
 8008852:	eb63 0301 	sbc.w	r3, r3, r1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008864:	4659      	mov	r1, fp
 8008866:	018b      	lsls	r3, r1, #6
 8008868:	4651      	mov	r1, sl
 800886a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800886e:	4651      	mov	r1, sl
 8008870:	018a      	lsls	r2, r1, #6
 8008872:	4651      	mov	r1, sl
 8008874:	ebb2 0801 	subs.w	r8, r2, r1
 8008878:	4659      	mov	r1, fp
 800887a:	eb63 0901 	sbc.w	r9, r3, r1
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800888a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800888e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008892:	4690      	mov	r8, r2
 8008894:	4699      	mov	r9, r3
 8008896:	4623      	mov	r3, r4
 8008898:	eb18 0303 	adds.w	r3, r8, r3
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	462b      	mov	r3, r5
 80088a0:	eb49 0303 	adc.w	r3, r9, r3
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80088b2:	4629      	mov	r1, r5
 80088b4:	024b      	lsls	r3, r1, #9
 80088b6:	4621      	mov	r1, r4
 80088b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80088bc:	4621      	mov	r1, r4
 80088be:	024a      	lsls	r2, r1, #9
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088c6:	2200      	movs	r2, #0
 80088c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80088d0:	f7f8 f9ba 	bl	8000c48 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4613      	mov	r3, r2
 80088da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088dc:	e058      	b.n	8008990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b38      	ldr	r3, [pc, #224]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	2200      	movs	r2, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	4611      	mov	r1, r2
 80088ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	2300      	movs	r3, #0
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088f8:	4642      	mov	r2, r8
 80088fa:	464b      	mov	r3, r9
 80088fc:	f04f 0000 	mov.w	r0, #0
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	0159      	lsls	r1, r3, #5
 8008906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800890a:	0150      	lsls	r0, r2, #5
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4641      	mov	r1, r8
 8008912:	ebb2 0a01 	subs.w	sl, r2, r1
 8008916:	4649      	mov	r1, r9
 8008918:	eb63 0b01 	sbc.w	fp, r3, r1
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800892c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008930:	ebb2 040a 	subs.w	r4, r2, sl
 8008934:	eb63 050b 	sbc.w	r5, r3, fp
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	00eb      	lsls	r3, r5, #3
 8008942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008946:	00e2      	lsls	r2, r4, #3
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	4643      	mov	r3, r8
 800894e:	18e3      	adds	r3, r4, r3
 8008950:	603b      	str	r3, [r7, #0]
 8008952:	464b      	mov	r3, r9
 8008954:	eb45 0303 	adc.w	r3, r5, r3
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008966:	4629      	mov	r1, r5
 8008968:	028b      	lsls	r3, r1, #10
 800896a:	4621      	mov	r1, r4
 800896c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008970:	4621      	mov	r1, r4
 8008972:	028a      	lsls	r2, r1, #10
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800897a:	2200      	movs	r2, #0
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	61fa      	str	r2, [r7, #28]
 8008980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008984:	f7f8 f960 	bl	8000c48 <__aeabi_uldivmod>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4613      	mov	r3, r2
 800898e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	3301      	adds	r3, #1
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80089a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80089a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80089aa:	e002      	b.n	80089b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80089ac:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80089ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80089b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80089b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3750      	adds	r7, #80	@ 0x50
 80089b8:	46bd      	mov	sp, r7
 80089ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800
 80089c4:	00f42400 	.word	0x00f42400
 80089c8:	007a1200 	.word	0x007a1200

080089cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089d0:	4b03      	ldr	r3, [pc, #12]	@ (80089e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	200000f8 	.word	0x200000f8

080089e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089e8:	f7ff fff0 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 80089ec:	4602      	mov	r2, r0
 80089ee:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	0a9b      	lsrs	r3, r3, #10
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	4903      	ldr	r1, [pc, #12]	@ (8008a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089fa:	5ccb      	ldrb	r3, [r1, r3]
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	40023800 	.word	0x40023800
 8008a08:	0800f900 	.word	0x0800f900

08008a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a10:	f7ff ffdc 	bl	80089cc <HAL_RCC_GetHCLKFreq>
 8008a14:	4602      	mov	r2, r0
 8008a16:	4b05      	ldr	r3, [pc, #20]	@ (8008a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	0b5b      	lsrs	r3, r3, #13
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	4903      	ldr	r1, [pc, #12]	@ (8008a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a22:	5ccb      	ldrb	r3, [r1, r3]
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	0800f900 	.word	0x0800f900

08008a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e07b      	b.n	8008b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d108      	bne.n	8008a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a56:	d009      	beq.n	8008a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61da      	str	r2, [r3, #28]
 8008a5e:	e005      	b.n	8008a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fb fa16 	bl	8003eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af0:	ea42 0103 	orr.w	r1, r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	0c1b      	lsrs	r3, r3, #16
 8008b0a:	f003 0104 	and.w	r1, r3, #4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b12:	f003 0210 	and.w	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08a      	sub	sp, #40	@ 0x28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b54:	2301      	movs	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b58:	f7fc fa44 	bl	8004fe4 <HAL_GetTick>
 8008b5c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b64:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008b6c:	887b      	ldrh	r3, [r7, #2]
 8008b6e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b70:	7ffb      	ldrb	r3, [r7, #31]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d00c      	beq.n	8008b90 <HAL_SPI_TransmitReceive+0x4a>
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b7c:	d106      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x46>
 8008b86:	7ffb      	ldrb	r3, [r7, #31]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d001      	beq.n	8008b90 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e17f      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d005      	beq.n	8008ba2 <HAL_SPI_TransmitReceive+0x5c>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <HAL_SPI_TransmitReceive+0x5c>
 8008b9c:	887b      	ldrh	r3, [r7, #2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e174      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x6e>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e16d      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d003      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2205      	movs	r2, #5
 8008bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	887a      	ldrh	r2, [r7, #2]
 8008be6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	887a      	ldrh	r2, [r7, #2]
 8008bf8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c10:	2b40      	cmp	r3, #64	@ 0x40
 8008c12:	d007      	beq.n	8008c24 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c2c:	d17e      	bne.n	8008d2c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_SPI_TransmitReceive+0xf6>
 8008c36:	8afb      	ldrh	r3, [r7, #22]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d16c      	bne.n	8008d16 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c40:	881a      	ldrh	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4c:	1c9a      	adds	r2, r3, #2
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c60:	e059      	b.n	8008d16 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d11b      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x162>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d016      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x162>
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d113      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c84:	881a      	ldrh	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c90:	1c9a      	adds	r2, r3, #2
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d119      	bne.n	8008cea <HAL_SPI_TransmitReceive+0x1a4>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d014      	beq.n	8008cea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	b292      	uxth	r2, r2
 8008ccc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008cea:	f7fc f97b 	bl	8004fe4 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d80d      	bhi.n	8008d16 <HAL_SPI_TransmitReceive+0x1d0>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d009      	beq.n	8008d16 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e0bc      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1a0      	bne.n	8008c62 <HAL_SPI_TransmitReceive+0x11c>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d19b      	bne.n	8008c62 <HAL_SPI_TransmitReceive+0x11c>
 8008d2a:	e082      	b.n	8008e32 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_SPI_TransmitReceive+0x1f4>
 8008d34:	8afb      	ldrh	r3, [r7, #22]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d171      	bne.n	8008e1e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	330c      	adds	r3, #12
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d60:	e05d      	b.n	8008e1e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d11c      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x264>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d017      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x264>
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d114      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	330c      	adds	r3, #12
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d119      	bne.n	8008dec <HAL_SPI_TransmitReceive+0x2a6>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008de8:	2301      	movs	r3, #1
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dec:	f7fc f8fa 	bl	8004fe4 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d803      	bhi.n	8008e04 <HAL_SPI_TransmitReceive+0x2be>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d102      	bne.n	8008e0a <HAL_SPI_TransmitReceive+0x2c4>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d109      	bne.n	8008e1e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e038      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d19c      	bne.n	8008d62 <HAL_SPI_TransmitReceive+0x21c>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d197      	bne.n	8008d62 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e32:	6a3a      	ldr	r2, [r7, #32]
 8008e34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 f8b6 	bl	8008fa8 <SPI_EndRxTxTransaction>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2220      	movs	r2, #32
 8008e46:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e01d      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	613b      	str	r3, [r7, #16]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	613b      	str	r3, [r7, #16]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3728      	adds	r7, #40	@ 0x28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ea8:	f7fc f89c 	bl	8004fe4 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008eb8:	f7fc f894 	bl	8004fe4 <HAL_GetTick>
 8008ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ebe:	4b39      	ldr	r3, [pc, #228]	@ (8008fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	015b      	lsls	r3, r3, #5
 8008ec4:	0d1b      	lsrs	r3, r3, #20
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	fb02 f303 	mul.w	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ece:	e055      	b.n	8008f7c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d051      	beq.n	8008f7c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ed8:	f7fc f884 	bl	8004fe4 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d902      	bls.n	8008eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d13d      	bne.n	8008f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f06:	d111      	bne.n	8008f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f10:	d004      	beq.n	8008f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1a:	d107      	bne.n	8008f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f34:	d10f      	bne.n	8008f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e018      	b.n	8008f9c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	e002      	b.n	8008f7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4013      	ands	r3, r2
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d19a      	bne.n	8008ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200000f8 	.word	0x200000f8

08008fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff ff6a 	bl	8008e98 <SPI_WaitFlagStateUntilTimeout>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d007      	beq.n	8008fda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fce:	f043 0220 	orr.w	r2, r3, #32
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e032      	b.n	8009040 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <SPI_EndRxTxTransaction+0xa0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1b      	ldr	r2, [pc, #108]	@ (800904c <SPI_EndRxTxTransaction+0xa4>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	0d5b      	lsrs	r3, r3, #21
 8008fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ff8:	d112      	bne.n	8009020 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2200      	movs	r2, #0
 8009002:	2180      	movs	r1, #128	@ 0x80
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff ff47 	bl	8008e98 <SPI_WaitFlagStateUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d016      	beq.n	800903e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009014:	f043 0220 	orr.w	r2, r3, #32
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e00f      	b.n	8009040 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	3b01      	subs	r3, #1
 800902a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009036:	2b80      	cmp	r3, #128	@ 0x80
 8009038:	d0f2      	beq.n	8009020 <SPI_EndRxTxTransaction+0x78>
 800903a:	e000      	b.n	800903e <SPI_EndRxTxTransaction+0x96>
        break;
 800903c:	bf00      	nop
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200000f8 	.word	0x200000f8
 800904c:	165e9f81 	.word	0x165e9f81

08009050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e041      	b.n	80090e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fa ff86 	bl	8003f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f000 ff2e 	bl	8009ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b01      	cmp	r3, #1
 8009102:	d001      	beq.n	8009108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e046      	b.n	8009196 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a23      	ldr	r2, [pc, #140]	@ (80091a4 <HAL_TIM_Base_Start+0xb4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d022      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009122:	d01d      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a1f      	ldr	r2, [pc, #124]	@ (80091a8 <HAL_TIM_Base_Start+0xb8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d018      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a1e      	ldr	r2, [pc, #120]	@ (80091ac <HAL_TIM_Base_Start+0xbc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d013      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1c      	ldr	r2, [pc, #112]	@ (80091b0 <HAL_TIM_Base_Start+0xc0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00e      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1b      	ldr	r2, [pc, #108]	@ (80091b4 <HAL_TIM_Base_Start+0xc4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d009      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a19      	ldr	r2, [pc, #100]	@ (80091b8 <HAL_TIM_Base_Start+0xc8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_TIM_Base_Start+0x70>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a18      	ldr	r2, [pc, #96]	@ (80091bc <HAL_TIM_Base_Start+0xcc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d111      	bne.n	8009184 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b06      	cmp	r3, #6
 8009170:	d010      	beq.n	8009194 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 0201 	orr.w	r2, r2, #1
 8009180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009182:	e007      	b.n	8009194 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	40010000 	.word	0x40010000
 80091a8:	40000400 	.word	0x40000400
 80091ac:	40000800 	.word	0x40000800
 80091b0:	40000c00 	.word	0x40000c00
 80091b4:	40010400 	.word	0x40010400
 80091b8:	40014000 	.word	0x40014000
 80091bc:	40001800 	.word	0x40001800

080091c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6a1a      	ldr	r2, [r3, #32]
 80091ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10f      	bne.n	80091f8 <HAL_TIM_Base_Stop+0x38>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6a1a      	ldr	r2, [r3, #32]
 80091de:	f240 4344 	movw	r3, #1092	@ 0x444
 80091e2:	4013      	ands	r3, r2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <HAL_TIM_Base_Stop+0x38>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f022 0201 	bic.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d001      	beq.n	8009228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e04e      	b.n	80092c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a23      	ldr	r2, [pc, #140]	@ (80092d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d022      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009252:	d01d      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1f      	ldr	r2, [pc, #124]	@ (80092d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d018      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1e      	ldr	r2, [pc, #120]	@ (80092dc <HAL_TIM_Base_Start_IT+0xcc>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d013      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1c      	ldr	r2, [pc, #112]	@ (80092e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00e      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1b      	ldr	r2, [pc, #108]	@ (80092e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d009      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d004      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0x80>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a18      	ldr	r2, [pc, #96]	@ (80092ec <HAL_TIM_Base_Start_IT+0xdc>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d111      	bne.n	80092b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d010      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0201 	orr.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b2:	e007      	b.n	80092c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40001800 	.word	0x40001800

080092f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e041      	b.n	8009386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d106      	bne.n	800931c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f839 	bl	800938e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f000 fdde 	bl	8009ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b082      	sub	sp, #8
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e041      	b.n	8009438 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f839 	bl	8009440 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f000 fd85 	bl	8009ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <HAL_TIM_IC_Start_IT+0x1e>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800946e:	b2db      	uxtb	r3, r3
 8009470:	e013      	b.n	800949a <HAL_TIM_IC_Start_IT+0x46>
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d104      	bne.n	8009482 <HAL_TIM_IC_Start_IT+0x2e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800947e:	b2db      	uxtb	r3, r3
 8009480:	e00b      	b.n	800949a <HAL_TIM_IC_Start_IT+0x46>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b08      	cmp	r3, #8
 8009486:	d104      	bne.n	8009492 <HAL_TIM_IC_Start_IT+0x3e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800948e:	b2db      	uxtb	r3, r3
 8009490:	e003      	b.n	800949a <HAL_TIM_IC_Start_IT+0x46>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009498:	b2db      	uxtb	r3, r3
 800949a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <HAL_TIM_IC_Start_IT+0x58>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	e013      	b.n	80094d4 <HAL_TIM_IC_Start_IT+0x80>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d104      	bne.n	80094bc <HAL_TIM_IC_Start_IT+0x68>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	e00b      	b.n	80094d4 <HAL_TIM_IC_Start_IT+0x80>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b08      	cmp	r3, #8
 80094c0:	d104      	bne.n	80094cc <HAL_TIM_IC_Start_IT+0x78>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	e003      	b.n	80094d4 <HAL_TIM_IC_Start_IT+0x80>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d102      	bne.n	80094e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80094dc:	7b7b      	ldrb	r3, [r7, #13]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d001      	beq.n	80094e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e0cc      	b.n	8009680 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <HAL_TIM_IC_Start_IT+0xa2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094f4:	e013      	b.n	800951e <HAL_TIM_IC_Start_IT+0xca>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d104      	bne.n	8009506 <HAL_TIM_IC_Start_IT+0xb2>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009504:	e00b      	b.n	800951e <HAL_TIM_IC_Start_IT+0xca>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b08      	cmp	r3, #8
 800950a:	d104      	bne.n	8009516 <HAL_TIM_IC_Start_IT+0xc2>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009514:	e003      	b.n	800951e <HAL_TIM_IC_Start_IT+0xca>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <HAL_TIM_IC_Start_IT+0xda>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800952c:	e013      	b.n	8009556 <HAL_TIM_IC_Start_IT+0x102>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b04      	cmp	r3, #4
 8009532:	d104      	bne.n	800953e <HAL_TIM_IC_Start_IT+0xea>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800953c:	e00b      	b.n	8009556 <HAL_TIM_IC_Start_IT+0x102>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b08      	cmp	r3, #8
 8009542:	d104      	bne.n	800954e <HAL_TIM_IC_Start_IT+0xfa>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800954c:	e003      	b.n	8009556 <HAL_TIM_IC_Start_IT+0x102>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2202      	movs	r2, #2
 8009552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b0c      	cmp	r3, #12
 800955a:	d841      	bhi.n	80095e0 <HAL_TIM_IC_Start_IT+0x18c>
 800955c:	a201      	add	r2, pc, #4	@ (adr r2, 8009564 <HAL_TIM_IC_Start_IT+0x110>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	08009599 	.word	0x08009599
 8009568:	080095e1 	.word	0x080095e1
 800956c:	080095e1 	.word	0x080095e1
 8009570:	080095e1 	.word	0x080095e1
 8009574:	080095ab 	.word	0x080095ab
 8009578:	080095e1 	.word	0x080095e1
 800957c:	080095e1 	.word	0x080095e1
 8009580:	080095e1 	.word	0x080095e1
 8009584:	080095bd 	.word	0x080095bd
 8009588:	080095e1 	.word	0x080095e1
 800958c:	080095e1 	.word	0x080095e1
 8009590:	080095e1 	.word	0x080095e1
 8009594:	080095cf 	.word	0x080095cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0202 	orr.w	r2, r2, #2
 80095a6:	60da      	str	r2, [r3, #12]
      break;
 80095a8:	e01d      	b.n	80095e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0204 	orr.w	r2, r2, #4
 80095b8:	60da      	str	r2, [r3, #12]
      break;
 80095ba:	e014      	b.n	80095e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0208 	orr.w	r2, r2, #8
 80095ca:	60da      	str	r2, [r3, #12]
      break;
 80095cc:	e00b      	b.n	80095e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0210 	orr.w	r2, r2, #16
 80095dc:	60da      	str	r2, [r3, #12]
      break;
 80095de:	e002      	b.n	80095e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
      break;
 80095e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d148      	bne.n	800967e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2201      	movs	r2, #1
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 f895 	bl	800a724 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a22      	ldr	r2, [pc, #136]	@ (8009688 <HAL_TIM_IC_Start_IT+0x234>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d022      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960c:	d01d      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a1e      	ldr	r2, [pc, #120]	@ (800968c <HAL_TIM_IC_Start_IT+0x238>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d018      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a1c      	ldr	r2, [pc, #112]	@ (8009690 <HAL_TIM_IC_Start_IT+0x23c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a1b      	ldr	r2, [pc, #108]	@ (8009694 <HAL_TIM_IC_Start_IT+0x240>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00e      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a19      	ldr	r2, [pc, #100]	@ (8009698 <HAL_TIM_IC_Start_IT+0x244>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d009      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a18      	ldr	r2, [pc, #96]	@ (800969c <HAL_TIM_IC_Start_IT+0x248>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d004      	beq.n	800964a <HAL_TIM_IC_Start_IT+0x1f6>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a16      	ldr	r2, [pc, #88]	@ (80096a0 <HAL_TIM_IC_Start_IT+0x24c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d111      	bne.n	800966e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b06      	cmp	r3, #6
 800965a:	d010      	beq.n	800967e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0201 	orr.w	r2, r2, #1
 800966a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966c:	e007      	b.n	800967e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	40010000 	.word	0x40010000
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40010400 	.word	0x40010400
 800969c:	40014000 	.word	0x40014000
 80096a0:	40001800 	.word	0x40001800

080096a4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b0c      	cmp	r3, #12
 80096b6:	d841      	bhi.n	800973c <HAL_TIM_IC_Stop_IT+0x98>
 80096b8:	a201      	add	r2, pc, #4	@ (adr r2, 80096c0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096f5 	.word	0x080096f5
 80096c4:	0800973d 	.word	0x0800973d
 80096c8:	0800973d 	.word	0x0800973d
 80096cc:	0800973d 	.word	0x0800973d
 80096d0:	08009707 	.word	0x08009707
 80096d4:	0800973d 	.word	0x0800973d
 80096d8:	0800973d 	.word	0x0800973d
 80096dc:	0800973d 	.word	0x0800973d
 80096e0:	08009719 	.word	0x08009719
 80096e4:	0800973d 	.word	0x0800973d
 80096e8:	0800973d 	.word	0x0800973d
 80096ec:	0800973d 	.word	0x0800973d
 80096f0:	0800972b 	.word	0x0800972b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0202 	bic.w	r2, r2, #2
 8009702:	60da      	str	r2, [r3, #12]
      break;
 8009704:	e01d      	b.n	8009742 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0204 	bic.w	r2, r2, #4
 8009714:	60da      	str	r2, [r3, #12]
      break;
 8009716:	e014      	b.n	8009742 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0208 	bic.w	r2, r2, #8
 8009726:	60da      	str	r2, [r3, #12]
      break;
 8009728:	e00b      	b.n	8009742 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0210 	bic.w	r2, r2, #16
 8009738:	60da      	str	r2, [r3, #12]
      break;
 800973a:	e002      	b.n	8009742 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
      break;
 8009740:	bf00      	nop
  }

  if (status == HAL_OK)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d156      	bne.n	80097f6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2200      	movs	r2, #0
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 ffe7 	bl	800a724 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6a1a      	ldr	r2, [r3, #32]
 800975c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009760:	4013      	ands	r3, r2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10f      	bne.n	8009786 <HAL_TIM_IC_Stop_IT+0xe2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6a1a      	ldr	r2, [r3, #32]
 800976c:	f240 4344 	movw	r3, #1092	@ 0x444
 8009770:	4013      	ands	r3, r2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d107      	bne.n	8009786 <HAL_TIM_IC_Stop_IT+0xe2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0201 	bic.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <HAL_TIM_IC_Stop_IT+0xf2>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009794:	e013      	b.n	80097be <HAL_TIM_IC_Stop_IT+0x11a>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b04      	cmp	r3, #4
 800979a:	d104      	bne.n	80097a6 <HAL_TIM_IC_Stop_IT+0x102>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097a4:	e00b      	b.n	80097be <HAL_TIM_IC_Stop_IT+0x11a>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d104      	bne.n	80097b6 <HAL_TIM_IC_Stop_IT+0x112>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097b4:	e003      	b.n	80097be <HAL_TIM_IC_Stop_IT+0x11a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <HAL_TIM_IC_Stop_IT+0x12a>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097cc:	e013      	b.n	80097f6 <HAL_TIM_IC_Stop_IT+0x152>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d104      	bne.n	80097de <HAL_TIM_IC_Stop_IT+0x13a>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097dc:	e00b      	b.n	80097f6 <HAL_TIM_IC_Stop_IT+0x152>
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d104      	bne.n	80097ee <HAL_TIM_IC_Stop_IT+0x14a>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097ec:	e003      	b.n	80097f6 <HAL_TIM_IC_Stop_IT+0x152>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d020      	beq.n	8009864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01b      	beq.n	8009864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f06f 0202 	mvn.w	r2, #2
 8009834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fb f8d0 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 8009850:	e005      	b.n	800985e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fb2e 	bl	8009eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fb35 	bl	8009ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b00      	cmp	r3, #0
 800986c:	d020      	beq.n	80098b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f06f 0204 	mvn.w	r2, #4
 8009880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2202      	movs	r2, #2
 8009886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fb f8aa 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 800989c:	e005      	b.n	80098aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fb08 	bl	8009eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 fb0f 	bl	8009ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f003 0308 	and.w	r3, r3, #8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d020      	beq.n	80098fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d01b      	beq.n	80098fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f06f 0208 	mvn.w	r2, #8
 80098cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2204      	movs	r2, #4
 80098d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7fb f884 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 80098e8:	e005      	b.n	80098f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fae2 	bl	8009eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fae9 	bl	8009ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	2b00      	cmp	r3, #0
 8009904:	d020      	beq.n	8009948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f003 0310 	and.w	r3, r3, #16
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01b      	beq.n	8009948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f06f 0210 	mvn.w	r2, #16
 8009918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2208      	movs	r2, #8
 800991e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fb f85e 	bl	80049f0 <HAL_TIM_IC_CaptureCallback>
 8009934:	e005      	b.n	8009942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fabc 	bl	8009eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fac3 	bl	8009ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00c      	beq.n	800996c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d007      	beq.n	800996c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0201 	mvn.w	r2, #1
 8009964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7f8 fff6 	bl	8002958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00c      	beq.n	8009990 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800997c:	2b00      	cmp	r3, #0
 800997e:	d007      	beq.n	8009990 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 ffc8 	bl	800a920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00c      	beq.n	80099b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80099ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa94 	bl	8009edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f003 0320 	and.w	r3, r3, #32
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00c      	beq.n	80099d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f06f 0220 	mvn.w	r2, #32
 80099d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 ff9a 	bl	800a90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e088      	b.n	8009b10 <HAL_TIM_IC_ConfigChannel+0x130>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11b      	bne.n	8009a44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009a1c:	f000 fcbe 	bl	800a39c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 020c 	bic.w	r2, r2, #12
 8009a2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6999      	ldr	r1, [r3, #24]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	619a      	str	r2, [r3, #24]
 8009a42:	e060      	b.n	8009b06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d11c      	bne.n	8009a84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009a5a:	f000 fd42 	bl	800a4e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6999      	ldr	r1, [r3, #24]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	021a      	lsls	r2, r3, #8
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	619a      	str	r2, [r3, #24]
 8009a82:	e040      	b.n	8009b06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d11b      	bne.n	8009ac2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009a9a:	f000 fd8f 	bl	800a5bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69da      	ldr	r2, [r3, #28]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 020c 	bic.w	r2, r2, #12
 8009aac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69d9      	ldr	r1, [r3, #28]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	61da      	str	r2, [r3, #28]
 8009ac0:	e021      	b.n	8009b06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	d11c      	bne.n	8009b02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009ad8:	f000 fdac 	bl	800a634 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009aea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69d9      	ldr	r1, [r3, #28]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	021a      	lsls	r2, r3, #8
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	61da      	str	r2, [r3, #28]
 8009b00:	e001      	b.n	8009b06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d101      	bne.n	8009b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e0ae      	b.n	8009c94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b0c      	cmp	r3, #12
 8009b42:	f200 809f 	bhi.w	8009c84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b81 	.word	0x08009b81
 8009b50:	08009c85 	.word	0x08009c85
 8009b54:	08009c85 	.word	0x08009c85
 8009b58:	08009c85 	.word	0x08009c85
 8009b5c:	08009bc1 	.word	0x08009bc1
 8009b60:	08009c85 	.word	0x08009c85
 8009b64:	08009c85 	.word	0x08009c85
 8009b68:	08009c85 	.word	0x08009c85
 8009b6c:	08009c03 	.word	0x08009c03
 8009b70:	08009c85 	.word	0x08009c85
 8009b74:	08009c85 	.word	0x08009c85
 8009b78:	08009c85 	.word	0x08009c85
 8009b7c:	08009c43 	.word	0x08009c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fa58 	bl	800a03c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0208 	orr.w	r2, r2, #8
 8009b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699a      	ldr	r2, [r3, #24]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0204 	bic.w	r2, r2, #4
 8009baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6999      	ldr	r1, [r3, #24]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	619a      	str	r2, [r3, #24]
      break;
 8009bbe:	e064      	b.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 faa8 	bl	800a11c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699a      	ldr	r2, [r3, #24]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6999      	ldr	r1, [r3, #24]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	021a      	lsls	r2, r3, #8
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	619a      	str	r2, [r3, #24]
      break;
 8009c00:	e043      	b.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fafd 	bl	800a208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f042 0208 	orr.w	r2, r2, #8
 8009c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0204 	bic.w	r2, r2, #4
 8009c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69d9      	ldr	r1, [r3, #28]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	691a      	ldr	r2, [r3, #16]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	61da      	str	r2, [r3, #28]
      break;
 8009c40:	e023      	b.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fb51 	bl	800a2f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69d9      	ldr	r1, [r3, #28]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	021a      	lsls	r2, r3, #8
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	61da      	str	r2, [r3, #28]
      break;
 8009c82:	e002      	b.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e0b4      	b.n	8009e22 <HAL_TIM_ConfigClockSource+0x186>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf0:	d03e      	beq.n	8009d70 <HAL_TIM_ConfigClockSource+0xd4>
 8009cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf6:	f200 8087 	bhi.w	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfe:	f000 8086 	beq.w	8009e0e <HAL_TIM_ConfigClockSource+0x172>
 8009d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d06:	d87f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d08:	2b70      	cmp	r3, #112	@ 0x70
 8009d0a:	d01a      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0xa6>
 8009d0c:	2b70      	cmp	r3, #112	@ 0x70
 8009d0e:	d87b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d050      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x11a>
 8009d14:	2b60      	cmp	r3, #96	@ 0x60
 8009d16:	d877      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d18:	2b50      	cmp	r3, #80	@ 0x50
 8009d1a:	d03c      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xfa>
 8009d1c:	2b50      	cmp	r3, #80	@ 0x50
 8009d1e:	d873      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d058      	beq.n	8009dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	d86f      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d28:	2b30      	cmp	r3, #48	@ 0x30
 8009d2a:	d064      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15a>
 8009d2c:	2b30      	cmp	r3, #48	@ 0x30
 8009d2e:	d86b      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d060      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15a>
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d867      	bhi.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d05c      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15a>
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d05a      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x15a>
 8009d40:	e062      	b.n	8009e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d52:	f000 fcc7 	bl	800a6e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	609a      	str	r2, [r3, #8]
      break;
 8009d6e:	e04f      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d80:	f000 fcb0 	bl	800a6e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d92:	609a      	str	r2, [r3, #8]
      break;
 8009d94:	e03c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009da2:	461a      	mov	r2, r3
 8009da4:	f000 fb6e 	bl	800a484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2150      	movs	r1, #80	@ 0x50
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fc7d 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 8009db4:	e02c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f000 fbca 	bl	800a55c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2160      	movs	r1, #96	@ 0x60
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fc6d 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 8009dd4:	e01c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de2:	461a      	mov	r2, r3
 8009de4:	f000 fb4e 	bl	800a484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2140      	movs	r1, #64	@ 0x40
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fc5d 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 8009df4:	e00c      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f000 fc54 	bl	800a6ae <TIM_ITRx_SetConfig>
      break;
 8009e06:	e003      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e000      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2b0c      	cmp	r3, #12
 8009e3e:	d831      	bhi.n	8009ea4 <HAL_TIM_ReadCapturedValue+0x78>
 8009e40:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e7d 	.word	0x08009e7d
 8009e4c:	08009ea5 	.word	0x08009ea5
 8009e50:	08009ea5 	.word	0x08009ea5
 8009e54:	08009ea5 	.word	0x08009ea5
 8009e58:	08009e87 	.word	0x08009e87
 8009e5c:	08009ea5 	.word	0x08009ea5
 8009e60:	08009ea5 	.word	0x08009ea5
 8009e64:	08009ea5 	.word	0x08009ea5
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009ea5 	.word	0x08009ea5
 8009e70:	08009ea5 	.word	0x08009ea5
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009e9b 	.word	0x08009e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e82:	60fb      	str	r3, [r7, #12]

      break;
 8009e84:	e00f      	b.n	8009ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8c:	60fb      	str	r3, [r7, #12]

      break;
 8009e8e:	e00a      	b.n	8009ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e96:	60fb      	str	r3, [r7, #12]

      break;
 8009e98:	e005      	b.n	8009ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea0:	60fb      	str	r3, [r7, #12]

      break;
 8009ea2:	e000      	b.n	8009ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009ea4:	bf00      	nop
  }

  return tmpreg;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a43      	ldr	r2, [pc, #268]	@ (800a010 <TIM_Base_SetConfig+0x120>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d013      	beq.n	8009f30 <TIM_Base_SetConfig+0x40>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f0e:	d00f      	beq.n	8009f30 <TIM_Base_SetConfig+0x40>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a40      	ldr	r2, [pc, #256]	@ (800a014 <TIM_Base_SetConfig+0x124>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00b      	beq.n	8009f30 <TIM_Base_SetConfig+0x40>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a3f      	ldr	r2, [pc, #252]	@ (800a018 <TIM_Base_SetConfig+0x128>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d007      	beq.n	8009f30 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a3e      	ldr	r2, [pc, #248]	@ (800a01c <TIM_Base_SetConfig+0x12c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a3d      	ldr	r2, [pc, #244]	@ (800a020 <TIM_Base_SetConfig+0x130>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d108      	bne.n	8009f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a32      	ldr	r2, [pc, #200]	@ (800a010 <TIM_Base_SetConfig+0x120>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d02b      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f50:	d027      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2f      	ldr	r2, [pc, #188]	@ (800a014 <TIM_Base_SetConfig+0x124>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d023      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a2e      	ldr	r2, [pc, #184]	@ (800a018 <TIM_Base_SetConfig+0x128>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d01f      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a2d      	ldr	r2, [pc, #180]	@ (800a01c <TIM_Base_SetConfig+0x12c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d01b      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a2c      	ldr	r2, [pc, #176]	@ (800a020 <TIM_Base_SetConfig+0x130>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d017      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a2b      	ldr	r2, [pc, #172]	@ (800a024 <TIM_Base_SetConfig+0x134>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a2a      	ldr	r2, [pc, #168]	@ (800a028 <TIM_Base_SetConfig+0x138>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00f      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a29      	ldr	r2, [pc, #164]	@ (800a02c <TIM_Base_SetConfig+0x13c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00b      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a28      	ldr	r2, [pc, #160]	@ (800a030 <TIM_Base_SetConfig+0x140>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a27      	ldr	r2, [pc, #156]	@ (800a034 <TIM_Base_SetConfig+0x144>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_Base_SetConfig+0xb2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a26      	ldr	r2, [pc, #152]	@ (800a038 <TIM_Base_SetConfig+0x148>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d108      	bne.n	8009fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a0e      	ldr	r2, [pc, #56]	@ (800a010 <TIM_Base_SetConfig+0x120>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d003      	beq.n	8009fe2 <TIM_Base_SetConfig+0xf2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a10      	ldr	r2, [pc, #64]	@ (800a020 <TIM_Base_SetConfig+0x130>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d103      	bne.n	8009fea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	691a      	ldr	r2, [r3, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f043 0204 	orr.w	r2, r3, #4
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	601a      	str	r2, [r3, #0]
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40010000 	.word	0x40010000
 800a014:	40000400 	.word	0x40000400
 800a018:	40000800 	.word	0x40000800
 800a01c:	40000c00 	.word	0x40000c00
 800a020:	40010400 	.word	0x40010400
 800a024:	40014000 	.word	0x40014000
 800a028:	40014400 	.word	0x40014400
 800a02c:	40014800 	.word	0x40014800
 800a030:	40001800 	.word	0x40001800
 800a034:	40001c00 	.word	0x40001c00
 800a038:	40002000 	.word	0x40002000

0800a03c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f023 0201 	bic.w	r2, r3, #1
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0303 	bic.w	r3, r3, #3
 800a072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f023 0302 	bic.w	r3, r3, #2
 800a084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a20      	ldr	r2, [pc, #128]	@ (800a114 <TIM_OC1_SetConfig+0xd8>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d003      	beq.n	800a0a0 <TIM_OC1_SetConfig+0x64>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a1f      	ldr	r2, [pc, #124]	@ (800a118 <TIM_OC1_SetConfig+0xdc>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10c      	bne.n	800a0ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f023 0308 	bic.w	r3, r3, #8
 800a0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f023 0304 	bic.w	r3, r3, #4
 800a0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a15      	ldr	r2, [pc, #84]	@ (800a114 <TIM_OC1_SetConfig+0xd8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_OC1_SetConfig+0x8e>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a14      	ldr	r2, [pc, #80]	@ (800a118 <TIM_OC1_SetConfig+0xdc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d111      	bne.n	800a0ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	621a      	str	r2, [r3, #32]
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	40010000 	.word	0x40010000
 800a118:	40010400 	.word	0x40010400

0800a11c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	f023 0210 	bic.w	r2, r3, #16
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f023 0320 	bic.w	r3, r3, #32
 800a166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4313      	orrs	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a22      	ldr	r2, [pc, #136]	@ (800a200 <TIM_OC2_SetConfig+0xe4>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_OC2_SetConfig+0x68>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a21      	ldr	r2, [pc, #132]	@ (800a204 <TIM_OC2_SetConfig+0xe8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d10d      	bne.n	800a1a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a19e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a17      	ldr	r2, [pc, #92]	@ (800a200 <TIM_OC2_SetConfig+0xe4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_OC2_SetConfig+0x94>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a16      	ldr	r2, [pc, #88]	@ (800a204 <TIM_OC2_SetConfig+0xe8>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d113      	bne.n	800a1d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a1b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	621a      	str	r2, [r3, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40010000 	.word	0x40010000
 800a204:	40010400 	.word	0x40010400

0800a208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	021b      	lsls	r3, r3, #8
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a21      	ldr	r2, [pc, #132]	@ (800a2e8 <TIM_OC3_SetConfig+0xe0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d003      	beq.n	800a26e <TIM_OC3_SetConfig+0x66>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a20      	ldr	r2, [pc, #128]	@ (800a2ec <TIM_OC3_SetConfig+0xe4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d10d      	bne.n	800a28a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a16      	ldr	r2, [pc, #88]	@ (800a2e8 <TIM_OC3_SetConfig+0xe0>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d003      	beq.n	800a29a <TIM_OC3_SetConfig+0x92>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a15      	ldr	r2, [pc, #84]	@ (800a2ec <TIM_OC3_SetConfig+0xe4>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d113      	bne.n	800a2c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	011b      	lsls	r3, r3, #4
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	621a      	str	r2, [r3, #32]
}
 800a2dc:	bf00      	nop
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40010000 	.word	0x40010000
 800a2ec:	40010400 	.word	0x40010400

0800a2f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a1b      	ldr	r3, [r3, #32]
 800a304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a31e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	031b      	lsls	r3, r3, #12
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a12      	ldr	r2, [pc, #72]	@ (800a394 <TIM_OC4_SetConfig+0xa4>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d003      	beq.n	800a358 <TIM_OC4_SetConfig+0x68>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a11      	ldr	r2, [pc, #68]	@ (800a398 <TIM_OC4_SetConfig+0xa8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d109      	bne.n	800a36c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a35e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	019b      	lsls	r3, r3, #6
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4313      	orrs	r3, r2
 800a36a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	621a      	str	r2, [r3, #32]
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	40010000 	.word	0x40010000
 800a398:	40010400 	.word	0x40010400

0800a39c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	f023 0201 	bic.w	r2, r3, #1
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4a28      	ldr	r2, [pc, #160]	@ (800a468 <TIM_TI1_SetConfig+0xcc>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d01b      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d0:	d017      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4a25      	ldr	r2, [pc, #148]	@ (800a46c <TIM_TI1_SetConfig+0xd0>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d013      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4a24      	ldr	r2, [pc, #144]	@ (800a470 <TIM_TI1_SetConfig+0xd4>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00f      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4a23      	ldr	r2, [pc, #140]	@ (800a474 <TIM_TI1_SetConfig+0xd8>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d00b      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	4a22      	ldr	r2, [pc, #136]	@ (800a478 <TIM_TI1_SetConfig+0xdc>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d007      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a21      	ldr	r2, [pc, #132]	@ (800a47c <TIM_TI1_SetConfig+0xe0>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d003      	beq.n	800a402 <TIM_TI1_SetConfig+0x66>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	4a20      	ldr	r2, [pc, #128]	@ (800a480 <TIM_TI1_SetConfig+0xe4>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d101      	bne.n	800a406 <TIM_TI1_SetConfig+0x6a>
 800a402:	2301      	movs	r3, #1
 800a404:	e000      	b.n	800a408 <TIM_TI1_SetConfig+0x6c>
 800a406:	2300      	movs	r3, #0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d008      	beq.n	800a41e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f023 0303 	bic.w	r3, r3, #3
 800a412:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e003      	b.n	800a426 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a42c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	b2db      	uxtb	r3, r3
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f023 030a 	bic.w	r3, r3, #10
 800a440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f003 030a 	and.w	r3, r3, #10
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	621a      	str	r2, [r3, #32]
}
 800a45a:	bf00      	nop
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	40010000 	.word	0x40010000
 800a46c:	40000400 	.word	0x40000400
 800a470:	40000800 	.word	0x40000800
 800a474:	40000c00 	.word	0x40000c00
 800a478:	40010400 	.word	0x40010400
 800a47c:	40014000 	.word	0x40014000
 800a480:	40001800 	.word	0x40001800

0800a484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f023 0201 	bic.w	r2, r3, #1
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f023 030a 	bic.w	r3, r3, #10
 800a4c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	621a      	str	r2, [r3, #32]
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b087      	sub	sp, #28
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f023 0210 	bic.w	r2, r3, #16
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a50e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	4313      	orrs	r3, r2
 800a518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	031b      	lsls	r3, r3, #12
 800a526:	b29b      	uxth	r3, r3
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a534:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	011b      	lsls	r3, r3, #4
 800a53a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	621a      	str	r2, [r3, #32]
}
 800a550:	bf00      	nop
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f023 0210 	bic.w	r2, r3, #16
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	031b      	lsls	r3, r3, #12
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	011b      	lsls	r3, r3, #4
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	621a      	str	r2, [r3, #32]
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	4313      	orrs	r3, r2
 800a604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a60c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	4313      	orrs	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	621a      	str	r2, [r3, #32]
}
 800a628:	bf00      	nop
 800a62a:	371c      	adds	r7, #28
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a660:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	4313      	orrs	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a672:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	031b      	lsls	r3, r3, #12
 800a678:	b29b      	uxth	r3, r3
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a686:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	031b      	lsls	r3, r3, #12
 800a68c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	4313      	orrs	r3, r2
 800a694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	621a      	str	r2, [r3, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	f043 0307 	orr.w	r3, r3, #7
 800a6d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	021a      	lsls	r2, r3, #8
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	431a      	orrs	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	609a      	str	r2, [r3, #8]
}
 800a718:	bf00      	nop
 800a71a:	371c      	adds	r7, #28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f003 031f 	and.w	r3, r3, #31
 800a736:	2201      	movs	r2, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	43db      	mvns	r3, r3
 800a746:	401a      	ands	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a1a      	ldr	r2, [r3, #32]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f003 031f 	and.w	r3, r3, #31
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
 800a75c:	431a      	orrs	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	621a      	str	r2, [r3, #32]
}
 800a762:	bf00      	nop
 800a764:	371c      	adds	r7, #28
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a784:	2302      	movs	r3, #2
 800a786:	e05a      	b.n	800a83e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a21      	ldr	r2, [pc, #132]	@ (800a84c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d022      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d4:	d01d      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a1d      	ldr	r2, [pc, #116]	@ (800a850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d018      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00e      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a18      	ldr	r2, [pc, #96]	@ (800a85c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d009      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a17      	ldr	r2, [pc, #92]	@ (800a860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d004      	beq.n	800a812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a15      	ldr	r2, [pc, #84]	@ (800a864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d10c      	bne.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4313      	orrs	r3, r2
 800a822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40010000 	.word	0x40010000
 800a850:	40000400 	.word	0x40000400
 800a854:	40000800 	.word	0x40000800
 800a858:	40000c00 	.word	0x40000c00
 800a85c:	40010400 	.word	0x40010400
 800a860:	40014000 	.word	0x40014000
 800a864:	40001800 	.word	0x40001800

0800a868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a880:	2302      	movs	r3, #2
 800a882:	e03d      	b.n	800a900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e042      	b.n	800a9cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d106      	bne.n	800a960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7f9 fcfc 	bl	8004358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2224      	movs	r2, #36	@ 0x24
 800a964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fd7f 	bl	800b47c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a98c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695a      	ldr	r2, [r3, #20]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a99c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08a      	sub	sp, #40	@ 0x28
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	d175      	bne.n	800aae0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <HAL_UART_Transmit+0x2c>
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e06e      	b.n	800aae2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2221      	movs	r2, #33	@ 0x21
 800aa0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa12:	f7fa fae7 	bl	8004fe4 <HAL_GetTick>
 800aa16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	88fa      	ldrh	r2, [r7, #6]
 800aa1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2c:	d108      	bne.n	800aa40 <HAL_UART_Transmit+0x6c>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d104      	bne.n	800aa40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	61bb      	str	r3, [r7, #24]
 800aa3e:	e003      	b.n	800aa48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa48:	e02e      	b.n	800aaa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2200      	movs	r2, #0
 800aa52:	2180      	movs	r1, #128	@ 0x80
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fb1d 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e03a      	b.n	800aae2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10b      	bne.n	800aa8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	3302      	adds	r3, #2
 800aa86:	61bb      	str	r3, [r7, #24]
 800aa88:	e007      	b.n	800aa9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	3301      	adds	r3, #1
 800aa98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1cb      	bne.n	800aa4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2200      	movs	r2, #0
 800aaba:	2140      	movs	r1, #64	@ 0x40
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fae9 	bl	800b094 <UART_WaitOnFlagUntilTimeout>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e006      	b.n	800aae2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2220      	movs	r2, #32
 800aad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	e000      	b.n	800aae2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800aae0:	2302      	movs	r3, #2
  }
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3720      	adds	r7, #32
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b0ba      	sub	sp, #232	@ 0xe8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ab2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10f      	bne.n	800ab52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d009      	beq.n	800ab52 <HAL_UART_IRQHandler+0x66>
 800ab3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fbd7 	bl	800b2fe <UART_Receive_IT>
      return;
 800ab50:	e273      	b.n	800b03a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ab52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 80de 	beq.w	800ad18 <HAL_UART_IRQHandler+0x22c>
 800ab5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80d1 	beq.w	800ad18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <HAL_UART_IRQHandler+0xae>
 800ab82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab92:	f043 0201 	orr.w	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <HAL_UART_IRQHandler+0xd2>
 800aba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb6:	f043 0202 	orr.w	r2, r3, #2
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <HAL_UART_IRQHandler+0xf6>
 800abca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abda:	f043 0204 	orr.w	r2, r3, #4
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800abe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d011      	beq.n	800ac12 <HAL_UART_IRQHandler+0x126>
 800abee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800abfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac0a:	f043 0208 	orr.w	r2, r3, #8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 820a 	beq.w	800b030 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac20:	f003 0320 	and.w	r3, r3, #32
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <HAL_UART_IRQHandler+0x14e>
 800ac28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac2c:	f003 0320 	and.w	r3, r3, #32
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fb62 	bl	800b2fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac44:	2b40      	cmp	r3, #64	@ 0x40
 800ac46:	bf0c      	ite	eq
 800ac48:	2301      	moveq	r3, #1
 800ac4a:	2300      	movne	r3, #0
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac56:	f003 0308 	and.w	r3, r3, #8
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <HAL_UART_IRQHandler+0x17a>
 800ac5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d04f      	beq.n	800ad06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa6d 	bl	800b146 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac76:	2b40      	cmp	r3, #64	@ 0x40
 800ac78:	d141      	bne.n	800acfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3314      	adds	r3, #20
 800ac80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac88:	e853 3f00 	ldrex	r3, [r3]
 800ac8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3314      	adds	r3, #20
 800aca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aca6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800acaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800acb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1d9      	bne.n	800ac7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d013      	beq.n	800acf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acd2:	4a8a      	ldr	r2, [pc, #552]	@ (800aefc <HAL_UART_IRQHandler+0x410>)
 800acd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fb fe95 	bl	8006a0a <HAL_DMA_Abort_IT>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d016      	beq.n	800ad14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800acf0:	4610      	mov	r0, r2
 800acf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf4:	e00e      	b.n	800ad14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9b6 	bl	800b068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acfc:	e00a      	b.n	800ad14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f9b2 	bl	800b068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad04:	e006      	b.n	800ad14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f9ae 	bl	800b068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ad12:	e18d      	b.n	800b030 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad14:	bf00      	nop
    return;
 800ad16:	e18b      	b.n	800b030 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	f040 8167 	bne.w	800aff0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad26:	f003 0310 	and.w	r3, r3, #16
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 8160 	beq.w	800aff0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800ad30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 8159 	beq.w	800aff0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60bb      	str	r3, [r7, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	60bb      	str	r3, [r7, #8]
 800ad52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad5e:	2b40      	cmp	r3, #64	@ 0x40
 800ad60:	f040 80ce 	bne.w	800af00 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 80a9 	beq.w	800aecc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad82:	429a      	cmp	r2, r3
 800ad84:	f080 80a2 	bcs.w	800aecc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad9a:	f000 8088 	beq.w	800aeae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	330c      	adds	r3, #12
 800ada4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800adb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800adb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800adca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800adce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800add6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ade2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1d9      	bne.n	800ad9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3314      	adds	r3, #20
 800adf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adfc:	f023 0301 	bic.w	r3, r3, #1
 800ae00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3314      	adds	r3, #20
 800ae0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ae12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e1      	bne.n	800adea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3314      	adds	r3, #20
 800ae46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e3      	bne.n	800ae26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	330c      	adds	r3, #12
 800ae72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae76:	e853 3f00 	ldrex	r3, [r3]
 800ae7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7e:	f023 0310 	bic.w	r3, r3, #16
 800ae82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	330c      	adds	r3, #12
 800ae8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ae90:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ae92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e3      	bne.n	800ae6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fb fd3e 	bl	800692a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f8d9 	bl	800b07c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aeca:	e0b3      	b.n	800b034 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aed0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aed4:	429a      	cmp	r2, r3
 800aed6:	f040 80ad 	bne.w	800b034 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aee4:	f040 80a6 	bne.w	800b034 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f8c1 	bl	800b07c <HAL_UARTEx_RxEventCallback>
      return;
 800aefa:	e09b      	b.n	800b034 <HAL_UART_IRQHandler+0x548>
 800aefc:	0800b20d 	.word	0x0800b20d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800af08:	b29b      	uxth	r3, r3
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800af14:	b29b      	uxth	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 808e 	beq.w	800b038 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800af1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8089 	beq.w	800b038 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	330c      	adds	r3, #12
 800af2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	330c      	adds	r3, #12
 800af46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800af4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800af4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af52:	e841 2300 	strex	r3, r2, [r1]
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1e3      	bne.n	800af26 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3314      	adds	r3, #20
 800af64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	623b      	str	r3, [r7, #32]
   return(result);
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	f023 0301 	bic.w	r3, r3, #1
 800af74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3314      	adds	r3, #20
 800af7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af82:	633a      	str	r2, [r7, #48]	@ 0x30
 800af84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e3      	bne.n	800af5e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2220      	movs	r2, #32
 800af9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
 800afaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	e853 3f00 	ldrex	r3, [r3]
 800afb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0310 	bic.w	r3, r3, #16
 800afba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	330c      	adds	r3, #12
 800afc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800afc8:	61fa      	str	r2, [r7, #28]
 800afca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	69b9      	ldr	r1, [r7, #24]
 800afce:	69fa      	ldr	r2, [r7, #28]
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	617b      	str	r3, [r7, #20]
   return(result);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e3      	bne.n	800afa4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2202      	movs	r2, #2
 800afe0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f847 	bl	800b07c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800afee:	e023      	b.n	800b038 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d009      	beq.n	800b010 <HAL_UART_IRQHandler+0x524>
 800affc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b004:	2b00      	cmp	r3, #0
 800b006:	d003      	beq.n	800b010 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f910 	bl	800b22e <UART_Transmit_IT>
    return;
 800b00e:	e014      	b.n	800b03a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <HAL_UART_IRQHandler+0x54e>
 800b01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b024:	2b00      	cmp	r3, #0
 800b026:	d008      	beq.n	800b03a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f950 	bl	800b2ce <UART_EndTransmit_IT>
    return;
 800b02e:	e004      	b.n	800b03a <HAL_UART_IRQHandler+0x54e>
    return;
 800b030:	bf00      	nop
 800b032:	e002      	b.n	800b03a <HAL_UART_IRQHandler+0x54e>
      return;
 800b034:	bf00      	nop
 800b036:	e000      	b.n	800b03a <HAL_UART_IRQHandler+0x54e>
      return;
 800b038:	bf00      	nop
  }
}
 800b03a:	37e8      	adds	r7, #232	@ 0xe8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b086      	sub	sp, #24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a4:	e03b      	b.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d037      	beq.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7f9 ff99 	bl	8004fe4 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	6a3a      	ldr	r2, [r7, #32]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d302      	bcc.n	800b0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e03a      	b.n	800b13e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d023      	beq.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b80      	cmp	r3, #128	@ 0x80
 800b0da:	d020      	beq.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b40      	cmp	r3, #64	@ 0x40
 800b0e0:	d01d      	beq.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b08      	cmp	r3, #8
 800b0ee:	d116      	bne.n	800b11e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 f81d 	bl	800b146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2208      	movs	r2, #8
 800b110:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e00f      	b.n	800b13e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	4013      	ands	r3, r2
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	bf0c      	ite	eq
 800b12e:	2301      	moveq	r3, #1
 800b130:	2300      	movne	r3, #0
 800b132:	b2db      	uxtb	r3, r3
 800b134:	461a      	mov	r2, r3
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d0b4      	beq.n	800b0a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b146:	b480      	push	{r7}
 800b148:	b095      	sub	sp, #84	@ 0x54
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	330c      	adds	r3, #12
 800b154:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	330c      	adds	r3, #12
 800b16c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b16e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e5      	bne.n	800b14e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3314      	adds	r3, #20
 800b188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	61fb      	str	r3, [r7, #28]
   return(result);
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	f023 0301 	bic.w	r3, r3, #1
 800b198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1aa:	e841 2300 	strex	r3, r2, [r1]
 800b1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1e5      	bne.n	800b182 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d119      	bne.n	800b1f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	330c      	adds	r3, #12
 800b1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	e853 3f00 	ldrex	r3, [r3]
 800b1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f023 0310 	bic.w	r3, r3, #16
 800b1d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1de:	61ba      	str	r2, [r7, #24]
 800b1e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	6979      	ldr	r1, [r7, #20]
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	e841 2300 	strex	r3, r2, [r1]
 800b1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1e5      	bne.n	800b1be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b200:	bf00      	nop
 800b202:	3754      	adds	r7, #84	@ 0x54
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f7ff ff21 	bl	800b068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b226:	bf00      	nop
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b21      	cmp	r3, #33	@ 0x21
 800b240:	d13e      	bne.n	800b2c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b24a:	d114      	bne.n	800b276 <UART_Transmit_IT+0x48>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d110      	bne.n	800b276 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	1c9a      	adds	r2, r3, #2
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	621a      	str	r2, [r3, #32]
 800b274:	e008      	b.n	800b288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	1c59      	adds	r1, r3, #1
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	6211      	str	r1, [r2, #32]
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29b      	uxth	r3, r3
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	4619      	mov	r1, r3
 800b296:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10f      	bne.n	800b2bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68da      	ldr	r2, [r3, #12]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b2aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e000      	b.n	800b2c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2c0:	2302      	movs	r3, #2
  }
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68da      	ldr	r2, [r3, #12]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7ff fea6 	bl	800b040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b08c      	sub	sp, #48	@ 0x30
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b22      	cmp	r3, #34	@ 0x22
 800b318:	f040 80aa 	bne.w	800b470 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b324:	d115      	bne.n	800b352 <UART_Receive_IT+0x54>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d111      	bne.n	800b352 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b332:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b340:	b29a      	uxth	r2, r3
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34a:	1c9a      	adds	r2, r3, #2
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	629a      	str	r2, [r3, #40]	@ 0x28
 800b350:	e024      	b.n	800b39c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b356:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b360:	d007      	beq.n	800b372 <UART_Receive_IT+0x74>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <UART_Receive_IT+0x82>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	e008      	b.n	800b392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d15d      	bne.n	800b46c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68da      	ldr	r2, [r3, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f022 0220 	bic.w	r2, r2, #32
 800b3be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b3ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	695a      	ldr	r2, [r3, #20]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f022 0201 	bic.w	r2, r2, #1
 800b3de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d135      	bne.n	800b462 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	330c      	adds	r3, #12
 800b402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	613b      	str	r3, [r7, #16]
   return(result);
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f023 0310 	bic.w	r3, r3, #16
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	330c      	adds	r3, #12
 800b41a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b41c:	623a      	str	r2, [r7, #32]
 800b41e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b420:	69f9      	ldr	r1, [r7, #28]
 800b422:	6a3a      	ldr	r2, [r7, #32]
 800b424:	e841 2300 	strex	r3, r2, [r1]
 800b428:	61bb      	str	r3, [r7, #24]
   return(result);
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e5      	bne.n	800b3fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0310 	and.w	r3, r3, #16
 800b43a:	2b10      	cmp	r3, #16
 800b43c:	d10a      	bne.n	800b454 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	60fb      	str	r3, [r7, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	60fb      	str	r3, [r7, #12]
 800b452:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff fe0e 	bl	800b07c <HAL_UARTEx_RxEventCallback>
 800b460:	e002      	b.n	800b468 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff fdf6 	bl	800b054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	e002      	b.n	800b472 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3730      	adds	r7, #48	@ 0x30
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b480:	b0c0      	sub	sp, #256	@ 0x100
 800b482:	af00      	add	r7, sp, #0
 800b484:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b498:	68d9      	ldr	r1, [r3, #12]
 800b49a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	ea40 0301 	orr.w	r3, r0, r1
 800b4a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b4d4:	f021 010c 	bic.w	r1, r1, #12
 800b4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4f6:	6999      	ldr	r1, [r3, #24]
 800b4f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	ea40 0301 	orr.w	r3, r0, r1
 800b502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	4b8f      	ldr	r3, [pc, #572]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d005      	beq.n	800b51c <UART_SetConfig+0xa0>
 800b510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b8d      	ldr	r3, [pc, #564]	@ (800b74c <UART_SetConfig+0x2d0>)
 800b518:	429a      	cmp	r2, r3
 800b51a:	d104      	bne.n	800b526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b51c:	f7fd fa76 	bl	8008a0c <HAL_RCC_GetPCLK2Freq>
 800b520:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b524:	e003      	b.n	800b52e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b526:	f7fd fa5d 	bl	80089e4 <HAL_RCC_GetPCLK1Freq>
 800b52a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b538:	f040 810c 	bne.w	800b754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b53c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b540:	2200      	movs	r2, #0
 800b542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b546:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b54a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b54e:	4622      	mov	r2, r4
 800b550:	462b      	mov	r3, r5
 800b552:	1891      	adds	r1, r2, r2
 800b554:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b556:	415b      	adcs	r3, r3
 800b558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b55a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b55e:	4621      	mov	r1, r4
 800b560:	eb12 0801 	adds.w	r8, r2, r1
 800b564:	4629      	mov	r1, r5
 800b566:	eb43 0901 	adc.w	r9, r3, r1
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	f04f 0300 	mov.w	r3, #0
 800b572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b57a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b57e:	4690      	mov	r8, r2
 800b580:	4699      	mov	r9, r3
 800b582:	4623      	mov	r3, r4
 800b584:	eb18 0303 	adds.w	r3, r8, r3
 800b588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b58c:	462b      	mov	r3, r5
 800b58e:	eb49 0303 	adc.w	r3, r9, r3
 800b592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b5a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b5a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	18db      	adds	r3, r3, r3
 800b5ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	eb42 0303 	adc.w	r3, r2, r3
 800b5b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b5bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b5c0:	f7f5 fb42 	bl	8000c48 <__aeabi_uldivmod>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4b61      	ldr	r3, [pc, #388]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b5ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ce:	095b      	lsrs	r3, r3, #5
 800b5d0:	011c      	lsls	r4, r3, #4
 800b5d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b5e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	464b      	mov	r3, r9
 800b5e8:	1891      	adds	r1, r2, r2
 800b5ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b5ec:	415b      	adcs	r3, r3
 800b5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	eb12 0a01 	adds.w	sl, r2, r1
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	eb43 0b01 	adc.w	fp, r3, r1
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b60c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b614:	4692      	mov	sl, r2
 800b616:	469b      	mov	fp, r3
 800b618:	4643      	mov	r3, r8
 800b61a:	eb1a 0303 	adds.w	r3, sl, r3
 800b61e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b622:	464b      	mov	r3, r9
 800b624:	eb4b 0303 	adc.w	r3, fp, r3
 800b628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b638:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b63c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b640:	460b      	mov	r3, r1
 800b642:	18db      	adds	r3, r3, r3
 800b644:	643b      	str	r3, [r7, #64]	@ 0x40
 800b646:	4613      	mov	r3, r2
 800b648:	eb42 0303 	adc.w	r3, r2, r3
 800b64c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b64e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b656:	f7f5 faf7 	bl	8000c48 <__aeabi_uldivmod>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4611      	mov	r1, r2
 800b660:	4b3b      	ldr	r3, [pc, #236]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b662:	fba3 2301 	umull	r2, r3, r3, r1
 800b666:	095b      	lsrs	r3, r3, #5
 800b668:	2264      	movs	r2, #100	@ 0x64
 800b66a:	fb02 f303 	mul.w	r3, r2, r3
 800b66e:	1acb      	subs	r3, r1, r3
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b676:	4b36      	ldr	r3, [pc, #216]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b678:	fba3 2302 	umull	r2, r3, r3, r2
 800b67c:	095b      	lsrs	r3, r3, #5
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b684:	441c      	add	r4, r3
 800b686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b690:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b698:	4642      	mov	r2, r8
 800b69a:	464b      	mov	r3, r9
 800b69c:	1891      	adds	r1, r2, r2
 800b69e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b6a0:	415b      	adcs	r3, r3
 800b6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	1851      	adds	r1, r2, r1
 800b6ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	414b      	adcs	r3, r1
 800b6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b6c0:	4659      	mov	r1, fp
 800b6c2:	00cb      	lsls	r3, r1, #3
 800b6c4:	4651      	mov	r1, sl
 800b6c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ca:	4651      	mov	r1, sl
 800b6cc:	00ca      	lsls	r2, r1, #3
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	189b      	adds	r3, r3, r2
 800b6d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6dc:	464b      	mov	r3, r9
 800b6de:	460a      	mov	r2, r1
 800b6e0:	eb42 0303 	adc.w	r3, r2, r3
 800b6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b6f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b6f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	18db      	adds	r3, r3, r3
 800b700:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b702:	4613      	mov	r3, r2
 800b704:	eb42 0303 	adc.w	r3, r2, r3
 800b708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b70a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b70e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b712:	f7f5 fa99 	bl	8000c48 <__aeabi_uldivmod>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b71c:	fba3 1302 	umull	r1, r3, r3, r2
 800b720:	095b      	lsrs	r3, r3, #5
 800b722:	2164      	movs	r1, #100	@ 0x64
 800b724:	fb01 f303 	mul.w	r3, r1, r3
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	3332      	adds	r3, #50	@ 0x32
 800b72e:	4a08      	ldr	r2, [pc, #32]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b730:	fba2 2303 	umull	r2, r3, r2, r3
 800b734:	095b      	lsrs	r3, r3, #5
 800b736:	f003 0207 	and.w	r2, r3, #7
 800b73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4422      	add	r2, r4
 800b742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b744:	e106      	b.n	800b954 <UART_SetConfig+0x4d8>
 800b746:	bf00      	nop
 800b748:	40011000 	.word	0x40011000
 800b74c:	40011400 	.word	0x40011400
 800b750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b758:	2200      	movs	r2, #0
 800b75a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b75e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b766:	4642      	mov	r2, r8
 800b768:	464b      	mov	r3, r9
 800b76a:	1891      	adds	r1, r2, r2
 800b76c:	6239      	str	r1, [r7, #32]
 800b76e:	415b      	adcs	r3, r3
 800b770:	627b      	str	r3, [r7, #36]	@ 0x24
 800b772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b776:	4641      	mov	r1, r8
 800b778:	1854      	adds	r4, r2, r1
 800b77a:	4649      	mov	r1, r9
 800b77c:	eb43 0501 	adc.w	r5, r3, r1
 800b780:	f04f 0200 	mov.w	r2, #0
 800b784:	f04f 0300 	mov.w	r3, #0
 800b788:	00eb      	lsls	r3, r5, #3
 800b78a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b78e:	00e2      	lsls	r2, r4, #3
 800b790:	4614      	mov	r4, r2
 800b792:	461d      	mov	r5, r3
 800b794:	4643      	mov	r3, r8
 800b796:	18e3      	adds	r3, r4, r3
 800b798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b79c:	464b      	mov	r3, r9
 800b79e:	eb45 0303 	adc.w	r3, r5, r3
 800b7a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b7b6:	f04f 0200 	mov.w	r2, #0
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	008b      	lsls	r3, r1, #2
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	008a      	lsls	r2, r1, #2
 800b7d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b7d4:	f7f5 fa38 	bl	8000c48 <__aeabi_uldivmod>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4b60      	ldr	r3, [pc, #384]	@ (800b960 <UART_SetConfig+0x4e4>)
 800b7de:	fba3 2302 	umull	r2, r3, r3, r2
 800b7e2:	095b      	lsrs	r3, r3, #5
 800b7e4:	011c      	lsls	r4, r3, #4
 800b7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b7f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	1891      	adds	r1, r2, r2
 800b7fe:	61b9      	str	r1, [r7, #24]
 800b800:	415b      	adcs	r3, r3
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b808:	4641      	mov	r1, r8
 800b80a:	1851      	adds	r1, r2, r1
 800b80c:	6139      	str	r1, [r7, #16]
 800b80e:	4649      	mov	r1, r9
 800b810:	414b      	adcs	r3, r1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	f04f 0300 	mov.w	r3, #0
 800b81c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b820:	4659      	mov	r1, fp
 800b822:	00cb      	lsls	r3, r1, #3
 800b824:	4651      	mov	r1, sl
 800b826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b82a:	4651      	mov	r1, sl
 800b82c:	00ca      	lsls	r2, r1, #3
 800b82e:	4610      	mov	r0, r2
 800b830:	4619      	mov	r1, r3
 800b832:	4603      	mov	r3, r0
 800b834:	4642      	mov	r2, r8
 800b836:	189b      	adds	r3, r3, r2
 800b838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b83c:	464b      	mov	r3, r9
 800b83e:	460a      	mov	r2, r1
 800b840:	eb42 0303 	adc.w	r3, r2, r3
 800b844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b852:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b854:	f04f 0200 	mov.w	r2, #0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b860:	4649      	mov	r1, r9
 800b862:	008b      	lsls	r3, r1, #2
 800b864:	4641      	mov	r1, r8
 800b866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b86a:	4641      	mov	r1, r8
 800b86c:	008a      	lsls	r2, r1, #2
 800b86e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b872:	f7f5 f9e9 	bl	8000c48 <__aeabi_uldivmod>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4611      	mov	r1, r2
 800b87c:	4b38      	ldr	r3, [pc, #224]	@ (800b960 <UART_SetConfig+0x4e4>)
 800b87e:	fba3 2301 	umull	r2, r3, r3, r1
 800b882:	095b      	lsrs	r3, r3, #5
 800b884:	2264      	movs	r2, #100	@ 0x64
 800b886:	fb02 f303 	mul.w	r3, r2, r3
 800b88a:	1acb      	subs	r3, r1, r3
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	3332      	adds	r3, #50	@ 0x32
 800b890:	4a33      	ldr	r2, [pc, #204]	@ (800b960 <UART_SetConfig+0x4e4>)
 800b892:	fba2 2303 	umull	r2, r3, r2, r3
 800b896:	095b      	lsrs	r3, r3, #5
 800b898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b89c:	441c      	add	r4, r3
 800b89e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b8a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b8a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b8ac:	4642      	mov	r2, r8
 800b8ae:	464b      	mov	r3, r9
 800b8b0:	1891      	adds	r1, r2, r2
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	415b      	adcs	r3, r3
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8bc:	4641      	mov	r1, r8
 800b8be:	1851      	adds	r1, r2, r1
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	414b      	adcs	r3, r1
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	f04f 0200 	mov.w	r2, #0
 800b8cc:	f04f 0300 	mov.w	r3, #0
 800b8d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	00cb      	lsls	r3, r1, #3
 800b8d8:	4651      	mov	r1, sl
 800b8da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8de:	4651      	mov	r1, sl
 800b8e0:	00ca      	lsls	r2, r1, #3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	189b      	adds	r3, r3, r2
 800b8ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8ee:	464b      	mov	r3, r9
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	eb42 0303 	adc.w	r3, r2, r3
 800b8f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	663b      	str	r3, [r7, #96]	@ 0x60
 800b902:	667a      	str	r2, [r7, #100]	@ 0x64
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	f04f 0300 	mov.w	r3, #0
 800b90c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b910:	4649      	mov	r1, r9
 800b912:	008b      	lsls	r3, r1, #2
 800b914:	4641      	mov	r1, r8
 800b916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b91a:	4641      	mov	r1, r8
 800b91c:	008a      	lsls	r2, r1, #2
 800b91e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b922:	f7f5 f991 	bl	8000c48 <__aeabi_uldivmod>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	4b0d      	ldr	r3, [pc, #52]	@ (800b960 <UART_SetConfig+0x4e4>)
 800b92c:	fba3 1302 	umull	r1, r3, r3, r2
 800b930:	095b      	lsrs	r3, r3, #5
 800b932:	2164      	movs	r1, #100	@ 0x64
 800b934:	fb01 f303 	mul.w	r3, r1, r3
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	3332      	adds	r3, #50	@ 0x32
 800b93e:	4a08      	ldr	r2, [pc, #32]	@ (800b960 <UART_SetConfig+0x4e4>)
 800b940:	fba2 2303 	umull	r2, r3, r2, r3
 800b944:	095b      	lsrs	r3, r3, #5
 800b946:	f003 020f 	and.w	r2, r3, #15
 800b94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4422      	add	r2, r4
 800b952:	609a      	str	r2, [r3, #8]
}
 800b954:	bf00      	nop
 800b956:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b95a:	46bd      	mov	sp, r7
 800b95c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b960:	51eb851f 	.word	0x51eb851f

0800b964 <__cvt>:
 800b964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b968:	ec57 6b10 	vmov	r6, r7, d0
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	460c      	mov	r4, r1
 800b970:	4619      	mov	r1, r3
 800b972:	463b      	mov	r3, r7
 800b974:	bfbb      	ittet	lt
 800b976:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b97a:	461f      	movlt	r7, r3
 800b97c:	2300      	movge	r3, #0
 800b97e:	232d      	movlt	r3, #45	@ 0x2d
 800b980:	700b      	strb	r3, [r1, #0]
 800b982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b984:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b988:	4691      	mov	r9, r2
 800b98a:	f023 0820 	bic.w	r8, r3, #32
 800b98e:	bfbc      	itt	lt
 800b990:	4632      	movlt	r2, r6
 800b992:	4616      	movlt	r6, r2
 800b994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b998:	d005      	beq.n	800b9a6 <__cvt+0x42>
 800b99a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b99e:	d100      	bne.n	800b9a2 <__cvt+0x3e>
 800b9a0:	3401      	adds	r4, #1
 800b9a2:	2102      	movs	r1, #2
 800b9a4:	e000      	b.n	800b9a8 <__cvt+0x44>
 800b9a6:	2103      	movs	r1, #3
 800b9a8:	ab03      	add	r3, sp, #12
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	ab02      	add	r3, sp, #8
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	ec47 6b10 	vmov	d0, r6, r7
 800b9b4:	4653      	mov	r3, sl
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	f000 ffb2 	bl	800c920 <_dtoa_r>
 800b9bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	d119      	bne.n	800b9f8 <__cvt+0x94>
 800b9c4:	f019 0f01 	tst.w	r9, #1
 800b9c8:	d00e      	beq.n	800b9e8 <__cvt+0x84>
 800b9ca:	eb00 0904 	add.w	r9, r0, r4
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	f7f5 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9da:	b108      	cbz	r0, 800b9e0 <__cvt+0x7c>
 800b9dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9e0:	2230      	movs	r2, #48	@ 0x30
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	454b      	cmp	r3, r9
 800b9e6:	d31e      	bcc.n	800ba26 <__cvt+0xc2>
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ec:	1b5b      	subs	r3, r3, r5
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	b004      	add	sp, #16
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9fc:	eb00 0904 	add.w	r9, r0, r4
 800ba00:	d1e5      	bne.n	800b9ce <__cvt+0x6a>
 800ba02:	7803      	ldrb	r3, [r0, #0]
 800ba04:	2b30      	cmp	r3, #48	@ 0x30
 800ba06:	d10a      	bne.n	800ba1e <__cvt+0xba>
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	4639      	mov	r1, r7
 800ba10:	f7f5 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba14:	b918      	cbnz	r0, 800ba1e <__cvt+0xba>
 800ba16:	f1c4 0401 	rsb	r4, r4, #1
 800ba1a:	f8ca 4000 	str.w	r4, [sl]
 800ba1e:	f8da 3000 	ldr.w	r3, [sl]
 800ba22:	4499      	add	r9, r3
 800ba24:	e7d3      	b.n	800b9ce <__cvt+0x6a>
 800ba26:	1c59      	adds	r1, r3, #1
 800ba28:	9103      	str	r1, [sp, #12]
 800ba2a:	701a      	strb	r2, [r3, #0]
 800ba2c:	e7d9      	b.n	800b9e2 <__cvt+0x7e>

0800ba2e <__exponent>:
 800ba2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba30:	2900      	cmp	r1, #0
 800ba32:	bfba      	itte	lt
 800ba34:	4249      	neglt	r1, r1
 800ba36:	232d      	movlt	r3, #45	@ 0x2d
 800ba38:	232b      	movge	r3, #43	@ 0x2b
 800ba3a:	2909      	cmp	r1, #9
 800ba3c:	7002      	strb	r2, [r0, #0]
 800ba3e:	7043      	strb	r3, [r0, #1]
 800ba40:	dd29      	ble.n	800ba96 <__exponent+0x68>
 800ba42:	f10d 0307 	add.w	r3, sp, #7
 800ba46:	461d      	mov	r5, r3
 800ba48:	270a      	movs	r7, #10
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba50:	fb07 1416 	mls	r4, r7, r6, r1
 800ba54:	3430      	adds	r4, #48	@ 0x30
 800ba56:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	2c63      	cmp	r4, #99	@ 0x63
 800ba5e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba62:	4631      	mov	r1, r6
 800ba64:	dcf1      	bgt.n	800ba4a <__exponent+0x1c>
 800ba66:	3130      	adds	r1, #48	@ 0x30
 800ba68:	1e94      	subs	r4, r2, #2
 800ba6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba6e:	1c41      	adds	r1, r0, #1
 800ba70:	4623      	mov	r3, r4
 800ba72:	42ab      	cmp	r3, r5
 800ba74:	d30a      	bcc.n	800ba8c <__exponent+0x5e>
 800ba76:	f10d 0309 	add.w	r3, sp, #9
 800ba7a:	1a9b      	subs	r3, r3, r2
 800ba7c:	42ac      	cmp	r4, r5
 800ba7e:	bf88      	it	hi
 800ba80:	2300      	movhi	r3, #0
 800ba82:	3302      	adds	r3, #2
 800ba84:	4403      	add	r3, r0
 800ba86:	1a18      	subs	r0, r3, r0
 800ba88:	b003      	add	sp, #12
 800ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba90:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba94:	e7ed      	b.n	800ba72 <__exponent+0x44>
 800ba96:	2330      	movs	r3, #48	@ 0x30
 800ba98:	3130      	adds	r1, #48	@ 0x30
 800ba9a:	7083      	strb	r3, [r0, #2]
 800ba9c:	70c1      	strb	r1, [r0, #3]
 800ba9e:	1d03      	adds	r3, r0, #4
 800baa0:	e7f1      	b.n	800ba86 <__exponent+0x58>
	...

0800baa4 <_printf_float>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	b08d      	sub	sp, #52	@ 0x34
 800baaa:	460c      	mov	r4, r1
 800baac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bab0:	4616      	mov	r6, r2
 800bab2:	461f      	mov	r7, r3
 800bab4:	4605      	mov	r5, r0
 800bab6:	f000 fe23 	bl	800c700 <_localeconv_r>
 800baba:	6803      	ldr	r3, [r0, #0]
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f4 fbd6 	bl	8000270 <strlen>
 800bac4:	2300      	movs	r3, #0
 800bac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac8:	f8d8 3000 	ldr.w	r3, [r8]
 800bacc:	9005      	str	r0, [sp, #20]
 800bace:	3307      	adds	r3, #7
 800bad0:	f023 0307 	bic.w	r3, r3, #7
 800bad4:	f103 0208 	add.w	r2, r3, #8
 800bad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800badc:	f8d4 b000 	ldr.w	fp, [r4]
 800bae0:	f8c8 2000 	str.w	r2, [r8]
 800bae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800baec:	9307      	str	r3, [sp, #28]
 800baee:	f8cd 8018 	str.w	r8, [sp, #24]
 800baf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800baf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bafa:	4b9c      	ldr	r3, [pc, #624]	@ (800bd6c <_printf_float+0x2c8>)
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	f7f5 f814 	bl	8000b2c <__aeabi_dcmpun>
 800bb04:	bb70      	cbnz	r0, 800bb64 <_printf_float+0xc0>
 800bb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb0a:	4b98      	ldr	r3, [pc, #608]	@ (800bd6c <_printf_float+0x2c8>)
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	f7f4 ffee 	bl	8000af0 <__aeabi_dcmple>
 800bb14:	bb30      	cbnz	r0, 800bb64 <_printf_float+0xc0>
 800bb16:	2200      	movs	r2, #0
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 ffdd 	bl	8000adc <__aeabi_dcmplt>
 800bb22:	b110      	cbz	r0, 800bb2a <_printf_float+0x86>
 800bb24:	232d      	movs	r3, #45	@ 0x2d
 800bb26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb2a:	4a91      	ldr	r2, [pc, #580]	@ (800bd70 <_printf_float+0x2cc>)
 800bb2c:	4b91      	ldr	r3, [pc, #580]	@ (800bd74 <_printf_float+0x2d0>)
 800bb2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb32:	bf8c      	ite	hi
 800bb34:	4690      	movhi	r8, r2
 800bb36:	4698      	movls	r8, r3
 800bb38:	2303      	movs	r3, #3
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	f02b 0304 	bic.w	r3, fp, #4
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	f04f 0900 	mov.w	r9, #0
 800bb46:	9700      	str	r7, [sp, #0]
 800bb48:	4633      	mov	r3, r6
 800bb4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f000 f9d2 	bl	800bef8 <_printf_common>
 800bb54:	3001      	adds	r0, #1
 800bb56:	f040 808d 	bne.w	800bc74 <_printf_float+0x1d0>
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	b00d      	add	sp, #52	@ 0x34
 800bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 ffde 	bl	8000b2c <__aeabi_dcmpun>
 800bb70:	b140      	cbz	r0, 800bb84 <_printf_float+0xe0>
 800bb72:	464b      	mov	r3, r9
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfbc      	itt	lt
 800bb78:	232d      	movlt	r3, #45	@ 0x2d
 800bb7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb7e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd78 <_printf_float+0x2d4>)
 800bb80:	4b7e      	ldr	r3, [pc, #504]	@ (800bd7c <_printf_float+0x2d8>)
 800bb82:	e7d4      	b.n	800bb2e <_printf_float+0x8a>
 800bb84:	6863      	ldr	r3, [r4, #4]
 800bb86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb8a:	9206      	str	r2, [sp, #24]
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	d13b      	bne.n	800bc08 <_printf_float+0x164>
 800bb90:	2306      	movs	r3, #6
 800bb92:	6063      	str	r3, [r4, #4]
 800bb94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb98:	2300      	movs	r3, #0
 800bb9a:	6022      	str	r2, [r4, #0]
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bba0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bba4:	ab09      	add	r3, sp, #36	@ 0x24
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	6861      	ldr	r1, [r4, #4]
 800bbaa:	ec49 8b10 	vmov	d0, r8, r9
 800bbae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f7ff fed6 	bl	800b964 <__cvt>
 800bbb8:	9b06      	ldr	r3, [sp, #24]
 800bbba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbbc:	2b47      	cmp	r3, #71	@ 0x47
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	d129      	bne.n	800bc16 <_printf_float+0x172>
 800bbc2:	1cc8      	adds	r0, r1, #3
 800bbc4:	db02      	blt.n	800bbcc <_printf_float+0x128>
 800bbc6:	6863      	ldr	r3, [r4, #4]
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	dd41      	ble.n	800bc50 <_printf_float+0x1ac>
 800bbcc:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbd0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbd4:	3901      	subs	r1, #1
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bbdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbde:	f7ff ff26 	bl	800ba2e <__exponent>
 800bbe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbe4:	1813      	adds	r3, r2, r0
 800bbe6:	2a01      	cmp	r2, #1
 800bbe8:	4681      	mov	r9, r0
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	dc02      	bgt.n	800bbf4 <_printf_float+0x150>
 800bbee:	6822      	ldr	r2, [r4, #0]
 800bbf0:	07d2      	lsls	r2, r2, #31
 800bbf2:	d501      	bpl.n	800bbf8 <_printf_float+0x154>
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	6123      	str	r3, [r4, #16]
 800bbf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0a2      	beq.n	800bb46 <_printf_float+0xa2>
 800bc00:	232d      	movs	r3, #45	@ 0x2d
 800bc02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc06:	e79e      	b.n	800bb46 <_printf_float+0xa2>
 800bc08:	9a06      	ldr	r2, [sp, #24]
 800bc0a:	2a47      	cmp	r2, #71	@ 0x47
 800bc0c:	d1c2      	bne.n	800bb94 <_printf_float+0xf0>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1c0      	bne.n	800bb94 <_printf_float+0xf0>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e7bd      	b.n	800bb92 <_printf_float+0xee>
 800bc16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc1a:	d9db      	bls.n	800bbd4 <_printf_float+0x130>
 800bc1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc20:	d118      	bne.n	800bc54 <_printf_float+0x1b0>
 800bc22:	2900      	cmp	r1, #0
 800bc24:	6863      	ldr	r3, [r4, #4]
 800bc26:	dd0b      	ble.n	800bc40 <_printf_float+0x19c>
 800bc28:	6121      	str	r1, [r4, #16]
 800bc2a:	b913      	cbnz	r3, 800bc32 <_printf_float+0x18e>
 800bc2c:	6822      	ldr	r2, [r4, #0]
 800bc2e:	07d0      	lsls	r0, r2, #31
 800bc30:	d502      	bpl.n	800bc38 <_printf_float+0x194>
 800bc32:	3301      	adds	r3, #1
 800bc34:	440b      	add	r3, r1
 800bc36:	6123      	str	r3, [r4, #16]
 800bc38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc3a:	f04f 0900 	mov.w	r9, #0
 800bc3e:	e7db      	b.n	800bbf8 <_printf_float+0x154>
 800bc40:	b913      	cbnz	r3, 800bc48 <_printf_float+0x1a4>
 800bc42:	6822      	ldr	r2, [r4, #0]
 800bc44:	07d2      	lsls	r2, r2, #31
 800bc46:	d501      	bpl.n	800bc4c <_printf_float+0x1a8>
 800bc48:	3302      	adds	r3, #2
 800bc4a:	e7f4      	b.n	800bc36 <_printf_float+0x192>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7f2      	b.n	800bc36 <_printf_float+0x192>
 800bc50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc56:	4299      	cmp	r1, r3
 800bc58:	db05      	blt.n	800bc66 <_printf_float+0x1c2>
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	6121      	str	r1, [r4, #16]
 800bc5e:	07d8      	lsls	r0, r3, #31
 800bc60:	d5ea      	bpl.n	800bc38 <_printf_float+0x194>
 800bc62:	1c4b      	adds	r3, r1, #1
 800bc64:	e7e7      	b.n	800bc36 <_printf_float+0x192>
 800bc66:	2900      	cmp	r1, #0
 800bc68:	bfd4      	ite	le
 800bc6a:	f1c1 0202 	rsble	r2, r1, #2
 800bc6e:	2201      	movgt	r2, #1
 800bc70:	4413      	add	r3, r2
 800bc72:	e7e0      	b.n	800bc36 <_printf_float+0x192>
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	055a      	lsls	r2, r3, #21
 800bc78:	d407      	bmi.n	800bc8a <_printf_float+0x1e6>
 800bc7a:	6923      	ldr	r3, [r4, #16]
 800bc7c:	4642      	mov	r2, r8
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	d12b      	bne.n	800bce0 <_printf_float+0x23c>
 800bc88:	e767      	b.n	800bb5a <_printf_float+0xb6>
 800bc8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc8e:	f240 80dd 	bls.w	800be4c <_printf_float+0x3a8>
 800bc92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc96:	2200      	movs	r2, #0
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f7f4 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d033      	beq.n	800bd0a <_printf_float+0x266>
 800bca2:	4a37      	ldr	r2, [pc, #220]	@ (800bd80 <_printf_float+0x2dc>)
 800bca4:	2301      	movs	r3, #1
 800bca6:	4631      	mov	r1, r6
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b8      	blx	r7
 800bcac:	3001      	adds	r0, #1
 800bcae:	f43f af54 	beq.w	800bb5a <_printf_float+0xb6>
 800bcb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bcb6:	4543      	cmp	r3, r8
 800bcb8:	db02      	blt.n	800bcc0 <_printf_float+0x21c>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	07d8      	lsls	r0, r3, #31
 800bcbe:	d50f      	bpl.n	800bce0 <_printf_float+0x23c>
 800bcc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	f43f af45 	beq.w	800bb5a <_printf_float+0xb6>
 800bcd0:	f04f 0900 	mov.w	r9, #0
 800bcd4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcd8:	f104 0a1a 	add.w	sl, r4, #26
 800bcdc:	45c8      	cmp	r8, r9
 800bcde:	dc09      	bgt.n	800bcf4 <_printf_float+0x250>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	079b      	lsls	r3, r3, #30
 800bce4:	f100 8103 	bmi.w	800beee <_printf_float+0x44a>
 800bce8:	68e0      	ldr	r0, [r4, #12]
 800bcea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcec:	4298      	cmp	r0, r3
 800bcee:	bfb8      	it	lt
 800bcf0:	4618      	movlt	r0, r3
 800bcf2:	e734      	b.n	800bb5e <_printf_float+0xba>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4652      	mov	r2, sl
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	47b8      	blx	r7
 800bcfe:	3001      	adds	r0, #1
 800bd00:	f43f af2b 	beq.w	800bb5a <_printf_float+0xb6>
 800bd04:	f109 0901 	add.w	r9, r9, #1
 800bd08:	e7e8      	b.n	800bcdc <_printf_float+0x238>
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dc39      	bgt.n	800bd84 <_printf_float+0x2e0>
 800bd10:	4a1b      	ldr	r2, [pc, #108]	@ (800bd80 <_printf_float+0x2dc>)
 800bd12:	2301      	movs	r3, #1
 800bd14:	4631      	mov	r1, r6
 800bd16:	4628      	mov	r0, r5
 800bd18:	47b8      	blx	r7
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	f43f af1d 	beq.w	800bb5a <_printf_float+0xb6>
 800bd20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd24:	ea59 0303 	orrs.w	r3, r9, r3
 800bd28:	d102      	bne.n	800bd30 <_printf_float+0x28c>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	07d9      	lsls	r1, r3, #31
 800bd2e:	d5d7      	bpl.n	800bce0 <_printf_float+0x23c>
 800bd30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd34:	4631      	mov	r1, r6
 800bd36:	4628      	mov	r0, r5
 800bd38:	47b8      	blx	r7
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	f43f af0d 	beq.w	800bb5a <_printf_float+0xb6>
 800bd40:	f04f 0a00 	mov.w	sl, #0
 800bd44:	f104 0b1a 	add.w	fp, r4, #26
 800bd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4a:	425b      	negs	r3, r3
 800bd4c:	4553      	cmp	r3, sl
 800bd4e:	dc01      	bgt.n	800bd54 <_printf_float+0x2b0>
 800bd50:	464b      	mov	r3, r9
 800bd52:	e793      	b.n	800bc7c <_printf_float+0x1d8>
 800bd54:	2301      	movs	r3, #1
 800bd56:	465a      	mov	r2, fp
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f aefb 	beq.w	800bb5a <_printf_float+0xb6>
 800bd64:	f10a 0a01 	add.w	sl, sl, #1
 800bd68:	e7ee      	b.n	800bd48 <_printf_float+0x2a4>
 800bd6a:	bf00      	nop
 800bd6c:	7fefffff 	.word	0x7fefffff
 800bd70:	0800f90c 	.word	0x0800f90c
 800bd74:	0800f908 	.word	0x0800f908
 800bd78:	0800f914 	.word	0x0800f914
 800bd7c:	0800f910 	.word	0x0800f910
 800bd80:	0800f918 	.word	0x0800f918
 800bd84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd8a:	4553      	cmp	r3, sl
 800bd8c:	bfa8      	it	ge
 800bd8e:	4653      	movge	r3, sl
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	4699      	mov	r9, r3
 800bd94:	dc36      	bgt.n	800be04 <_printf_float+0x360>
 800bd96:	f04f 0b00 	mov.w	fp, #0
 800bd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd9e:	f104 021a 	add.w	r2, r4, #26
 800bda2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bda4:	9306      	str	r3, [sp, #24]
 800bda6:	eba3 0309 	sub.w	r3, r3, r9
 800bdaa:	455b      	cmp	r3, fp
 800bdac:	dc31      	bgt.n	800be12 <_printf_float+0x36e>
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	459a      	cmp	sl, r3
 800bdb2:	dc3a      	bgt.n	800be2a <_printf_float+0x386>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	07da      	lsls	r2, r3, #31
 800bdb8:	d437      	bmi.n	800be2a <_printf_float+0x386>
 800bdba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdbc:	ebaa 0903 	sub.w	r9, sl, r3
 800bdc0:	9b06      	ldr	r3, [sp, #24]
 800bdc2:	ebaa 0303 	sub.w	r3, sl, r3
 800bdc6:	4599      	cmp	r9, r3
 800bdc8:	bfa8      	it	ge
 800bdca:	4699      	movge	r9, r3
 800bdcc:	f1b9 0f00 	cmp.w	r9, #0
 800bdd0:	dc33      	bgt.n	800be3a <_printf_float+0x396>
 800bdd2:	f04f 0800 	mov.w	r8, #0
 800bdd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdda:	f104 0b1a 	add.w	fp, r4, #26
 800bdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde0:	ebaa 0303 	sub.w	r3, sl, r3
 800bde4:	eba3 0309 	sub.w	r3, r3, r9
 800bde8:	4543      	cmp	r3, r8
 800bdea:	f77f af79 	ble.w	800bce0 <_printf_float+0x23c>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	465a      	mov	r2, fp
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b8      	blx	r7
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	f43f aeae 	beq.w	800bb5a <_printf_float+0xb6>
 800bdfe:	f108 0801 	add.w	r8, r8, #1
 800be02:	e7ec      	b.n	800bdde <_printf_float+0x33a>
 800be04:	4642      	mov	r2, r8
 800be06:	4631      	mov	r1, r6
 800be08:	4628      	mov	r0, r5
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	d1c2      	bne.n	800bd96 <_printf_float+0x2f2>
 800be10:	e6a3      	b.n	800bb5a <_printf_float+0xb6>
 800be12:	2301      	movs	r3, #1
 800be14:	4631      	mov	r1, r6
 800be16:	4628      	mov	r0, r5
 800be18:	9206      	str	r2, [sp, #24]
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	f43f ae9c 	beq.w	800bb5a <_printf_float+0xb6>
 800be22:	9a06      	ldr	r2, [sp, #24]
 800be24:	f10b 0b01 	add.w	fp, fp, #1
 800be28:	e7bb      	b.n	800bda2 <_printf_float+0x2fe>
 800be2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be2e:	4631      	mov	r1, r6
 800be30:	4628      	mov	r0, r5
 800be32:	47b8      	blx	r7
 800be34:	3001      	adds	r0, #1
 800be36:	d1c0      	bne.n	800bdba <_printf_float+0x316>
 800be38:	e68f      	b.n	800bb5a <_printf_float+0xb6>
 800be3a:	9a06      	ldr	r2, [sp, #24]
 800be3c:	464b      	mov	r3, r9
 800be3e:	4442      	add	r2, r8
 800be40:	4631      	mov	r1, r6
 800be42:	4628      	mov	r0, r5
 800be44:	47b8      	blx	r7
 800be46:	3001      	adds	r0, #1
 800be48:	d1c3      	bne.n	800bdd2 <_printf_float+0x32e>
 800be4a:	e686      	b.n	800bb5a <_printf_float+0xb6>
 800be4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be50:	f1ba 0f01 	cmp.w	sl, #1
 800be54:	dc01      	bgt.n	800be5a <_printf_float+0x3b6>
 800be56:	07db      	lsls	r3, r3, #31
 800be58:	d536      	bpl.n	800bec8 <_printf_float+0x424>
 800be5a:	2301      	movs	r3, #1
 800be5c:	4642      	mov	r2, r8
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	f43f ae78 	beq.w	800bb5a <_printf_float+0xb6>
 800be6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	f43f ae70 	beq.w	800bb5a <_printf_float+0xb6>
 800be7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be7e:	2200      	movs	r2, #0
 800be80:	2300      	movs	r3, #0
 800be82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be86:	f7f4 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800be8a:	b9c0      	cbnz	r0, 800bebe <_printf_float+0x41a>
 800be8c:	4653      	mov	r3, sl
 800be8e:	f108 0201 	add.w	r2, r8, #1
 800be92:	4631      	mov	r1, r6
 800be94:	4628      	mov	r0, r5
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	d10c      	bne.n	800beb6 <_printf_float+0x412>
 800be9c:	e65d      	b.n	800bb5a <_printf_float+0xb6>
 800be9e:	2301      	movs	r3, #1
 800bea0:	465a      	mov	r2, fp
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b8      	blx	r7
 800bea8:	3001      	adds	r0, #1
 800beaa:	f43f ae56 	beq.w	800bb5a <_printf_float+0xb6>
 800beae:	f108 0801 	add.w	r8, r8, #1
 800beb2:	45d0      	cmp	r8, sl
 800beb4:	dbf3      	blt.n	800be9e <_printf_float+0x3fa>
 800beb6:	464b      	mov	r3, r9
 800beb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bebc:	e6df      	b.n	800bc7e <_printf_float+0x1da>
 800bebe:	f04f 0800 	mov.w	r8, #0
 800bec2:	f104 0b1a 	add.w	fp, r4, #26
 800bec6:	e7f4      	b.n	800beb2 <_printf_float+0x40e>
 800bec8:	2301      	movs	r3, #1
 800beca:	4642      	mov	r2, r8
 800becc:	e7e1      	b.n	800be92 <_printf_float+0x3ee>
 800bece:	2301      	movs	r3, #1
 800bed0:	464a      	mov	r2, r9
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	f43f ae3e 	beq.w	800bb5a <_printf_float+0xb6>
 800bede:	f108 0801 	add.w	r8, r8, #1
 800bee2:	68e3      	ldr	r3, [r4, #12]
 800bee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bee6:	1a5b      	subs	r3, r3, r1
 800bee8:	4543      	cmp	r3, r8
 800beea:	dcf0      	bgt.n	800bece <_printf_float+0x42a>
 800beec:	e6fc      	b.n	800bce8 <_printf_float+0x244>
 800beee:	f04f 0800 	mov.w	r8, #0
 800bef2:	f104 0919 	add.w	r9, r4, #25
 800bef6:	e7f4      	b.n	800bee2 <_printf_float+0x43e>

0800bef8 <_printf_common>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	4616      	mov	r6, r2
 800befe:	4698      	mov	r8, r3
 800bf00:	688a      	ldr	r2, [r1, #8]
 800bf02:	690b      	ldr	r3, [r1, #16]
 800bf04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	bfb8      	it	lt
 800bf0c:	4613      	movlt	r3, r2
 800bf0e:	6033      	str	r3, [r6, #0]
 800bf10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf14:	4607      	mov	r7, r0
 800bf16:	460c      	mov	r4, r1
 800bf18:	b10a      	cbz	r2, 800bf1e <_printf_common+0x26>
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	6033      	str	r3, [r6, #0]
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	0699      	lsls	r1, r3, #26
 800bf22:	bf42      	ittt	mi
 800bf24:	6833      	ldrmi	r3, [r6, #0]
 800bf26:	3302      	addmi	r3, #2
 800bf28:	6033      	strmi	r3, [r6, #0]
 800bf2a:	6825      	ldr	r5, [r4, #0]
 800bf2c:	f015 0506 	ands.w	r5, r5, #6
 800bf30:	d106      	bne.n	800bf40 <_printf_common+0x48>
 800bf32:	f104 0a19 	add.w	sl, r4, #25
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	6832      	ldr	r2, [r6, #0]
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	42ab      	cmp	r3, r5
 800bf3e:	dc26      	bgt.n	800bf8e <_printf_common+0x96>
 800bf40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf44:	6822      	ldr	r2, [r4, #0]
 800bf46:	3b00      	subs	r3, #0
 800bf48:	bf18      	it	ne
 800bf4a:	2301      	movne	r3, #1
 800bf4c:	0692      	lsls	r2, r2, #26
 800bf4e:	d42b      	bmi.n	800bfa8 <_printf_common+0xb0>
 800bf50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf54:	4641      	mov	r1, r8
 800bf56:	4638      	mov	r0, r7
 800bf58:	47c8      	blx	r9
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d01e      	beq.n	800bf9c <_printf_common+0xa4>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	6922      	ldr	r2, [r4, #16]
 800bf62:	f003 0306 	and.w	r3, r3, #6
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	bf02      	ittt	eq
 800bf6a:	68e5      	ldreq	r5, [r4, #12]
 800bf6c:	6833      	ldreq	r3, [r6, #0]
 800bf6e:	1aed      	subeq	r5, r5, r3
 800bf70:	68a3      	ldr	r3, [r4, #8]
 800bf72:	bf0c      	ite	eq
 800bf74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf78:	2500      	movne	r5, #0
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	bfc4      	itt	gt
 800bf7e:	1a9b      	subgt	r3, r3, r2
 800bf80:	18ed      	addgt	r5, r5, r3
 800bf82:	2600      	movs	r6, #0
 800bf84:	341a      	adds	r4, #26
 800bf86:	42b5      	cmp	r5, r6
 800bf88:	d11a      	bne.n	800bfc0 <_printf_common+0xc8>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	e008      	b.n	800bfa0 <_printf_common+0xa8>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	4652      	mov	r2, sl
 800bf92:	4641      	mov	r1, r8
 800bf94:	4638      	mov	r0, r7
 800bf96:	47c8      	blx	r9
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d103      	bne.n	800bfa4 <_printf_common+0xac>
 800bf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa4:	3501      	adds	r5, #1
 800bfa6:	e7c6      	b.n	800bf36 <_printf_common+0x3e>
 800bfa8:	18e1      	adds	r1, r4, r3
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	2030      	movs	r0, #48	@ 0x30
 800bfae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfb2:	4422      	add	r2, r4
 800bfb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	e7c7      	b.n	800bf50 <_printf_common+0x58>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	4641      	mov	r1, r8
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	47c8      	blx	r9
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d0e6      	beq.n	800bf9c <_printf_common+0xa4>
 800bfce:	3601      	adds	r6, #1
 800bfd0:	e7d9      	b.n	800bf86 <_printf_common+0x8e>
	...

0800bfd4 <_printf_i>:
 800bfd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	7e0f      	ldrb	r7, [r1, #24]
 800bfda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfdc:	2f78      	cmp	r7, #120	@ 0x78
 800bfde:	4691      	mov	r9, r2
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	469a      	mov	sl, r3
 800bfe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfea:	d807      	bhi.n	800bffc <_printf_i+0x28>
 800bfec:	2f62      	cmp	r7, #98	@ 0x62
 800bfee:	d80a      	bhi.n	800c006 <_printf_i+0x32>
 800bff0:	2f00      	cmp	r7, #0
 800bff2:	f000 80d1 	beq.w	800c198 <_printf_i+0x1c4>
 800bff6:	2f58      	cmp	r7, #88	@ 0x58
 800bff8:	f000 80b8 	beq.w	800c16c <_printf_i+0x198>
 800bffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c004:	e03a      	b.n	800c07c <_printf_i+0xa8>
 800c006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c00a:	2b15      	cmp	r3, #21
 800c00c:	d8f6      	bhi.n	800bffc <_printf_i+0x28>
 800c00e:	a101      	add	r1, pc, #4	@ (adr r1, 800c014 <_printf_i+0x40>)
 800c010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c014:	0800c06d 	.word	0x0800c06d
 800c018:	0800c081 	.word	0x0800c081
 800c01c:	0800bffd 	.word	0x0800bffd
 800c020:	0800bffd 	.word	0x0800bffd
 800c024:	0800bffd 	.word	0x0800bffd
 800c028:	0800bffd 	.word	0x0800bffd
 800c02c:	0800c081 	.word	0x0800c081
 800c030:	0800bffd 	.word	0x0800bffd
 800c034:	0800bffd 	.word	0x0800bffd
 800c038:	0800bffd 	.word	0x0800bffd
 800c03c:	0800bffd 	.word	0x0800bffd
 800c040:	0800c17f 	.word	0x0800c17f
 800c044:	0800c0ab 	.word	0x0800c0ab
 800c048:	0800c139 	.word	0x0800c139
 800c04c:	0800bffd 	.word	0x0800bffd
 800c050:	0800bffd 	.word	0x0800bffd
 800c054:	0800c1a1 	.word	0x0800c1a1
 800c058:	0800bffd 	.word	0x0800bffd
 800c05c:	0800c0ab 	.word	0x0800c0ab
 800c060:	0800bffd 	.word	0x0800bffd
 800c064:	0800bffd 	.word	0x0800bffd
 800c068:	0800c141 	.word	0x0800c141
 800c06c:	6833      	ldr	r3, [r6, #0]
 800c06e:	1d1a      	adds	r2, r3, #4
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6032      	str	r2, [r6, #0]
 800c074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c07c:	2301      	movs	r3, #1
 800c07e:	e09c      	b.n	800c1ba <_printf_i+0x1e6>
 800c080:	6833      	ldr	r3, [r6, #0]
 800c082:	6820      	ldr	r0, [r4, #0]
 800c084:	1d19      	adds	r1, r3, #4
 800c086:	6031      	str	r1, [r6, #0]
 800c088:	0606      	lsls	r6, r0, #24
 800c08a:	d501      	bpl.n	800c090 <_printf_i+0xbc>
 800c08c:	681d      	ldr	r5, [r3, #0]
 800c08e:	e003      	b.n	800c098 <_printf_i+0xc4>
 800c090:	0645      	lsls	r5, r0, #25
 800c092:	d5fb      	bpl.n	800c08c <_printf_i+0xb8>
 800c094:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c098:	2d00      	cmp	r5, #0
 800c09a:	da03      	bge.n	800c0a4 <_printf_i+0xd0>
 800c09c:	232d      	movs	r3, #45	@ 0x2d
 800c09e:	426d      	negs	r5, r5
 800c0a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0a4:	4858      	ldr	r0, [pc, #352]	@ (800c208 <_printf_i+0x234>)
 800c0a6:	230a      	movs	r3, #10
 800c0a8:	e011      	b.n	800c0ce <_printf_i+0xfa>
 800c0aa:	6821      	ldr	r1, [r4, #0]
 800c0ac:	6833      	ldr	r3, [r6, #0]
 800c0ae:	0608      	lsls	r0, r1, #24
 800c0b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0b4:	d402      	bmi.n	800c0bc <_printf_i+0xe8>
 800c0b6:	0649      	lsls	r1, r1, #25
 800c0b8:	bf48      	it	mi
 800c0ba:	b2ad      	uxthmi	r5, r5
 800c0bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0be:	4852      	ldr	r0, [pc, #328]	@ (800c208 <_printf_i+0x234>)
 800c0c0:	6033      	str	r3, [r6, #0]
 800c0c2:	bf14      	ite	ne
 800c0c4:	230a      	movne	r3, #10
 800c0c6:	2308      	moveq	r3, #8
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0ce:	6866      	ldr	r6, [r4, #4]
 800c0d0:	60a6      	str	r6, [r4, #8]
 800c0d2:	2e00      	cmp	r6, #0
 800c0d4:	db05      	blt.n	800c0e2 <_printf_i+0x10e>
 800c0d6:	6821      	ldr	r1, [r4, #0]
 800c0d8:	432e      	orrs	r6, r5
 800c0da:	f021 0104 	bic.w	r1, r1, #4
 800c0de:	6021      	str	r1, [r4, #0]
 800c0e0:	d04b      	beq.n	800c17a <_printf_i+0x1a6>
 800c0e2:	4616      	mov	r6, r2
 800c0e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0e8:	fb03 5711 	mls	r7, r3, r1, r5
 800c0ec:	5dc7      	ldrb	r7, [r0, r7]
 800c0ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0f2:	462f      	mov	r7, r5
 800c0f4:	42bb      	cmp	r3, r7
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	d9f4      	bls.n	800c0e4 <_printf_i+0x110>
 800c0fa:	2b08      	cmp	r3, #8
 800c0fc:	d10b      	bne.n	800c116 <_printf_i+0x142>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	07df      	lsls	r7, r3, #31
 800c102:	d508      	bpl.n	800c116 <_printf_i+0x142>
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	6861      	ldr	r1, [r4, #4]
 800c108:	4299      	cmp	r1, r3
 800c10a:	bfde      	ittt	le
 800c10c:	2330      	movle	r3, #48	@ 0x30
 800c10e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c112:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c116:	1b92      	subs	r2, r2, r6
 800c118:	6122      	str	r2, [r4, #16]
 800c11a:	f8cd a000 	str.w	sl, [sp]
 800c11e:	464b      	mov	r3, r9
 800c120:	aa03      	add	r2, sp, #12
 800c122:	4621      	mov	r1, r4
 800c124:	4640      	mov	r0, r8
 800c126:	f7ff fee7 	bl	800bef8 <_printf_common>
 800c12a:	3001      	adds	r0, #1
 800c12c:	d14a      	bne.n	800c1c4 <_printf_i+0x1f0>
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	b004      	add	sp, #16
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	f043 0320 	orr.w	r3, r3, #32
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	4832      	ldr	r0, [pc, #200]	@ (800c20c <_printf_i+0x238>)
 800c142:	2778      	movs	r7, #120	@ 0x78
 800c144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	6831      	ldr	r1, [r6, #0]
 800c14c:	061f      	lsls	r7, r3, #24
 800c14e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c152:	d402      	bmi.n	800c15a <_printf_i+0x186>
 800c154:	065f      	lsls	r7, r3, #25
 800c156:	bf48      	it	mi
 800c158:	b2ad      	uxthmi	r5, r5
 800c15a:	6031      	str	r1, [r6, #0]
 800c15c:	07d9      	lsls	r1, r3, #31
 800c15e:	bf44      	itt	mi
 800c160:	f043 0320 	orrmi.w	r3, r3, #32
 800c164:	6023      	strmi	r3, [r4, #0]
 800c166:	b11d      	cbz	r5, 800c170 <_printf_i+0x19c>
 800c168:	2310      	movs	r3, #16
 800c16a:	e7ad      	b.n	800c0c8 <_printf_i+0xf4>
 800c16c:	4826      	ldr	r0, [pc, #152]	@ (800c208 <_printf_i+0x234>)
 800c16e:	e7e9      	b.n	800c144 <_printf_i+0x170>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	f023 0320 	bic.w	r3, r3, #32
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	e7f6      	b.n	800c168 <_printf_i+0x194>
 800c17a:	4616      	mov	r6, r2
 800c17c:	e7bd      	b.n	800c0fa <_printf_i+0x126>
 800c17e:	6833      	ldr	r3, [r6, #0]
 800c180:	6825      	ldr	r5, [r4, #0]
 800c182:	6961      	ldr	r1, [r4, #20]
 800c184:	1d18      	adds	r0, r3, #4
 800c186:	6030      	str	r0, [r6, #0]
 800c188:	062e      	lsls	r6, r5, #24
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	d501      	bpl.n	800c192 <_printf_i+0x1be>
 800c18e:	6019      	str	r1, [r3, #0]
 800c190:	e002      	b.n	800c198 <_printf_i+0x1c4>
 800c192:	0668      	lsls	r0, r5, #25
 800c194:	d5fb      	bpl.n	800c18e <_printf_i+0x1ba>
 800c196:	8019      	strh	r1, [r3, #0]
 800c198:	2300      	movs	r3, #0
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	4616      	mov	r6, r2
 800c19e:	e7bc      	b.n	800c11a <_printf_i+0x146>
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	1d1a      	adds	r2, r3, #4
 800c1a4:	6032      	str	r2, [r6, #0]
 800c1a6:	681e      	ldr	r6, [r3, #0]
 800c1a8:	6862      	ldr	r2, [r4, #4]
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7f4 f80f 	bl	80001d0 <memchr>
 800c1b2:	b108      	cbz	r0, 800c1b8 <_printf_i+0x1e4>
 800c1b4:	1b80      	subs	r0, r0, r6
 800c1b6:	6060      	str	r0, [r4, #4]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1c2:	e7aa      	b.n	800c11a <_printf_i+0x146>
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	47d0      	blx	sl
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d0ad      	beq.n	800c12e <_printf_i+0x15a>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	079b      	lsls	r3, r3, #30
 800c1d6:	d413      	bmi.n	800c200 <_printf_i+0x22c>
 800c1d8:	68e0      	ldr	r0, [r4, #12]
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	4298      	cmp	r0, r3
 800c1de:	bfb8      	it	lt
 800c1e0:	4618      	movlt	r0, r3
 800c1e2:	e7a6      	b.n	800c132 <_printf_i+0x15e>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	47d0      	blx	sl
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d09d      	beq.n	800c12e <_printf_i+0x15a>
 800c1f2:	3501      	adds	r5, #1
 800c1f4:	68e3      	ldr	r3, [r4, #12]
 800c1f6:	9903      	ldr	r1, [sp, #12]
 800c1f8:	1a5b      	subs	r3, r3, r1
 800c1fa:	42ab      	cmp	r3, r5
 800c1fc:	dcf2      	bgt.n	800c1e4 <_printf_i+0x210>
 800c1fe:	e7eb      	b.n	800c1d8 <_printf_i+0x204>
 800c200:	2500      	movs	r5, #0
 800c202:	f104 0619 	add.w	r6, r4, #25
 800c206:	e7f5      	b.n	800c1f4 <_printf_i+0x220>
 800c208:	0800f91a 	.word	0x0800f91a
 800c20c:	0800f92b 	.word	0x0800f92b

0800c210 <std>:
 800c210:	2300      	movs	r3, #0
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	e9c0 3300 	strd	r3, r3, [r0]
 800c21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21e:	6083      	str	r3, [r0, #8]
 800c220:	8181      	strh	r1, [r0, #12]
 800c222:	6643      	str	r3, [r0, #100]	@ 0x64
 800c224:	81c2      	strh	r2, [r0, #14]
 800c226:	6183      	str	r3, [r0, #24]
 800c228:	4619      	mov	r1, r3
 800c22a:	2208      	movs	r2, #8
 800c22c:	305c      	adds	r0, #92	@ 0x5c
 800c22e:	f000 fa4f 	bl	800c6d0 <memset>
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <std+0x58>)
 800c234:	6263      	str	r3, [r4, #36]	@ 0x24
 800c236:	4b0d      	ldr	r3, [pc, #52]	@ (800c26c <std+0x5c>)
 800c238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <std+0x60>)
 800c23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c23e:	4b0d      	ldr	r3, [pc, #52]	@ (800c274 <std+0x64>)
 800c240:	6323      	str	r3, [r4, #48]	@ 0x30
 800c242:	4b0d      	ldr	r3, [pc, #52]	@ (800c278 <std+0x68>)
 800c244:	6224      	str	r4, [r4, #32]
 800c246:	429c      	cmp	r4, r3
 800c248:	d006      	beq.n	800c258 <std+0x48>
 800c24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c24e:	4294      	cmp	r4, r2
 800c250:	d002      	beq.n	800c258 <std+0x48>
 800c252:	33d0      	adds	r3, #208	@ 0xd0
 800c254:	429c      	cmp	r4, r3
 800c256:	d105      	bne.n	800c264 <std+0x54>
 800c258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c260:	f000 bac2 	b.w	800c7e8 <__retarget_lock_init_recursive>
 800c264:	bd10      	pop	{r4, pc}
 800c266:	bf00      	nop
 800c268:	0800c501 	.word	0x0800c501
 800c26c:	0800c523 	.word	0x0800c523
 800c270:	0800c55b 	.word	0x0800c55b
 800c274:	0800c57f 	.word	0x0800c57f
 800c278:	20001828 	.word	0x20001828

0800c27c <stdio_exit_handler>:
 800c27c:	4a02      	ldr	r2, [pc, #8]	@ (800c288 <stdio_exit_handler+0xc>)
 800c27e:	4903      	ldr	r1, [pc, #12]	@ (800c28c <stdio_exit_handler+0x10>)
 800c280:	4803      	ldr	r0, [pc, #12]	@ (800c290 <stdio_exit_handler+0x14>)
 800c282:	f000 b869 	b.w	800c358 <_fwalk_sglue>
 800c286:	bf00      	nop
 800c288:	2000013c 	.word	0x2000013c
 800c28c:	0800e3f1 	.word	0x0800e3f1
 800c290:	2000014c 	.word	0x2000014c

0800c294 <cleanup_stdio>:
 800c294:	6841      	ldr	r1, [r0, #4]
 800c296:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c8 <cleanup_stdio+0x34>)
 800c298:	4299      	cmp	r1, r3
 800c29a:	b510      	push	{r4, lr}
 800c29c:	4604      	mov	r4, r0
 800c29e:	d001      	beq.n	800c2a4 <cleanup_stdio+0x10>
 800c2a0:	f002 f8a6 	bl	800e3f0 <_fflush_r>
 800c2a4:	68a1      	ldr	r1, [r4, #8]
 800c2a6:	4b09      	ldr	r3, [pc, #36]	@ (800c2cc <cleanup_stdio+0x38>)
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d002      	beq.n	800c2b2 <cleanup_stdio+0x1e>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f002 f89f 	bl	800e3f0 <_fflush_r>
 800c2b2:	68e1      	ldr	r1, [r4, #12]
 800c2b4:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <cleanup_stdio+0x3c>)
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d004      	beq.n	800c2c4 <cleanup_stdio+0x30>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2c0:	f002 b896 	b.w	800e3f0 <_fflush_r>
 800c2c4:	bd10      	pop	{r4, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20001828 	.word	0x20001828
 800c2cc:	20001890 	.word	0x20001890
 800c2d0:	200018f8 	.word	0x200018f8

0800c2d4 <global_stdio_init.part.0>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c304 <global_stdio_init.part.0+0x30>)
 800c2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800c308 <global_stdio_init.part.0+0x34>)
 800c2da:	4a0c      	ldr	r2, [pc, #48]	@ (800c30c <global_stdio_init.part.0+0x38>)
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	4620      	mov	r0, r4
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2104      	movs	r1, #4
 800c2e4:	f7ff ff94 	bl	800c210 <std>
 800c2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	2109      	movs	r1, #9
 800c2f0:	f7ff ff8e 	bl	800c210 <std>
 800c2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fe:	2112      	movs	r1, #18
 800c300:	f7ff bf86 	b.w	800c210 <std>
 800c304:	20001960 	.word	0x20001960
 800c308:	20001828 	.word	0x20001828
 800c30c:	0800c27d 	.word	0x0800c27d

0800c310 <__sfp_lock_acquire>:
 800c310:	4801      	ldr	r0, [pc, #4]	@ (800c318 <__sfp_lock_acquire+0x8>)
 800c312:	f000 ba6a 	b.w	800c7ea <__retarget_lock_acquire_recursive>
 800c316:	bf00      	nop
 800c318:	20001969 	.word	0x20001969

0800c31c <__sfp_lock_release>:
 800c31c:	4801      	ldr	r0, [pc, #4]	@ (800c324 <__sfp_lock_release+0x8>)
 800c31e:	f000 ba65 	b.w	800c7ec <__retarget_lock_release_recursive>
 800c322:	bf00      	nop
 800c324:	20001969 	.word	0x20001969

0800c328 <__sinit>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	4604      	mov	r4, r0
 800c32c:	f7ff fff0 	bl	800c310 <__sfp_lock_acquire>
 800c330:	6a23      	ldr	r3, [r4, #32]
 800c332:	b11b      	cbz	r3, 800c33c <__sinit+0x14>
 800c334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c338:	f7ff bff0 	b.w	800c31c <__sfp_lock_release>
 800c33c:	4b04      	ldr	r3, [pc, #16]	@ (800c350 <__sinit+0x28>)
 800c33e:	6223      	str	r3, [r4, #32]
 800c340:	4b04      	ldr	r3, [pc, #16]	@ (800c354 <__sinit+0x2c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f5      	bne.n	800c334 <__sinit+0xc>
 800c348:	f7ff ffc4 	bl	800c2d4 <global_stdio_init.part.0>
 800c34c:	e7f2      	b.n	800c334 <__sinit+0xc>
 800c34e:	bf00      	nop
 800c350:	0800c295 	.word	0x0800c295
 800c354:	20001960 	.word	0x20001960

0800c358 <_fwalk_sglue>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4607      	mov	r7, r0
 800c35e:	4688      	mov	r8, r1
 800c360:	4614      	mov	r4, r2
 800c362:	2600      	movs	r6, #0
 800c364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c368:	f1b9 0901 	subs.w	r9, r9, #1
 800c36c:	d505      	bpl.n	800c37a <_fwalk_sglue+0x22>
 800c36e:	6824      	ldr	r4, [r4, #0]
 800c370:	2c00      	cmp	r4, #0
 800c372:	d1f7      	bne.n	800c364 <_fwalk_sglue+0xc>
 800c374:	4630      	mov	r0, r6
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d907      	bls.n	800c390 <_fwalk_sglue+0x38>
 800c380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c384:	3301      	adds	r3, #1
 800c386:	d003      	beq.n	800c390 <_fwalk_sglue+0x38>
 800c388:	4629      	mov	r1, r5
 800c38a:	4638      	mov	r0, r7
 800c38c:	47c0      	blx	r8
 800c38e:	4306      	orrs	r6, r0
 800c390:	3568      	adds	r5, #104	@ 0x68
 800c392:	e7e9      	b.n	800c368 <_fwalk_sglue+0x10>

0800c394 <_puts_r>:
 800c394:	6a03      	ldr	r3, [r0, #32]
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	6884      	ldr	r4, [r0, #8]
 800c39a:	4605      	mov	r5, r0
 800c39c:	460e      	mov	r6, r1
 800c39e:	b90b      	cbnz	r3, 800c3a4 <_puts_r+0x10>
 800c3a0:	f7ff ffc2 	bl	800c328 <__sinit>
 800c3a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3a6:	07db      	lsls	r3, r3, #31
 800c3a8:	d405      	bmi.n	800c3b6 <_puts_r+0x22>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	0598      	lsls	r0, r3, #22
 800c3ae:	d402      	bmi.n	800c3b6 <_puts_r+0x22>
 800c3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3b2:	f000 fa1a 	bl	800c7ea <__retarget_lock_acquire_recursive>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	0719      	lsls	r1, r3, #28
 800c3ba:	d502      	bpl.n	800c3c2 <_puts_r+0x2e>
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d135      	bne.n	800c42e <_puts_r+0x9a>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	f000 f91d 	bl	800c604 <__swsetup_r>
 800c3ca:	b380      	cbz	r0, 800c42e <_puts_r+0x9a>
 800c3cc:	f04f 35ff 	mov.w	r5, #4294967295
 800c3d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3d2:	07da      	lsls	r2, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_puts_r+0x4e>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	059b      	lsls	r3, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_puts_r+0x4e>
 800c3dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3de:	f000 fa05 	bl	800c7ec <__retarget_lock_release_recursive>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	bd70      	pop	{r4, r5, r6, pc}
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da04      	bge.n	800c3f4 <_puts_r+0x60>
 800c3ea:	69a2      	ldr	r2, [r4, #24]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	dc17      	bgt.n	800c420 <_puts_r+0x8c>
 800c3f0:	290a      	cmp	r1, #10
 800c3f2:	d015      	beq.n	800c420 <_puts_r+0x8c>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	6022      	str	r2, [r4, #0]
 800c3fa:	7019      	strb	r1, [r3, #0]
 800c3fc:	68a3      	ldr	r3, [r4, #8]
 800c3fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c402:	3b01      	subs	r3, #1
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	2900      	cmp	r1, #0
 800c408:	d1ed      	bne.n	800c3e6 <_puts_r+0x52>
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	da11      	bge.n	800c432 <_puts_r+0x9e>
 800c40e:	4622      	mov	r2, r4
 800c410:	210a      	movs	r1, #10
 800c412:	4628      	mov	r0, r5
 800c414:	f000 f8b7 	bl	800c586 <__swbuf_r>
 800c418:	3001      	adds	r0, #1
 800c41a:	d0d7      	beq.n	800c3cc <_puts_r+0x38>
 800c41c:	250a      	movs	r5, #10
 800c41e:	e7d7      	b.n	800c3d0 <_puts_r+0x3c>
 800c420:	4622      	mov	r2, r4
 800c422:	4628      	mov	r0, r5
 800c424:	f000 f8af 	bl	800c586 <__swbuf_r>
 800c428:	3001      	adds	r0, #1
 800c42a:	d1e7      	bne.n	800c3fc <_puts_r+0x68>
 800c42c:	e7ce      	b.n	800c3cc <_puts_r+0x38>
 800c42e:	3e01      	subs	r6, #1
 800c430:	e7e4      	b.n	800c3fc <_puts_r+0x68>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	220a      	movs	r2, #10
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	e7ee      	b.n	800c41c <_puts_r+0x88>
	...

0800c440 <puts>:
 800c440:	4b02      	ldr	r3, [pc, #8]	@ (800c44c <puts+0xc>)
 800c442:	4601      	mov	r1, r0
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	f7ff bfa5 	b.w	800c394 <_puts_r>
 800c44a:	bf00      	nop
 800c44c:	20000148 	.word	0x20000148

0800c450 <sniprintf>:
 800c450:	b40c      	push	{r2, r3}
 800c452:	b530      	push	{r4, r5, lr}
 800c454:	4b18      	ldr	r3, [pc, #96]	@ (800c4b8 <sniprintf+0x68>)
 800c456:	1e0c      	subs	r4, r1, #0
 800c458:	681d      	ldr	r5, [r3, #0]
 800c45a:	b09d      	sub	sp, #116	@ 0x74
 800c45c:	da08      	bge.n	800c470 <sniprintf+0x20>
 800c45e:	238b      	movs	r3, #139	@ 0x8b
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	f04f 30ff 	mov.w	r0, #4294967295
 800c466:	b01d      	add	sp, #116	@ 0x74
 800c468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c46c:	b002      	add	sp, #8
 800c46e:	4770      	bx	lr
 800c470:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c474:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c478:	f04f 0300 	mov.w	r3, #0
 800c47c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c47e:	bf14      	ite	ne
 800c480:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c484:	4623      	moveq	r3, r4
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	9307      	str	r3, [sp, #28]
 800c48a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c48e:	9002      	str	r0, [sp, #8]
 800c490:	9006      	str	r0, [sp, #24]
 800c492:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c496:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c498:	ab21      	add	r3, sp, #132	@ 0x84
 800c49a:	a902      	add	r1, sp, #8
 800c49c:	4628      	mov	r0, r5
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	f001 fce4 	bl	800de6c <_svfiprintf_r>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	bfbc      	itt	lt
 800c4a8:	238b      	movlt	r3, #139	@ 0x8b
 800c4aa:	602b      	strlt	r3, [r5, #0]
 800c4ac:	2c00      	cmp	r4, #0
 800c4ae:	d0da      	beq.n	800c466 <sniprintf+0x16>
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	e7d6      	b.n	800c466 <sniprintf+0x16>
 800c4b8:	20000148 	.word	0x20000148

0800c4bc <siprintf>:
 800c4bc:	b40e      	push	{r1, r2, r3}
 800c4be:	b510      	push	{r4, lr}
 800c4c0:	b09d      	sub	sp, #116	@ 0x74
 800c4c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c4c4:	9002      	str	r0, [sp, #8]
 800c4c6:	9006      	str	r0, [sp, #24]
 800c4c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c4cc:	480a      	ldr	r0, [pc, #40]	@ (800c4f8 <siprintf+0x3c>)
 800c4ce:	9107      	str	r1, [sp, #28]
 800c4d0:	9104      	str	r1, [sp, #16]
 800c4d2:	490a      	ldr	r1, [pc, #40]	@ (800c4fc <siprintf+0x40>)
 800c4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d8:	9105      	str	r1, [sp, #20]
 800c4da:	2400      	movs	r4, #0
 800c4dc:	a902      	add	r1, sp, #8
 800c4de:	6800      	ldr	r0, [r0, #0]
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c4e4:	f001 fcc2 	bl	800de6c <_svfiprintf_r>
 800c4e8:	9b02      	ldr	r3, [sp, #8]
 800c4ea:	701c      	strb	r4, [r3, #0]
 800c4ec:	b01d      	add	sp, #116	@ 0x74
 800c4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f2:	b003      	add	sp, #12
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000148 	.word	0x20000148
 800c4fc:	ffff0208 	.word	0xffff0208

0800c500 <__sread>:
 800c500:	b510      	push	{r4, lr}
 800c502:	460c      	mov	r4, r1
 800c504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c508:	f000 f920 	bl	800c74c <_read_r>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	bfab      	itete	ge
 800c510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c512:	89a3      	ldrhlt	r3, [r4, #12]
 800c514:	181b      	addge	r3, r3, r0
 800c516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c51a:	bfac      	ite	ge
 800c51c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c51e:	81a3      	strhlt	r3, [r4, #12]
 800c520:	bd10      	pop	{r4, pc}

0800c522 <__swrite>:
 800c522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c526:	461f      	mov	r7, r3
 800c528:	898b      	ldrh	r3, [r1, #12]
 800c52a:	05db      	lsls	r3, r3, #23
 800c52c:	4605      	mov	r5, r0
 800c52e:	460c      	mov	r4, r1
 800c530:	4616      	mov	r6, r2
 800c532:	d505      	bpl.n	800c540 <__swrite+0x1e>
 800c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c538:	2302      	movs	r3, #2
 800c53a:	2200      	movs	r2, #0
 800c53c:	f000 f8f4 	bl	800c728 <_lseek_r>
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	4628      	mov	r0, r5
 800c552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c556:	f000 b90b 	b.w	800c770 <_write_r>

0800c55a <__sseek>:
 800c55a:	b510      	push	{r4, lr}
 800c55c:	460c      	mov	r4, r1
 800c55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c562:	f000 f8e1 	bl	800c728 <_lseek_r>
 800c566:	1c43      	adds	r3, r0, #1
 800c568:	89a3      	ldrh	r3, [r4, #12]
 800c56a:	bf15      	itete	ne
 800c56c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c56e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c576:	81a3      	strheq	r3, [r4, #12]
 800c578:	bf18      	it	ne
 800c57a:	81a3      	strhne	r3, [r4, #12]
 800c57c:	bd10      	pop	{r4, pc}

0800c57e <__sclose>:
 800c57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c582:	f000 b8c1 	b.w	800c708 <_close_r>

0800c586 <__swbuf_r>:
 800c586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c588:	460e      	mov	r6, r1
 800c58a:	4614      	mov	r4, r2
 800c58c:	4605      	mov	r5, r0
 800c58e:	b118      	cbz	r0, 800c598 <__swbuf_r+0x12>
 800c590:	6a03      	ldr	r3, [r0, #32]
 800c592:	b90b      	cbnz	r3, 800c598 <__swbuf_r+0x12>
 800c594:	f7ff fec8 	bl	800c328 <__sinit>
 800c598:	69a3      	ldr	r3, [r4, #24]
 800c59a:	60a3      	str	r3, [r4, #8]
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	071a      	lsls	r2, r3, #28
 800c5a0:	d501      	bpl.n	800c5a6 <__swbuf_r+0x20>
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	b943      	cbnz	r3, 800c5b8 <__swbuf_r+0x32>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 f82b 	bl	800c604 <__swsetup_r>
 800c5ae:	b118      	cbz	r0, 800c5b8 <__swbuf_r+0x32>
 800c5b0:	f04f 37ff 	mov.w	r7, #4294967295
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	6922      	ldr	r2, [r4, #16]
 800c5bc:	1a98      	subs	r0, r3, r2
 800c5be:	6963      	ldr	r3, [r4, #20]
 800c5c0:	b2f6      	uxtb	r6, r6
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	4637      	mov	r7, r6
 800c5c6:	dc05      	bgt.n	800c5d4 <__swbuf_r+0x4e>
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f001 ff10 	bl	800e3f0 <_fflush_r>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d1ed      	bne.n	800c5b0 <__swbuf_r+0x2a>
 800c5d4:	68a3      	ldr	r3, [r4, #8]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	60a3      	str	r3, [r4, #8]
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	6022      	str	r2, [r4, #0]
 800c5e0:	701e      	strb	r6, [r3, #0]
 800c5e2:	6962      	ldr	r2, [r4, #20]
 800c5e4:	1c43      	adds	r3, r0, #1
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d004      	beq.n	800c5f4 <__swbuf_r+0x6e>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	07db      	lsls	r3, r3, #31
 800c5ee:	d5e1      	bpl.n	800c5b4 <__swbuf_r+0x2e>
 800c5f0:	2e0a      	cmp	r6, #10
 800c5f2:	d1df      	bne.n	800c5b4 <__swbuf_r+0x2e>
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f001 fefa 	bl	800e3f0 <_fflush_r>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d0d9      	beq.n	800c5b4 <__swbuf_r+0x2e>
 800c600:	e7d6      	b.n	800c5b0 <__swbuf_r+0x2a>
	...

0800c604 <__swsetup_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4b29      	ldr	r3, [pc, #164]	@ (800c6ac <__swsetup_r+0xa8>)
 800c608:	4605      	mov	r5, r0
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	460c      	mov	r4, r1
 800c60e:	b118      	cbz	r0, 800c618 <__swsetup_r+0x14>
 800c610:	6a03      	ldr	r3, [r0, #32]
 800c612:	b90b      	cbnz	r3, 800c618 <__swsetup_r+0x14>
 800c614:	f7ff fe88 	bl	800c328 <__sinit>
 800c618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c61c:	0719      	lsls	r1, r3, #28
 800c61e:	d422      	bmi.n	800c666 <__swsetup_r+0x62>
 800c620:	06da      	lsls	r2, r3, #27
 800c622:	d407      	bmi.n	800c634 <__swsetup_r+0x30>
 800c624:	2209      	movs	r2, #9
 800c626:	602a      	str	r2, [r5, #0]
 800c628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c62c:	81a3      	strh	r3, [r4, #12]
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	e033      	b.n	800c69c <__swsetup_r+0x98>
 800c634:	0758      	lsls	r0, r3, #29
 800c636:	d512      	bpl.n	800c65e <__swsetup_r+0x5a>
 800c638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c63a:	b141      	cbz	r1, 800c64e <__swsetup_r+0x4a>
 800c63c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c640:	4299      	cmp	r1, r3
 800c642:	d002      	beq.n	800c64a <__swsetup_r+0x46>
 800c644:	4628      	mov	r0, r5
 800c646:	f000 ff3b 	bl	800d4c0 <_free_r>
 800c64a:	2300      	movs	r3, #0
 800c64c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	2300      	movs	r3, #0
 800c658:	6063      	str	r3, [r4, #4]
 800c65a:	6923      	ldr	r3, [r4, #16]
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	f043 0308 	orr.w	r3, r3, #8
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	6923      	ldr	r3, [r4, #16]
 800c668:	b94b      	cbnz	r3, 800c67e <__swsetup_r+0x7a>
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c674:	d003      	beq.n	800c67e <__swsetup_r+0x7a>
 800c676:	4621      	mov	r1, r4
 800c678:	4628      	mov	r0, r5
 800c67a:	f001 ff07 	bl	800e48c <__smakebuf_r>
 800c67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c682:	f013 0201 	ands.w	r2, r3, #1
 800c686:	d00a      	beq.n	800c69e <__swsetup_r+0x9a>
 800c688:	2200      	movs	r2, #0
 800c68a:	60a2      	str	r2, [r4, #8]
 800c68c:	6962      	ldr	r2, [r4, #20]
 800c68e:	4252      	negs	r2, r2
 800c690:	61a2      	str	r2, [r4, #24]
 800c692:	6922      	ldr	r2, [r4, #16]
 800c694:	b942      	cbnz	r2, 800c6a8 <__swsetup_r+0xa4>
 800c696:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c69a:	d1c5      	bne.n	800c628 <__swsetup_r+0x24>
 800c69c:	bd38      	pop	{r3, r4, r5, pc}
 800c69e:	0799      	lsls	r1, r3, #30
 800c6a0:	bf58      	it	pl
 800c6a2:	6962      	ldrpl	r2, [r4, #20]
 800c6a4:	60a2      	str	r2, [r4, #8]
 800c6a6:	e7f4      	b.n	800c692 <__swsetup_r+0x8e>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e7f7      	b.n	800c69c <__swsetup_r+0x98>
 800c6ac:	20000148 	.word	0x20000148

0800c6b0 <memcmp>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	3901      	subs	r1, #1
 800c6b4:	4402      	add	r2, r0
 800c6b6:	4290      	cmp	r0, r2
 800c6b8:	d101      	bne.n	800c6be <memcmp+0xe>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e005      	b.n	800c6ca <memcmp+0x1a>
 800c6be:	7803      	ldrb	r3, [r0, #0]
 800c6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d001      	beq.n	800c6cc <memcmp+0x1c>
 800c6c8:	1b18      	subs	r0, r3, r4
 800c6ca:	bd10      	pop	{r4, pc}
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	e7f2      	b.n	800c6b6 <memcmp+0x6>

0800c6d0 <memset>:
 800c6d0:	4402      	add	r2, r0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d100      	bne.n	800c6da <memset+0xa>
 800c6d8:	4770      	bx	lr
 800c6da:	f803 1b01 	strb.w	r1, [r3], #1
 800c6de:	e7f9      	b.n	800c6d4 <memset+0x4>

0800c6e0 <strcat>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	7814      	ldrb	r4, [r2, #0]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	3201      	adds	r2, #1
 800c6ea:	2c00      	cmp	r4, #0
 800c6ec:	d1fa      	bne.n	800c6e4 <strcat+0x4>
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6f8:	2a00      	cmp	r2, #0
 800c6fa:	d1f9      	bne.n	800c6f0 <strcat+0x10>
 800c6fc:	bd10      	pop	{r4, pc}
	...

0800c700 <_localeconv_r>:
 800c700:	4800      	ldr	r0, [pc, #0]	@ (800c704 <_localeconv_r+0x4>)
 800c702:	4770      	bx	lr
 800c704:	20000288 	.word	0x20000288

0800c708 <_close_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	4d06      	ldr	r5, [pc, #24]	@ (800c724 <_close_r+0x1c>)
 800c70c:	2300      	movs	r3, #0
 800c70e:	4604      	mov	r4, r0
 800c710:	4608      	mov	r0, r1
 800c712:	602b      	str	r3, [r5, #0]
 800c714:	f7f7 fff2 	bl	80046fc <_close>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d102      	bne.n	800c722 <_close_r+0x1a>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	b103      	cbz	r3, 800c722 <_close_r+0x1a>
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	20001964 	.word	0x20001964

0800c728 <_lseek_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4d07      	ldr	r5, [pc, #28]	@ (800c748 <_lseek_r+0x20>)
 800c72c:	4604      	mov	r4, r0
 800c72e:	4608      	mov	r0, r1
 800c730:	4611      	mov	r1, r2
 800c732:	2200      	movs	r2, #0
 800c734:	602a      	str	r2, [r5, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	f7f8 f807 	bl	800474a <_lseek>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d102      	bne.n	800c746 <_lseek_r+0x1e>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	b103      	cbz	r3, 800c746 <_lseek_r+0x1e>
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	20001964 	.word	0x20001964

0800c74c <_read_r>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	4d07      	ldr	r5, [pc, #28]	@ (800c76c <_read_r+0x20>)
 800c750:	4604      	mov	r4, r0
 800c752:	4608      	mov	r0, r1
 800c754:	4611      	mov	r1, r2
 800c756:	2200      	movs	r2, #0
 800c758:	602a      	str	r2, [r5, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	f7f7 ff95 	bl	800468a <_read>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_read_r+0x1e>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_read_r+0x1e>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20001964 	.word	0x20001964

0800c770 <_write_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d07      	ldr	r5, [pc, #28]	@ (800c790 <_write_r+0x20>)
 800c774:	4604      	mov	r4, r0
 800c776:	4608      	mov	r0, r1
 800c778:	4611      	mov	r1, r2
 800c77a:	2200      	movs	r2, #0
 800c77c:	602a      	str	r2, [r5, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	f7f7 ffa0 	bl	80046c4 <_write>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	d102      	bne.n	800c78e <_write_r+0x1e>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b103      	cbz	r3, 800c78e <_write_r+0x1e>
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	20001964 	.word	0x20001964

0800c794 <__errno>:
 800c794:	4b01      	ldr	r3, [pc, #4]	@ (800c79c <__errno+0x8>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	20000148 	.word	0x20000148

0800c7a0 <__libc_init_array>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4d0d      	ldr	r5, [pc, #52]	@ (800c7d8 <__libc_init_array+0x38>)
 800c7a4:	4c0d      	ldr	r4, [pc, #52]	@ (800c7dc <__libc_init_array+0x3c>)
 800c7a6:	1b64      	subs	r4, r4, r5
 800c7a8:	10a4      	asrs	r4, r4, #2
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	42a6      	cmp	r6, r4
 800c7ae:	d109      	bne.n	800c7c4 <__libc_init_array+0x24>
 800c7b0:	4d0b      	ldr	r5, [pc, #44]	@ (800c7e0 <__libc_init_array+0x40>)
 800c7b2:	4c0c      	ldr	r4, [pc, #48]	@ (800c7e4 <__libc_init_array+0x44>)
 800c7b4:	f002 fba0 	bl	800eef8 <_init>
 800c7b8:	1b64      	subs	r4, r4, r5
 800c7ba:	10a4      	asrs	r4, r4, #2
 800c7bc:	2600      	movs	r6, #0
 800c7be:	42a6      	cmp	r6, r4
 800c7c0:	d105      	bne.n	800c7ce <__libc_init_array+0x2e>
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c8:	4798      	blx	r3
 800c7ca:	3601      	adds	r6, #1
 800c7cc:	e7ee      	b.n	800c7ac <__libc_init_array+0xc>
 800c7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d2:	4798      	blx	r3
 800c7d4:	3601      	adds	r6, #1
 800c7d6:	e7f2      	b.n	800c7be <__libc_init_array+0x1e>
 800c7d8:	0800fc9c 	.word	0x0800fc9c
 800c7dc:	0800fc9c 	.word	0x0800fc9c
 800c7e0:	0800fc9c 	.word	0x0800fc9c
 800c7e4:	0800fca0 	.word	0x0800fca0

0800c7e8 <__retarget_lock_init_recursive>:
 800c7e8:	4770      	bx	lr

0800c7ea <__retarget_lock_acquire_recursive>:
 800c7ea:	4770      	bx	lr

0800c7ec <__retarget_lock_release_recursive>:
 800c7ec:	4770      	bx	lr

0800c7ee <memcpy>:
 800c7ee:	440a      	add	r2, r1
 800c7f0:	4291      	cmp	r1, r2
 800c7f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7f6:	d100      	bne.n	800c7fa <memcpy+0xc>
 800c7f8:	4770      	bx	lr
 800c7fa:	b510      	push	{r4, lr}
 800c7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c800:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c804:	4291      	cmp	r1, r2
 800c806:	d1f9      	bne.n	800c7fc <memcpy+0xe>
 800c808:	bd10      	pop	{r4, pc}

0800c80a <quorem>:
 800c80a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80e:	6903      	ldr	r3, [r0, #16]
 800c810:	690c      	ldr	r4, [r1, #16]
 800c812:	42a3      	cmp	r3, r4
 800c814:	4607      	mov	r7, r0
 800c816:	db7e      	blt.n	800c916 <quorem+0x10c>
 800c818:	3c01      	subs	r4, #1
 800c81a:	f101 0814 	add.w	r8, r1, #20
 800c81e:	00a3      	lsls	r3, r4, #2
 800c820:	f100 0514 	add.w	r5, r0, #20
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c82a:	9301      	str	r3, [sp, #4]
 800c82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c834:	3301      	adds	r3, #1
 800c836:	429a      	cmp	r2, r3
 800c838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c83c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c840:	d32e      	bcc.n	800c8a0 <quorem+0x96>
 800c842:	f04f 0a00 	mov.w	sl, #0
 800c846:	46c4      	mov	ip, r8
 800c848:	46ae      	mov	lr, r5
 800c84a:	46d3      	mov	fp, sl
 800c84c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c850:	b298      	uxth	r0, r3
 800c852:	fb06 a000 	mla	r0, r6, r0, sl
 800c856:	0c02      	lsrs	r2, r0, #16
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	fb06 2303 	mla	r3, r6, r3, r2
 800c85e:	f8de 2000 	ldr.w	r2, [lr]
 800c862:	b280      	uxth	r0, r0
 800c864:	b292      	uxth	r2, r2
 800c866:	1a12      	subs	r2, r2, r0
 800c868:	445a      	add	r2, fp
 800c86a:	f8de 0000 	ldr.w	r0, [lr]
 800c86e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c872:	b29b      	uxth	r3, r3
 800c874:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c878:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c87c:	b292      	uxth	r2, r2
 800c87e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c882:	45e1      	cmp	r9, ip
 800c884:	f84e 2b04 	str.w	r2, [lr], #4
 800c888:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c88c:	d2de      	bcs.n	800c84c <quorem+0x42>
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	58eb      	ldr	r3, [r5, r3]
 800c892:	b92b      	cbnz	r3, 800c8a0 <quorem+0x96>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	3b04      	subs	r3, #4
 800c898:	429d      	cmp	r5, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	d32f      	bcc.n	800c8fe <quorem+0xf4>
 800c89e:	613c      	str	r4, [r7, #16]
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	f001 f97f 	bl	800dba4 <__mcmp>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	db25      	blt.n	800c8f6 <quorem+0xec>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8b2:	f8d1 c000 	ldr.w	ip, [r1]
 800c8b6:	fa1f fe82 	uxth.w	lr, r2
 800c8ba:	fa1f f38c 	uxth.w	r3, ip
 800c8be:	eba3 030e 	sub.w	r3, r3, lr
 800c8c2:	4403      	add	r3, r0
 800c8c4:	0c12      	lsrs	r2, r2, #16
 800c8c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c8ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8d4:	45c1      	cmp	r9, r8
 800c8d6:	f841 3b04 	str.w	r3, [r1], #4
 800c8da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8de:	d2e6      	bcs.n	800c8ae <quorem+0xa4>
 800c8e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8e8:	b922      	cbnz	r2, 800c8f4 <quorem+0xea>
 800c8ea:	3b04      	subs	r3, #4
 800c8ec:	429d      	cmp	r5, r3
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	d30b      	bcc.n	800c90a <quorem+0x100>
 800c8f2:	613c      	str	r4, [r7, #16]
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	b003      	add	sp, #12
 800c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fe:	6812      	ldr	r2, [r2, #0]
 800c900:	3b04      	subs	r3, #4
 800c902:	2a00      	cmp	r2, #0
 800c904:	d1cb      	bne.n	800c89e <quorem+0x94>
 800c906:	3c01      	subs	r4, #1
 800c908:	e7c6      	b.n	800c898 <quorem+0x8e>
 800c90a:	6812      	ldr	r2, [r2, #0]
 800c90c:	3b04      	subs	r3, #4
 800c90e:	2a00      	cmp	r2, #0
 800c910:	d1ef      	bne.n	800c8f2 <quorem+0xe8>
 800c912:	3c01      	subs	r4, #1
 800c914:	e7ea      	b.n	800c8ec <quorem+0xe2>
 800c916:	2000      	movs	r0, #0
 800c918:	e7ee      	b.n	800c8f8 <quorem+0xee>
 800c91a:	0000      	movs	r0, r0
 800c91c:	0000      	movs	r0, r0
	...

0800c920 <_dtoa_r>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	69c7      	ldr	r7, [r0, #28]
 800c926:	b097      	sub	sp, #92	@ 0x5c
 800c928:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c92c:	ec55 4b10 	vmov	r4, r5, d0
 800c930:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c932:	9107      	str	r1, [sp, #28]
 800c934:	4681      	mov	r9, r0
 800c936:	920c      	str	r2, [sp, #48]	@ 0x30
 800c938:	9311      	str	r3, [sp, #68]	@ 0x44
 800c93a:	b97f      	cbnz	r7, 800c95c <_dtoa_r+0x3c>
 800c93c:	2010      	movs	r0, #16
 800c93e:	f000 fe09 	bl	800d554 <malloc>
 800c942:	4602      	mov	r2, r0
 800c944:	f8c9 001c 	str.w	r0, [r9, #28]
 800c948:	b920      	cbnz	r0, 800c954 <_dtoa_r+0x34>
 800c94a:	4ba9      	ldr	r3, [pc, #676]	@ (800cbf0 <_dtoa_r+0x2d0>)
 800c94c:	21ef      	movs	r1, #239	@ 0xef
 800c94e:	48a9      	ldr	r0, [pc, #676]	@ (800cbf4 <_dtoa_r+0x2d4>)
 800c950:	f001 fe24 	bl	800e59c <__assert_func>
 800c954:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c958:	6007      	str	r7, [r0, #0]
 800c95a:	60c7      	str	r7, [r0, #12]
 800c95c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c960:	6819      	ldr	r1, [r3, #0]
 800c962:	b159      	cbz	r1, 800c97c <_dtoa_r+0x5c>
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	604a      	str	r2, [r1, #4]
 800c968:	2301      	movs	r3, #1
 800c96a:	4093      	lsls	r3, r2
 800c96c:	608b      	str	r3, [r1, #8]
 800c96e:	4648      	mov	r0, r9
 800c970:	f000 fee6 	bl	800d740 <_Bfree>
 800c974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]
 800c97c:	1e2b      	subs	r3, r5, #0
 800c97e:	bfb9      	ittee	lt
 800c980:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c984:	9305      	strlt	r3, [sp, #20]
 800c986:	2300      	movge	r3, #0
 800c988:	6033      	strge	r3, [r6, #0]
 800c98a:	9f05      	ldr	r7, [sp, #20]
 800c98c:	4b9a      	ldr	r3, [pc, #616]	@ (800cbf8 <_dtoa_r+0x2d8>)
 800c98e:	bfbc      	itt	lt
 800c990:	2201      	movlt	r2, #1
 800c992:	6032      	strlt	r2, [r6, #0]
 800c994:	43bb      	bics	r3, r7
 800c996:	d112      	bne.n	800c9be <_dtoa_r+0x9e>
 800c998:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c99a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9a4:	4323      	orrs	r3, r4
 800c9a6:	f000 855a 	beq.w	800d45e <_dtoa_r+0xb3e>
 800c9aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cc0c <_dtoa_r+0x2ec>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 855c 	beq.w	800d46e <_dtoa_r+0xb4e>
 800c9b6:	f10a 0303 	add.w	r3, sl, #3
 800c9ba:	f000 bd56 	b.w	800d46a <_dtoa_r+0xb4a>
 800c9be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	ec51 0b17 	vmov	r0, r1, d7
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c9ce:	f7f4 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9d2:	4680      	mov	r8, r0
 800c9d4:	b158      	cbz	r0, 800c9ee <_dtoa_r+0xce>
 800c9d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c9d8:	2301      	movs	r3, #1
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9de:	b113      	cbz	r3, 800c9e6 <_dtoa_r+0xc6>
 800c9e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9e2:	4b86      	ldr	r3, [pc, #536]	@ (800cbfc <_dtoa_r+0x2dc>)
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cc10 <_dtoa_r+0x2f0>
 800c9ea:	f000 bd40 	b.w	800d46e <_dtoa_r+0xb4e>
 800c9ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c9f2:	aa14      	add	r2, sp, #80	@ 0x50
 800c9f4:	a915      	add	r1, sp, #84	@ 0x54
 800c9f6:	4648      	mov	r0, r9
 800c9f8:	f001 f984 	bl	800dd04 <__d2b>
 800c9fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca00:	9002      	str	r0, [sp, #8]
 800ca02:	2e00      	cmp	r6, #0
 800ca04:	d078      	beq.n	800caf8 <_dtoa_r+0x1d8>
 800ca06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ca0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca20:	4619      	mov	r1, r3
 800ca22:	2200      	movs	r2, #0
 800ca24:	4b76      	ldr	r3, [pc, #472]	@ (800cc00 <_dtoa_r+0x2e0>)
 800ca26:	f7f3 fc2f 	bl	8000288 <__aeabi_dsub>
 800ca2a:	a36b      	add	r3, pc, #428	@ (adr r3, 800cbd8 <_dtoa_r+0x2b8>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	f7f3 fde2 	bl	80005f8 <__aeabi_dmul>
 800ca34:	a36a      	add	r3, pc, #424	@ (adr r3, 800cbe0 <_dtoa_r+0x2c0>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	f7f3 fc27 	bl	800028c <__adddf3>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	4630      	mov	r0, r6
 800ca42:	460d      	mov	r5, r1
 800ca44:	f7f3 fd6e 	bl	8000524 <__aeabi_i2d>
 800ca48:	a367      	add	r3, pc, #412	@ (adr r3, 800cbe8 <_dtoa_r+0x2c8>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f7f3 fc17 	bl	800028c <__adddf3>
 800ca5e:	4604      	mov	r4, r0
 800ca60:	460d      	mov	r5, r1
 800ca62:	f7f4 f879 	bl	8000b58 <__aeabi_d2iz>
 800ca66:	2200      	movs	r2, #0
 800ca68:	4607      	mov	r7, r0
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	4629      	mov	r1, r5
 800ca70:	f7f4 f834 	bl	8000adc <__aeabi_dcmplt>
 800ca74:	b140      	cbz	r0, 800ca88 <_dtoa_r+0x168>
 800ca76:	4638      	mov	r0, r7
 800ca78:	f7f3 fd54 	bl	8000524 <__aeabi_i2d>
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	462b      	mov	r3, r5
 800ca80:	f7f4 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca84:	b900      	cbnz	r0, 800ca88 <_dtoa_r+0x168>
 800ca86:	3f01      	subs	r7, #1
 800ca88:	2f16      	cmp	r7, #22
 800ca8a:	d852      	bhi.n	800cb32 <_dtoa_r+0x212>
 800ca8c:	4b5d      	ldr	r3, [pc, #372]	@ (800cc04 <_dtoa_r+0x2e4>)
 800ca8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca9a:	f7f4 f81f 	bl	8000adc <__aeabi_dcmplt>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d049      	beq.n	800cb36 <_dtoa_r+0x216>
 800caa2:	3f01      	subs	r7, #1
 800caa4:	2300      	movs	r3, #0
 800caa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800caa8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800caaa:	1b9b      	subs	r3, r3, r6
 800caac:	1e5a      	subs	r2, r3, #1
 800caae:	bf45      	ittet	mi
 800cab0:	f1c3 0301 	rsbmi	r3, r3, #1
 800cab4:	9300      	strmi	r3, [sp, #0]
 800cab6:	2300      	movpl	r3, #0
 800cab8:	2300      	movmi	r3, #0
 800caba:	9206      	str	r2, [sp, #24]
 800cabc:	bf54      	ite	pl
 800cabe:	9300      	strpl	r3, [sp, #0]
 800cac0:	9306      	strmi	r3, [sp, #24]
 800cac2:	2f00      	cmp	r7, #0
 800cac4:	db39      	blt.n	800cb3a <_dtoa_r+0x21a>
 800cac6:	9b06      	ldr	r3, [sp, #24]
 800cac8:	970d      	str	r7, [sp, #52]	@ 0x34
 800caca:	443b      	add	r3, r7
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	2300      	movs	r3, #0
 800cad0:	9308      	str	r3, [sp, #32]
 800cad2:	9b07      	ldr	r3, [sp, #28]
 800cad4:	2b09      	cmp	r3, #9
 800cad6:	d863      	bhi.n	800cba0 <_dtoa_r+0x280>
 800cad8:	2b05      	cmp	r3, #5
 800cada:	bfc4      	itt	gt
 800cadc:	3b04      	subgt	r3, #4
 800cade:	9307      	strgt	r3, [sp, #28]
 800cae0:	9b07      	ldr	r3, [sp, #28]
 800cae2:	f1a3 0302 	sub.w	r3, r3, #2
 800cae6:	bfcc      	ite	gt
 800cae8:	2400      	movgt	r4, #0
 800caea:	2401      	movle	r4, #1
 800caec:	2b03      	cmp	r3, #3
 800caee:	d863      	bhi.n	800cbb8 <_dtoa_r+0x298>
 800caf0:	e8df f003 	tbb	[pc, r3]
 800caf4:	2b375452 	.word	0x2b375452
 800caf8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cafc:	441e      	add	r6, r3
 800cafe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb02:	2b20      	cmp	r3, #32
 800cb04:	bfc1      	itttt	gt
 800cb06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb0a:	409f      	lslgt	r7, r3
 800cb0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb10:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb14:	bfd6      	itet	le
 800cb16:	f1c3 0320 	rsble	r3, r3, #32
 800cb1a:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb1e:	fa04 f003 	lslle.w	r0, r4, r3
 800cb22:	f7f3 fcef 	bl	8000504 <__aeabi_ui2d>
 800cb26:	2201      	movs	r2, #1
 800cb28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb2c:	3e01      	subs	r6, #1
 800cb2e:	9212      	str	r2, [sp, #72]	@ 0x48
 800cb30:	e776      	b.n	800ca20 <_dtoa_r+0x100>
 800cb32:	2301      	movs	r3, #1
 800cb34:	e7b7      	b.n	800caa6 <_dtoa_r+0x186>
 800cb36:	9010      	str	r0, [sp, #64]	@ 0x40
 800cb38:	e7b6      	b.n	800caa8 <_dtoa_r+0x188>
 800cb3a:	9b00      	ldr	r3, [sp, #0]
 800cb3c:	1bdb      	subs	r3, r3, r7
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	427b      	negs	r3, r7
 800cb42:	9308      	str	r3, [sp, #32]
 800cb44:	2300      	movs	r3, #0
 800cb46:	930d      	str	r3, [sp, #52]	@ 0x34
 800cb48:	e7c3      	b.n	800cad2 <_dtoa_r+0x1b2>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb50:	eb07 0b03 	add.w	fp, r7, r3
 800cb54:	f10b 0301 	add.w	r3, fp, #1
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	bfb8      	it	lt
 800cb5e:	2301      	movlt	r3, #1
 800cb60:	e006      	b.n	800cb70 <_dtoa_r+0x250>
 800cb62:	2301      	movs	r3, #1
 800cb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	dd28      	ble.n	800cbbe <_dtoa_r+0x29e>
 800cb6c:	469b      	mov	fp, r3
 800cb6e:	9303      	str	r3, [sp, #12]
 800cb70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cb74:	2100      	movs	r1, #0
 800cb76:	2204      	movs	r2, #4
 800cb78:	f102 0514 	add.w	r5, r2, #20
 800cb7c:	429d      	cmp	r5, r3
 800cb7e:	d926      	bls.n	800cbce <_dtoa_r+0x2ae>
 800cb80:	6041      	str	r1, [r0, #4]
 800cb82:	4648      	mov	r0, r9
 800cb84:	f000 fd9c 	bl	800d6c0 <_Balloc>
 800cb88:	4682      	mov	sl, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d142      	bne.n	800cc14 <_dtoa_r+0x2f4>
 800cb8e:	4b1e      	ldr	r3, [pc, #120]	@ (800cc08 <_dtoa_r+0x2e8>)
 800cb90:	4602      	mov	r2, r0
 800cb92:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb96:	e6da      	b.n	800c94e <_dtoa_r+0x2e>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e7e3      	b.n	800cb64 <_dtoa_r+0x244>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	e7d5      	b.n	800cb4c <_dtoa_r+0x22c>
 800cba0:	2401      	movs	r4, #1
 800cba2:	2300      	movs	r3, #0
 800cba4:	9307      	str	r3, [sp, #28]
 800cba6:	9409      	str	r4, [sp, #36]	@ 0x24
 800cba8:	f04f 3bff 	mov.w	fp, #4294967295
 800cbac:	2200      	movs	r2, #0
 800cbae:	f8cd b00c 	str.w	fp, [sp, #12]
 800cbb2:	2312      	movs	r3, #18
 800cbb4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbb6:	e7db      	b.n	800cb70 <_dtoa_r+0x250>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbbc:	e7f4      	b.n	800cba8 <_dtoa_r+0x288>
 800cbbe:	f04f 0b01 	mov.w	fp, #1
 800cbc2:	f8cd b00c 	str.w	fp, [sp, #12]
 800cbc6:	465b      	mov	r3, fp
 800cbc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cbcc:	e7d0      	b.n	800cb70 <_dtoa_r+0x250>
 800cbce:	3101      	adds	r1, #1
 800cbd0:	0052      	lsls	r2, r2, #1
 800cbd2:	e7d1      	b.n	800cb78 <_dtoa_r+0x258>
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	636f4361 	.word	0x636f4361
 800cbdc:	3fd287a7 	.word	0x3fd287a7
 800cbe0:	8b60c8b3 	.word	0x8b60c8b3
 800cbe4:	3fc68a28 	.word	0x3fc68a28
 800cbe8:	509f79fb 	.word	0x509f79fb
 800cbec:	3fd34413 	.word	0x3fd34413
 800cbf0:	0800f949 	.word	0x0800f949
 800cbf4:	0800f960 	.word	0x0800f960
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	0800f919 	.word	0x0800f919
 800cc00:	3ff80000 	.word	0x3ff80000
 800cc04:	0800fab0 	.word	0x0800fab0
 800cc08:	0800f9b8 	.word	0x0800f9b8
 800cc0c:	0800f945 	.word	0x0800f945
 800cc10:	0800f918 	.word	0x0800f918
 800cc14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc18:	6018      	str	r0, [r3, #0]
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	2b0e      	cmp	r3, #14
 800cc1e:	f200 80a1 	bhi.w	800cd64 <_dtoa_r+0x444>
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	f000 809e 	beq.w	800cd64 <_dtoa_r+0x444>
 800cc28:	2f00      	cmp	r7, #0
 800cc2a:	dd33      	ble.n	800cc94 <_dtoa_r+0x374>
 800cc2c:	4b9c      	ldr	r3, [pc, #624]	@ (800cea0 <_dtoa_r+0x580>)
 800cc2e:	f007 020f 	and.w	r2, r7, #15
 800cc32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc36:	ed93 7b00 	vldr	d7, [r3]
 800cc3a:	05f8      	lsls	r0, r7, #23
 800cc3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cc40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc44:	d516      	bpl.n	800cc74 <_dtoa_r+0x354>
 800cc46:	4b97      	ldr	r3, [pc, #604]	@ (800cea4 <_dtoa_r+0x584>)
 800cc48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cc4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc50:	f7f3 fdfc 	bl	800084c <__aeabi_ddiv>
 800cc54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc58:	f004 040f 	and.w	r4, r4, #15
 800cc5c:	2603      	movs	r6, #3
 800cc5e:	4d91      	ldr	r5, [pc, #580]	@ (800cea4 <_dtoa_r+0x584>)
 800cc60:	b954      	cbnz	r4, 800cc78 <_dtoa_r+0x358>
 800cc62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc6a:	f7f3 fdef 	bl	800084c <__aeabi_ddiv>
 800cc6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc72:	e028      	b.n	800ccc6 <_dtoa_r+0x3a6>
 800cc74:	2602      	movs	r6, #2
 800cc76:	e7f2      	b.n	800cc5e <_dtoa_r+0x33e>
 800cc78:	07e1      	lsls	r1, r4, #31
 800cc7a:	d508      	bpl.n	800cc8e <_dtoa_r+0x36e>
 800cc7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc84:	f7f3 fcb8 	bl	80005f8 <__aeabi_dmul>
 800cc88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc8c:	3601      	adds	r6, #1
 800cc8e:	1064      	asrs	r4, r4, #1
 800cc90:	3508      	adds	r5, #8
 800cc92:	e7e5      	b.n	800cc60 <_dtoa_r+0x340>
 800cc94:	f000 80af 	beq.w	800cdf6 <_dtoa_r+0x4d6>
 800cc98:	427c      	negs	r4, r7
 800cc9a:	4b81      	ldr	r3, [pc, #516]	@ (800cea0 <_dtoa_r+0x580>)
 800cc9c:	4d81      	ldr	r5, [pc, #516]	@ (800cea4 <_dtoa_r+0x584>)
 800cc9e:	f004 020f 	and.w	r2, r4, #15
 800cca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ccae:	f7f3 fca3 	bl	80005f8 <__aeabi_dmul>
 800ccb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccb6:	1124      	asrs	r4, r4, #4
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2602      	movs	r6, #2
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	f040 808f 	bne.w	800cde0 <_dtoa_r+0x4c0>
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1d3      	bne.n	800cc6e <_dtoa_r+0x34e>
 800ccc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 8094 	beq.w	800cdfa <_dtoa_r+0x4da>
 800ccd2:	4b75      	ldr	r3, [pc, #468]	@ (800cea8 <_dtoa_r+0x588>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	4629      	mov	r1, r5
 800ccda:	f7f3 feff 	bl	8000adc <__aeabi_dcmplt>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f000 808b 	beq.w	800cdfa <_dtoa_r+0x4da>
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f000 8087 	beq.w	800cdfa <_dtoa_r+0x4da>
 800ccec:	f1bb 0f00 	cmp.w	fp, #0
 800ccf0:	dd34      	ble.n	800cd5c <_dtoa_r+0x43c>
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	4b6d      	ldr	r3, [pc, #436]	@ (800ceac <_dtoa_r+0x58c>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	f7f3 fc7d 	bl	80005f8 <__aeabi_dmul>
 800ccfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd02:	f107 38ff 	add.w	r8, r7, #4294967295
 800cd06:	3601      	adds	r6, #1
 800cd08:	465c      	mov	r4, fp
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7f3 fc0a 	bl	8000524 <__aeabi_i2d>
 800cd10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd14:	f7f3 fc70 	bl	80005f8 <__aeabi_dmul>
 800cd18:	4b65      	ldr	r3, [pc, #404]	@ (800ceb0 <_dtoa_r+0x590>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f7f3 fab6 	bl	800028c <__adddf3>
 800cd20:	4605      	mov	r5, r0
 800cd22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	d16a      	bne.n	800ce00 <_dtoa_r+0x4e0>
 800cd2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd2e:	4b61      	ldr	r3, [pc, #388]	@ (800ceb4 <_dtoa_r+0x594>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	f7f3 faa9 	bl	8000288 <__aeabi_dsub>
 800cd36:	4602      	mov	r2, r0
 800cd38:	460b      	mov	r3, r1
 800cd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd3e:	462a      	mov	r2, r5
 800cd40:	4633      	mov	r3, r6
 800cd42:	f7f3 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f040 8298 	bne.w	800d27c <_dtoa_r+0x95c>
 800cd4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd50:	462a      	mov	r2, r5
 800cd52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd56:	f7f3 fec1 	bl	8000adc <__aeabi_dcmplt>
 800cd5a:	bb38      	cbnz	r0, 800cdac <_dtoa_r+0x48c>
 800cd5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cd60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cd64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f2c0 8157 	blt.w	800d01a <_dtoa_r+0x6fa>
 800cd6c:	2f0e      	cmp	r7, #14
 800cd6e:	f300 8154 	bgt.w	800d01a <_dtoa_r+0x6fa>
 800cd72:	4b4b      	ldr	r3, [pc, #300]	@ (800cea0 <_dtoa_r+0x580>)
 800cd74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd78:	ed93 7b00 	vldr	d7, [r3]
 800cd7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	ed8d 7b00 	vstr	d7, [sp]
 800cd84:	f280 80e5 	bge.w	800cf52 <_dtoa_r+0x632>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f300 80e1 	bgt.w	800cf52 <_dtoa_r+0x632>
 800cd90:	d10c      	bne.n	800cdac <_dtoa_r+0x48c>
 800cd92:	4b48      	ldr	r3, [pc, #288]	@ (800ceb4 <_dtoa_r+0x594>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	ec51 0b17 	vmov	r0, r1, d7
 800cd9a:	f7f3 fc2d 	bl	80005f8 <__aeabi_dmul>
 800cd9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cda2:	f7f3 feaf 	bl	8000b04 <__aeabi_dcmpge>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f000 8266 	beq.w	800d278 <_dtoa_r+0x958>
 800cdac:	2400      	movs	r4, #0
 800cdae:	4625      	mov	r5, r4
 800cdb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdb2:	4656      	mov	r6, sl
 800cdb4:	ea6f 0803 	mvn.w	r8, r3
 800cdb8:	2700      	movs	r7, #0
 800cdba:	4621      	mov	r1, r4
 800cdbc:	4648      	mov	r0, r9
 800cdbe:	f000 fcbf 	bl	800d740 <_Bfree>
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	f000 80bd 	beq.w	800cf42 <_dtoa_r+0x622>
 800cdc8:	b12f      	cbz	r7, 800cdd6 <_dtoa_r+0x4b6>
 800cdca:	42af      	cmp	r7, r5
 800cdcc:	d003      	beq.n	800cdd6 <_dtoa_r+0x4b6>
 800cdce:	4639      	mov	r1, r7
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 fcb5 	bl	800d740 <_Bfree>
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4648      	mov	r0, r9
 800cdda:	f000 fcb1 	bl	800d740 <_Bfree>
 800cdde:	e0b0      	b.n	800cf42 <_dtoa_r+0x622>
 800cde0:	07e2      	lsls	r2, r4, #31
 800cde2:	d505      	bpl.n	800cdf0 <_dtoa_r+0x4d0>
 800cde4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cde8:	f7f3 fc06 	bl	80005f8 <__aeabi_dmul>
 800cdec:	3601      	adds	r6, #1
 800cdee:	2301      	movs	r3, #1
 800cdf0:	1064      	asrs	r4, r4, #1
 800cdf2:	3508      	adds	r5, #8
 800cdf4:	e762      	b.n	800ccbc <_dtoa_r+0x39c>
 800cdf6:	2602      	movs	r6, #2
 800cdf8:	e765      	b.n	800ccc6 <_dtoa_r+0x3a6>
 800cdfa:	9c03      	ldr	r4, [sp, #12]
 800cdfc:	46b8      	mov	r8, r7
 800cdfe:	e784      	b.n	800cd0a <_dtoa_r+0x3ea>
 800ce00:	4b27      	ldr	r3, [pc, #156]	@ (800cea0 <_dtoa_r+0x580>)
 800ce02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce0c:	4454      	add	r4, sl
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	d054      	beq.n	800cebc <_dtoa_r+0x59c>
 800ce12:	4929      	ldr	r1, [pc, #164]	@ (800ceb8 <_dtoa_r+0x598>)
 800ce14:	2000      	movs	r0, #0
 800ce16:	f7f3 fd19 	bl	800084c <__aeabi_ddiv>
 800ce1a:	4633      	mov	r3, r6
 800ce1c:	462a      	mov	r2, r5
 800ce1e:	f7f3 fa33 	bl	8000288 <__aeabi_dsub>
 800ce22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce26:	4656      	mov	r6, sl
 800ce28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce2c:	f7f3 fe94 	bl	8000b58 <__aeabi_d2iz>
 800ce30:	4605      	mov	r5, r0
 800ce32:	f7f3 fb77 	bl	8000524 <__aeabi_i2d>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce3e:	f7f3 fa23 	bl	8000288 <__aeabi_dsub>
 800ce42:	3530      	adds	r5, #48	@ 0x30
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce4c:	f806 5b01 	strb.w	r5, [r6], #1
 800ce50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce54:	f7f3 fe42 	bl	8000adc <__aeabi_dcmplt>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d172      	bne.n	800cf42 <_dtoa_r+0x622>
 800ce5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce60:	4911      	ldr	r1, [pc, #68]	@ (800cea8 <_dtoa_r+0x588>)
 800ce62:	2000      	movs	r0, #0
 800ce64:	f7f3 fa10 	bl	8000288 <__aeabi_dsub>
 800ce68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce6c:	f7f3 fe36 	bl	8000adc <__aeabi_dcmplt>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	f040 80b4 	bne.w	800cfde <_dtoa_r+0x6be>
 800ce76:	42a6      	cmp	r6, r4
 800ce78:	f43f af70 	beq.w	800cd5c <_dtoa_r+0x43c>
 800ce7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ce80:	4b0a      	ldr	r3, [pc, #40]	@ (800ceac <_dtoa_r+0x58c>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	4b08      	ldr	r3, [pc, #32]	@ (800ceac <_dtoa_r+0x58c>)
 800ce8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce8e:	2200      	movs	r2, #0
 800ce90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce9c:	e7c4      	b.n	800ce28 <_dtoa_r+0x508>
 800ce9e:	bf00      	nop
 800cea0:	0800fab0 	.word	0x0800fab0
 800cea4:	0800fa88 	.word	0x0800fa88
 800cea8:	3ff00000 	.word	0x3ff00000
 800ceac:	40240000 	.word	0x40240000
 800ceb0:	401c0000 	.word	0x401c0000
 800ceb4:	40140000 	.word	0x40140000
 800ceb8:	3fe00000 	.word	0x3fe00000
 800cebc:	4631      	mov	r1, r6
 800cebe:	4628      	mov	r0, r5
 800cec0:	f7f3 fb9a 	bl	80005f8 <__aeabi_dmul>
 800cec4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cec8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ceca:	4656      	mov	r6, sl
 800cecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ced0:	f7f3 fe42 	bl	8000b58 <__aeabi_d2iz>
 800ced4:	4605      	mov	r5, r0
 800ced6:	f7f3 fb25 	bl	8000524 <__aeabi_i2d>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cee2:	f7f3 f9d1 	bl	8000288 <__aeabi_dsub>
 800cee6:	3530      	adds	r5, #48	@ 0x30
 800cee8:	f806 5b01 	strb.w	r5, [r6], #1
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	42a6      	cmp	r6, r4
 800cef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cef6:	f04f 0200 	mov.w	r2, #0
 800cefa:	d124      	bne.n	800cf46 <_dtoa_r+0x626>
 800cefc:	4baf      	ldr	r3, [pc, #700]	@ (800d1bc <_dtoa_r+0x89c>)
 800cefe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cf02:	f7f3 f9c3 	bl	800028c <__adddf3>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf0e:	f7f3 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d163      	bne.n	800cfde <_dtoa_r+0x6be>
 800cf16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf1a:	49a8      	ldr	r1, [pc, #672]	@ (800d1bc <_dtoa_r+0x89c>)
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	f7f3 f9b3 	bl	8000288 <__aeabi_dsub>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf2a:	f7f3 fdd7 	bl	8000adc <__aeabi_dcmplt>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f43f af14 	beq.w	800cd5c <_dtoa_r+0x43c>
 800cf34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cf36:	1e73      	subs	r3, r6, #1
 800cf38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf3e:	2b30      	cmp	r3, #48	@ 0x30
 800cf40:	d0f8      	beq.n	800cf34 <_dtoa_r+0x614>
 800cf42:	4647      	mov	r7, r8
 800cf44:	e03b      	b.n	800cfbe <_dtoa_r+0x69e>
 800cf46:	4b9e      	ldr	r3, [pc, #632]	@ (800d1c0 <_dtoa_r+0x8a0>)
 800cf48:	f7f3 fb56 	bl	80005f8 <__aeabi_dmul>
 800cf4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf50:	e7bc      	b.n	800cecc <_dtoa_r+0x5ac>
 800cf52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cf56:	4656      	mov	r6, sl
 800cf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f7f3 fc74 	bl	800084c <__aeabi_ddiv>
 800cf64:	f7f3 fdf8 	bl	8000b58 <__aeabi_d2iz>
 800cf68:	4680      	mov	r8, r0
 800cf6a:	f7f3 fadb 	bl	8000524 <__aeabi_i2d>
 800cf6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf72:	f7f3 fb41 	bl	80005f8 <__aeabi_dmul>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf82:	f7f3 f981 	bl	8000288 <__aeabi_dsub>
 800cf86:	f806 4b01 	strb.w	r4, [r6], #1
 800cf8a:	9d03      	ldr	r5, [sp, #12]
 800cf8c:	eba6 040a 	sub.w	r4, r6, sl
 800cf90:	42a5      	cmp	r5, r4
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	d133      	bne.n	800d000 <_dtoa_r+0x6e0>
 800cf98:	f7f3 f978 	bl	800028c <__adddf3>
 800cf9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	460d      	mov	r5, r1
 800cfa4:	f7f3 fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 800cfa8:	b9c0      	cbnz	r0, 800cfdc <_dtoa_r+0x6bc>
 800cfaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfb6:	b110      	cbz	r0, 800cfbe <_dtoa_r+0x69e>
 800cfb8:	f018 0f01 	tst.w	r8, #1
 800cfbc:	d10e      	bne.n	800cfdc <_dtoa_r+0x6bc>
 800cfbe:	9902      	ldr	r1, [sp, #8]
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f000 fbbd 	bl	800d740 <_Bfree>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	7033      	strb	r3, [r6, #0]
 800cfca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfcc:	3701      	adds	r7, #1
 800cfce:	601f      	str	r7, [r3, #0]
 800cfd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 824b 	beq.w	800d46e <_dtoa_r+0xb4e>
 800cfd8:	601e      	str	r6, [r3, #0]
 800cfda:	e248      	b.n	800d46e <_dtoa_r+0xb4e>
 800cfdc:	46b8      	mov	r8, r7
 800cfde:	4633      	mov	r3, r6
 800cfe0:	461e      	mov	r6, r3
 800cfe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfe6:	2a39      	cmp	r2, #57	@ 0x39
 800cfe8:	d106      	bne.n	800cff8 <_dtoa_r+0x6d8>
 800cfea:	459a      	cmp	sl, r3
 800cfec:	d1f8      	bne.n	800cfe0 <_dtoa_r+0x6c0>
 800cfee:	2230      	movs	r2, #48	@ 0x30
 800cff0:	f108 0801 	add.w	r8, r8, #1
 800cff4:	f88a 2000 	strb.w	r2, [sl]
 800cff8:	781a      	ldrb	r2, [r3, #0]
 800cffa:	3201      	adds	r2, #1
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	e7a0      	b.n	800cf42 <_dtoa_r+0x622>
 800d000:	4b6f      	ldr	r3, [pc, #444]	@ (800d1c0 <_dtoa_r+0x8a0>)
 800d002:	2200      	movs	r2, #0
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	2200      	movs	r2, #0
 800d00a:	2300      	movs	r3, #0
 800d00c:	4604      	mov	r4, r0
 800d00e:	460d      	mov	r5, r1
 800d010:	f7f3 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d014:	2800      	cmp	r0, #0
 800d016:	d09f      	beq.n	800cf58 <_dtoa_r+0x638>
 800d018:	e7d1      	b.n	800cfbe <_dtoa_r+0x69e>
 800d01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d01c:	2a00      	cmp	r2, #0
 800d01e:	f000 80ea 	beq.w	800d1f6 <_dtoa_r+0x8d6>
 800d022:	9a07      	ldr	r2, [sp, #28]
 800d024:	2a01      	cmp	r2, #1
 800d026:	f300 80cd 	bgt.w	800d1c4 <_dtoa_r+0x8a4>
 800d02a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	f000 80c1 	beq.w	800d1b4 <_dtoa_r+0x894>
 800d032:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d036:	9c08      	ldr	r4, [sp, #32]
 800d038:	9e00      	ldr	r6, [sp, #0]
 800d03a:	9a00      	ldr	r2, [sp, #0]
 800d03c:	441a      	add	r2, r3
 800d03e:	9200      	str	r2, [sp, #0]
 800d040:	9a06      	ldr	r2, [sp, #24]
 800d042:	2101      	movs	r1, #1
 800d044:	441a      	add	r2, r3
 800d046:	4648      	mov	r0, r9
 800d048:	9206      	str	r2, [sp, #24]
 800d04a:	f000 fc2d 	bl	800d8a8 <__i2b>
 800d04e:	4605      	mov	r5, r0
 800d050:	b166      	cbz	r6, 800d06c <_dtoa_r+0x74c>
 800d052:	9b06      	ldr	r3, [sp, #24]
 800d054:	2b00      	cmp	r3, #0
 800d056:	dd09      	ble.n	800d06c <_dtoa_r+0x74c>
 800d058:	42b3      	cmp	r3, r6
 800d05a:	9a00      	ldr	r2, [sp, #0]
 800d05c:	bfa8      	it	ge
 800d05e:	4633      	movge	r3, r6
 800d060:	1ad2      	subs	r2, r2, r3
 800d062:	9200      	str	r2, [sp, #0]
 800d064:	9a06      	ldr	r2, [sp, #24]
 800d066:	1af6      	subs	r6, r6, r3
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	9306      	str	r3, [sp, #24]
 800d06c:	9b08      	ldr	r3, [sp, #32]
 800d06e:	b30b      	cbz	r3, 800d0b4 <_dtoa_r+0x794>
 800d070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 80c6 	beq.w	800d204 <_dtoa_r+0x8e4>
 800d078:	2c00      	cmp	r4, #0
 800d07a:	f000 80c0 	beq.w	800d1fe <_dtoa_r+0x8de>
 800d07e:	4629      	mov	r1, r5
 800d080:	4622      	mov	r2, r4
 800d082:	4648      	mov	r0, r9
 800d084:	f000 fcc8 	bl	800da18 <__pow5mult>
 800d088:	9a02      	ldr	r2, [sp, #8]
 800d08a:	4601      	mov	r1, r0
 800d08c:	4605      	mov	r5, r0
 800d08e:	4648      	mov	r0, r9
 800d090:	f000 fc20 	bl	800d8d4 <__multiply>
 800d094:	9902      	ldr	r1, [sp, #8]
 800d096:	4680      	mov	r8, r0
 800d098:	4648      	mov	r0, r9
 800d09a:	f000 fb51 	bl	800d740 <_Bfree>
 800d09e:	9b08      	ldr	r3, [sp, #32]
 800d0a0:	1b1b      	subs	r3, r3, r4
 800d0a2:	9308      	str	r3, [sp, #32]
 800d0a4:	f000 80b1 	beq.w	800d20a <_dtoa_r+0x8ea>
 800d0a8:	9a08      	ldr	r2, [sp, #32]
 800d0aa:	4641      	mov	r1, r8
 800d0ac:	4648      	mov	r0, r9
 800d0ae:	f000 fcb3 	bl	800da18 <__pow5mult>
 800d0b2:	9002      	str	r0, [sp, #8]
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	4648      	mov	r0, r9
 800d0b8:	f000 fbf6 	bl	800d8a8 <__i2b>
 800d0bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0be:	4604      	mov	r4, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f000 81d8 	beq.w	800d476 <_dtoa_r+0xb56>
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	f000 fca4 	bl	800da18 <__pow5mult>
 800d0d0:	9b07      	ldr	r3, [sp, #28]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	f300 809f 	bgt.w	800d218 <_dtoa_r+0x8f8>
 800d0da:	9b04      	ldr	r3, [sp, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 8097 	bne.w	800d210 <_dtoa_r+0x8f0>
 800d0e2:	9b05      	ldr	r3, [sp, #20]
 800d0e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f040 8093 	bne.w	800d214 <_dtoa_r+0x8f4>
 800d0ee:	9b05      	ldr	r3, [sp, #20]
 800d0f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0f4:	0d1b      	lsrs	r3, r3, #20
 800d0f6:	051b      	lsls	r3, r3, #20
 800d0f8:	b133      	cbz	r3, 800d108 <_dtoa_r+0x7e8>
 800d0fa:	9b00      	ldr	r3, [sp, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	9b06      	ldr	r3, [sp, #24]
 800d102:	3301      	adds	r3, #1
 800d104:	9306      	str	r3, [sp, #24]
 800d106:	2301      	movs	r3, #1
 800d108:	9308      	str	r3, [sp, #32]
 800d10a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 81b8 	beq.w	800d482 <_dtoa_r+0xb62>
 800d112:	6923      	ldr	r3, [r4, #16]
 800d114:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d118:	6918      	ldr	r0, [r3, #16]
 800d11a:	f000 fb79 	bl	800d810 <__hi0bits>
 800d11e:	f1c0 0020 	rsb	r0, r0, #32
 800d122:	9b06      	ldr	r3, [sp, #24]
 800d124:	4418      	add	r0, r3
 800d126:	f010 001f 	ands.w	r0, r0, #31
 800d12a:	f000 8082 	beq.w	800d232 <_dtoa_r+0x912>
 800d12e:	f1c0 0320 	rsb	r3, r0, #32
 800d132:	2b04      	cmp	r3, #4
 800d134:	dd73      	ble.n	800d21e <_dtoa_r+0x8fe>
 800d136:	9b00      	ldr	r3, [sp, #0]
 800d138:	f1c0 001c 	rsb	r0, r0, #28
 800d13c:	4403      	add	r3, r0
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	4403      	add	r3, r0
 800d144:	4406      	add	r6, r0
 800d146:	9306      	str	r3, [sp, #24]
 800d148:	9b00      	ldr	r3, [sp, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dd05      	ble.n	800d15a <_dtoa_r+0x83a>
 800d14e:	9902      	ldr	r1, [sp, #8]
 800d150:	461a      	mov	r2, r3
 800d152:	4648      	mov	r0, r9
 800d154:	f000 fcba 	bl	800dacc <__lshift>
 800d158:	9002      	str	r0, [sp, #8]
 800d15a:	9b06      	ldr	r3, [sp, #24]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	dd05      	ble.n	800d16c <_dtoa_r+0x84c>
 800d160:	4621      	mov	r1, r4
 800d162:	461a      	mov	r2, r3
 800d164:	4648      	mov	r0, r9
 800d166:	f000 fcb1 	bl	800dacc <__lshift>
 800d16a:	4604      	mov	r4, r0
 800d16c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d061      	beq.n	800d236 <_dtoa_r+0x916>
 800d172:	9802      	ldr	r0, [sp, #8]
 800d174:	4621      	mov	r1, r4
 800d176:	f000 fd15 	bl	800dba4 <__mcmp>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	da5b      	bge.n	800d236 <_dtoa_r+0x916>
 800d17e:	2300      	movs	r3, #0
 800d180:	9902      	ldr	r1, [sp, #8]
 800d182:	220a      	movs	r2, #10
 800d184:	4648      	mov	r0, r9
 800d186:	f000 fafd 	bl	800d784 <__multadd>
 800d18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18c:	9002      	str	r0, [sp, #8]
 800d18e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8177 	beq.w	800d486 <_dtoa_r+0xb66>
 800d198:	4629      	mov	r1, r5
 800d19a:	2300      	movs	r3, #0
 800d19c:	220a      	movs	r2, #10
 800d19e:	4648      	mov	r0, r9
 800d1a0:	f000 faf0 	bl	800d784 <__multadd>
 800d1a4:	f1bb 0f00 	cmp.w	fp, #0
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	dc6f      	bgt.n	800d28c <_dtoa_r+0x96c>
 800d1ac:	9b07      	ldr	r3, [sp, #28]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	dc49      	bgt.n	800d246 <_dtoa_r+0x926>
 800d1b2:	e06b      	b.n	800d28c <_dtoa_r+0x96c>
 800d1b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d1ba:	e73c      	b.n	800d036 <_dtoa_r+0x716>
 800d1bc:	3fe00000 	.word	0x3fe00000
 800d1c0:	40240000 	.word	0x40240000
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	1e5c      	subs	r4, r3, #1
 800d1c8:	9b08      	ldr	r3, [sp, #32]
 800d1ca:	42a3      	cmp	r3, r4
 800d1cc:	db09      	blt.n	800d1e2 <_dtoa_r+0x8c2>
 800d1ce:	1b1c      	subs	r4, r3, r4
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f6bf af30 	bge.w	800d038 <_dtoa_r+0x718>
 800d1d8:	9b00      	ldr	r3, [sp, #0]
 800d1da:	9a03      	ldr	r2, [sp, #12]
 800d1dc:	1a9e      	subs	r6, r3, r2
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e72b      	b.n	800d03a <_dtoa_r+0x71a>
 800d1e2:	9b08      	ldr	r3, [sp, #32]
 800d1e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1e6:	9408      	str	r4, [sp, #32]
 800d1e8:	1ae3      	subs	r3, r4, r3
 800d1ea:	441a      	add	r2, r3
 800d1ec:	9e00      	ldr	r6, [sp, #0]
 800d1ee:	9b03      	ldr	r3, [sp, #12]
 800d1f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	e721      	b.n	800d03a <_dtoa_r+0x71a>
 800d1f6:	9c08      	ldr	r4, [sp, #32]
 800d1f8:	9e00      	ldr	r6, [sp, #0]
 800d1fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d1fc:	e728      	b.n	800d050 <_dtoa_r+0x730>
 800d1fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d202:	e751      	b.n	800d0a8 <_dtoa_r+0x788>
 800d204:	9a08      	ldr	r2, [sp, #32]
 800d206:	9902      	ldr	r1, [sp, #8]
 800d208:	e750      	b.n	800d0ac <_dtoa_r+0x78c>
 800d20a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d20e:	e751      	b.n	800d0b4 <_dtoa_r+0x794>
 800d210:	2300      	movs	r3, #0
 800d212:	e779      	b.n	800d108 <_dtoa_r+0x7e8>
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	e777      	b.n	800d108 <_dtoa_r+0x7e8>
 800d218:	2300      	movs	r3, #0
 800d21a:	9308      	str	r3, [sp, #32]
 800d21c:	e779      	b.n	800d112 <_dtoa_r+0x7f2>
 800d21e:	d093      	beq.n	800d148 <_dtoa_r+0x828>
 800d220:	9a00      	ldr	r2, [sp, #0]
 800d222:	331c      	adds	r3, #28
 800d224:	441a      	add	r2, r3
 800d226:	9200      	str	r2, [sp, #0]
 800d228:	9a06      	ldr	r2, [sp, #24]
 800d22a:	441a      	add	r2, r3
 800d22c:	441e      	add	r6, r3
 800d22e:	9206      	str	r2, [sp, #24]
 800d230:	e78a      	b.n	800d148 <_dtoa_r+0x828>
 800d232:	4603      	mov	r3, r0
 800d234:	e7f4      	b.n	800d220 <_dtoa_r+0x900>
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	46b8      	mov	r8, r7
 800d23c:	dc20      	bgt.n	800d280 <_dtoa_r+0x960>
 800d23e:	469b      	mov	fp, r3
 800d240:	9b07      	ldr	r3, [sp, #28]
 800d242:	2b02      	cmp	r3, #2
 800d244:	dd1e      	ble.n	800d284 <_dtoa_r+0x964>
 800d246:	f1bb 0f00 	cmp.w	fp, #0
 800d24a:	f47f adb1 	bne.w	800cdb0 <_dtoa_r+0x490>
 800d24e:	4621      	mov	r1, r4
 800d250:	465b      	mov	r3, fp
 800d252:	2205      	movs	r2, #5
 800d254:	4648      	mov	r0, r9
 800d256:	f000 fa95 	bl	800d784 <__multadd>
 800d25a:	4601      	mov	r1, r0
 800d25c:	4604      	mov	r4, r0
 800d25e:	9802      	ldr	r0, [sp, #8]
 800d260:	f000 fca0 	bl	800dba4 <__mcmp>
 800d264:	2800      	cmp	r0, #0
 800d266:	f77f ada3 	ble.w	800cdb0 <_dtoa_r+0x490>
 800d26a:	4656      	mov	r6, sl
 800d26c:	2331      	movs	r3, #49	@ 0x31
 800d26e:	f806 3b01 	strb.w	r3, [r6], #1
 800d272:	f108 0801 	add.w	r8, r8, #1
 800d276:	e59f      	b.n	800cdb8 <_dtoa_r+0x498>
 800d278:	9c03      	ldr	r4, [sp, #12]
 800d27a:	46b8      	mov	r8, r7
 800d27c:	4625      	mov	r5, r4
 800d27e:	e7f4      	b.n	800d26a <_dtoa_r+0x94a>
 800d280:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 8101 	beq.w	800d48e <_dtoa_r+0xb6e>
 800d28c:	2e00      	cmp	r6, #0
 800d28e:	dd05      	ble.n	800d29c <_dtoa_r+0x97c>
 800d290:	4629      	mov	r1, r5
 800d292:	4632      	mov	r2, r6
 800d294:	4648      	mov	r0, r9
 800d296:	f000 fc19 	bl	800dacc <__lshift>
 800d29a:	4605      	mov	r5, r0
 800d29c:	9b08      	ldr	r3, [sp, #32]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d05c      	beq.n	800d35c <_dtoa_r+0xa3c>
 800d2a2:	6869      	ldr	r1, [r5, #4]
 800d2a4:	4648      	mov	r0, r9
 800d2a6:	f000 fa0b 	bl	800d6c0 <_Balloc>
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	b928      	cbnz	r0, 800d2ba <_dtoa_r+0x99a>
 800d2ae:	4b82      	ldr	r3, [pc, #520]	@ (800d4b8 <_dtoa_r+0xb98>)
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2b6:	f7ff bb4a 	b.w	800c94e <_dtoa_r+0x2e>
 800d2ba:	692a      	ldr	r2, [r5, #16]
 800d2bc:	3202      	adds	r2, #2
 800d2be:	0092      	lsls	r2, r2, #2
 800d2c0:	f105 010c 	add.w	r1, r5, #12
 800d2c4:	300c      	adds	r0, #12
 800d2c6:	f7ff fa92 	bl	800c7ee <memcpy>
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4648      	mov	r0, r9
 800d2d0:	f000 fbfc 	bl	800dacc <__lshift>
 800d2d4:	f10a 0301 	add.w	r3, sl, #1
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	eb0a 030b 	add.w	r3, sl, fp
 800d2de:	9308      	str	r3, [sp, #32]
 800d2e0:	9b04      	ldr	r3, [sp, #16]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	462f      	mov	r7, r5
 800d2e8:	9306      	str	r3, [sp, #24]
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	9b00      	ldr	r3, [sp, #0]
 800d2ee:	9802      	ldr	r0, [sp, #8]
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2f6:	f7ff fa88 	bl	800c80a <quorem>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	3330      	adds	r3, #48	@ 0x30
 800d2fe:	9003      	str	r0, [sp, #12]
 800d300:	4639      	mov	r1, r7
 800d302:	9802      	ldr	r0, [sp, #8]
 800d304:	9309      	str	r3, [sp, #36]	@ 0x24
 800d306:	f000 fc4d 	bl	800dba4 <__mcmp>
 800d30a:	462a      	mov	r2, r5
 800d30c:	9004      	str	r0, [sp, #16]
 800d30e:	4621      	mov	r1, r4
 800d310:	4648      	mov	r0, r9
 800d312:	f000 fc63 	bl	800dbdc <__mdiff>
 800d316:	68c2      	ldr	r2, [r0, #12]
 800d318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d31a:	4606      	mov	r6, r0
 800d31c:	bb02      	cbnz	r2, 800d360 <_dtoa_r+0xa40>
 800d31e:	4601      	mov	r1, r0
 800d320:	9802      	ldr	r0, [sp, #8]
 800d322:	f000 fc3f 	bl	800dba4 <__mcmp>
 800d326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d328:	4602      	mov	r2, r0
 800d32a:	4631      	mov	r1, r6
 800d32c:	4648      	mov	r0, r9
 800d32e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d330:	9309      	str	r3, [sp, #36]	@ 0x24
 800d332:	f000 fa05 	bl	800d740 <_Bfree>
 800d336:	9b07      	ldr	r3, [sp, #28]
 800d338:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d33a:	9e00      	ldr	r6, [sp, #0]
 800d33c:	ea42 0103 	orr.w	r1, r2, r3
 800d340:	9b06      	ldr	r3, [sp, #24]
 800d342:	4319      	orrs	r1, r3
 800d344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d346:	d10d      	bne.n	800d364 <_dtoa_r+0xa44>
 800d348:	2b39      	cmp	r3, #57	@ 0x39
 800d34a:	d027      	beq.n	800d39c <_dtoa_r+0xa7c>
 800d34c:	9a04      	ldr	r2, [sp, #16]
 800d34e:	2a00      	cmp	r2, #0
 800d350:	dd01      	ble.n	800d356 <_dtoa_r+0xa36>
 800d352:	9b03      	ldr	r3, [sp, #12]
 800d354:	3331      	adds	r3, #49	@ 0x31
 800d356:	f88b 3000 	strb.w	r3, [fp]
 800d35a:	e52e      	b.n	800cdba <_dtoa_r+0x49a>
 800d35c:	4628      	mov	r0, r5
 800d35e:	e7b9      	b.n	800d2d4 <_dtoa_r+0x9b4>
 800d360:	2201      	movs	r2, #1
 800d362:	e7e2      	b.n	800d32a <_dtoa_r+0xa0a>
 800d364:	9904      	ldr	r1, [sp, #16]
 800d366:	2900      	cmp	r1, #0
 800d368:	db04      	blt.n	800d374 <_dtoa_r+0xa54>
 800d36a:	9807      	ldr	r0, [sp, #28]
 800d36c:	4301      	orrs	r1, r0
 800d36e:	9806      	ldr	r0, [sp, #24]
 800d370:	4301      	orrs	r1, r0
 800d372:	d120      	bne.n	800d3b6 <_dtoa_r+0xa96>
 800d374:	2a00      	cmp	r2, #0
 800d376:	ddee      	ble.n	800d356 <_dtoa_r+0xa36>
 800d378:	9902      	ldr	r1, [sp, #8]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	2201      	movs	r2, #1
 800d37e:	4648      	mov	r0, r9
 800d380:	f000 fba4 	bl	800dacc <__lshift>
 800d384:	4621      	mov	r1, r4
 800d386:	9002      	str	r0, [sp, #8]
 800d388:	f000 fc0c 	bl	800dba4 <__mcmp>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	9b00      	ldr	r3, [sp, #0]
 800d390:	dc02      	bgt.n	800d398 <_dtoa_r+0xa78>
 800d392:	d1e0      	bne.n	800d356 <_dtoa_r+0xa36>
 800d394:	07da      	lsls	r2, r3, #31
 800d396:	d5de      	bpl.n	800d356 <_dtoa_r+0xa36>
 800d398:	2b39      	cmp	r3, #57	@ 0x39
 800d39a:	d1da      	bne.n	800d352 <_dtoa_r+0xa32>
 800d39c:	2339      	movs	r3, #57	@ 0x39
 800d39e:	f88b 3000 	strb.w	r3, [fp]
 800d3a2:	4633      	mov	r3, r6
 800d3a4:	461e      	mov	r6, r3
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3ac:	2a39      	cmp	r2, #57	@ 0x39
 800d3ae:	d04e      	beq.n	800d44e <_dtoa_r+0xb2e>
 800d3b0:	3201      	adds	r2, #1
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	e501      	b.n	800cdba <_dtoa_r+0x49a>
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	dd03      	ble.n	800d3c2 <_dtoa_r+0xaa2>
 800d3ba:	2b39      	cmp	r3, #57	@ 0x39
 800d3bc:	d0ee      	beq.n	800d39c <_dtoa_r+0xa7c>
 800d3be:	3301      	adds	r3, #1
 800d3c0:	e7c9      	b.n	800d356 <_dtoa_r+0xa36>
 800d3c2:	9a00      	ldr	r2, [sp, #0]
 800d3c4:	9908      	ldr	r1, [sp, #32]
 800d3c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d3ca:	428a      	cmp	r2, r1
 800d3cc:	d028      	beq.n	800d420 <_dtoa_r+0xb00>
 800d3ce:	9902      	ldr	r1, [sp, #8]
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	220a      	movs	r2, #10
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	f000 f9d5 	bl	800d784 <__multadd>
 800d3da:	42af      	cmp	r7, r5
 800d3dc:	9002      	str	r0, [sp, #8]
 800d3de:	f04f 0300 	mov.w	r3, #0
 800d3e2:	f04f 020a 	mov.w	r2, #10
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4648      	mov	r0, r9
 800d3ea:	d107      	bne.n	800d3fc <_dtoa_r+0xadc>
 800d3ec:	f000 f9ca 	bl	800d784 <__multadd>
 800d3f0:	4607      	mov	r7, r0
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	9b00      	ldr	r3, [sp, #0]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	e777      	b.n	800d2ec <_dtoa_r+0x9cc>
 800d3fc:	f000 f9c2 	bl	800d784 <__multadd>
 800d400:	4629      	mov	r1, r5
 800d402:	4607      	mov	r7, r0
 800d404:	2300      	movs	r3, #0
 800d406:	220a      	movs	r2, #10
 800d408:	4648      	mov	r0, r9
 800d40a:	f000 f9bb 	bl	800d784 <__multadd>
 800d40e:	4605      	mov	r5, r0
 800d410:	e7f0      	b.n	800d3f4 <_dtoa_r+0xad4>
 800d412:	f1bb 0f00 	cmp.w	fp, #0
 800d416:	bfcc      	ite	gt
 800d418:	465e      	movgt	r6, fp
 800d41a:	2601      	movle	r6, #1
 800d41c:	4456      	add	r6, sl
 800d41e:	2700      	movs	r7, #0
 800d420:	9902      	ldr	r1, [sp, #8]
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	2201      	movs	r2, #1
 800d426:	4648      	mov	r0, r9
 800d428:	f000 fb50 	bl	800dacc <__lshift>
 800d42c:	4621      	mov	r1, r4
 800d42e:	9002      	str	r0, [sp, #8]
 800d430:	f000 fbb8 	bl	800dba4 <__mcmp>
 800d434:	2800      	cmp	r0, #0
 800d436:	dcb4      	bgt.n	800d3a2 <_dtoa_r+0xa82>
 800d438:	d102      	bne.n	800d440 <_dtoa_r+0xb20>
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	07db      	lsls	r3, r3, #31
 800d43e:	d4b0      	bmi.n	800d3a2 <_dtoa_r+0xa82>
 800d440:	4633      	mov	r3, r6
 800d442:	461e      	mov	r6, r3
 800d444:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d448:	2a30      	cmp	r2, #48	@ 0x30
 800d44a:	d0fa      	beq.n	800d442 <_dtoa_r+0xb22>
 800d44c:	e4b5      	b.n	800cdba <_dtoa_r+0x49a>
 800d44e:	459a      	cmp	sl, r3
 800d450:	d1a8      	bne.n	800d3a4 <_dtoa_r+0xa84>
 800d452:	2331      	movs	r3, #49	@ 0x31
 800d454:	f108 0801 	add.w	r8, r8, #1
 800d458:	f88a 3000 	strb.w	r3, [sl]
 800d45c:	e4ad      	b.n	800cdba <_dtoa_r+0x49a>
 800d45e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d460:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d4bc <_dtoa_r+0xb9c>
 800d464:	b11b      	cbz	r3, 800d46e <_dtoa_r+0xb4e>
 800d466:	f10a 0308 	add.w	r3, sl, #8
 800d46a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	4650      	mov	r0, sl
 800d470:	b017      	add	sp, #92	@ 0x5c
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	9b07      	ldr	r3, [sp, #28]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	f77f ae2e 	ble.w	800d0da <_dtoa_r+0x7ba>
 800d47e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d480:	9308      	str	r3, [sp, #32]
 800d482:	2001      	movs	r0, #1
 800d484:	e64d      	b.n	800d122 <_dtoa_r+0x802>
 800d486:	f1bb 0f00 	cmp.w	fp, #0
 800d48a:	f77f aed9 	ble.w	800d240 <_dtoa_r+0x920>
 800d48e:	4656      	mov	r6, sl
 800d490:	9802      	ldr	r0, [sp, #8]
 800d492:	4621      	mov	r1, r4
 800d494:	f7ff f9b9 	bl	800c80a <quorem>
 800d498:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d49c:	f806 3b01 	strb.w	r3, [r6], #1
 800d4a0:	eba6 020a 	sub.w	r2, r6, sl
 800d4a4:	4593      	cmp	fp, r2
 800d4a6:	ddb4      	ble.n	800d412 <_dtoa_r+0xaf2>
 800d4a8:	9902      	ldr	r1, [sp, #8]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	220a      	movs	r2, #10
 800d4ae:	4648      	mov	r0, r9
 800d4b0:	f000 f968 	bl	800d784 <__multadd>
 800d4b4:	9002      	str	r0, [sp, #8]
 800d4b6:	e7eb      	b.n	800d490 <_dtoa_r+0xb70>
 800d4b8:	0800f9b8 	.word	0x0800f9b8
 800d4bc:	0800f93c 	.word	0x0800f93c

0800d4c0 <_free_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	d041      	beq.n	800d54c <_free_r+0x8c>
 800d4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4cc:	1f0c      	subs	r4, r1, #4
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	bfb8      	it	lt
 800d4d2:	18e4      	addlt	r4, r4, r3
 800d4d4:	f000 f8e8 	bl	800d6a8 <__malloc_lock>
 800d4d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d550 <_free_r+0x90>)
 800d4da:	6813      	ldr	r3, [r2, #0]
 800d4dc:	b933      	cbnz	r3, 800d4ec <_free_r+0x2c>
 800d4de:	6063      	str	r3, [r4, #4]
 800d4e0:	6014      	str	r4, [r2, #0]
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4e8:	f000 b8e4 	b.w	800d6b4 <__malloc_unlock>
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	d908      	bls.n	800d502 <_free_r+0x42>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	1821      	adds	r1, r4, r0
 800d4f4:	428b      	cmp	r3, r1
 800d4f6:	bf01      	itttt	eq
 800d4f8:	6819      	ldreq	r1, [r3, #0]
 800d4fa:	685b      	ldreq	r3, [r3, #4]
 800d4fc:	1809      	addeq	r1, r1, r0
 800d4fe:	6021      	streq	r1, [r4, #0]
 800d500:	e7ed      	b.n	800d4de <_free_r+0x1e>
 800d502:	461a      	mov	r2, r3
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	b10b      	cbz	r3, 800d50c <_free_r+0x4c>
 800d508:	42a3      	cmp	r3, r4
 800d50a:	d9fa      	bls.n	800d502 <_free_r+0x42>
 800d50c:	6811      	ldr	r1, [r2, #0]
 800d50e:	1850      	adds	r0, r2, r1
 800d510:	42a0      	cmp	r0, r4
 800d512:	d10b      	bne.n	800d52c <_free_r+0x6c>
 800d514:	6820      	ldr	r0, [r4, #0]
 800d516:	4401      	add	r1, r0
 800d518:	1850      	adds	r0, r2, r1
 800d51a:	4283      	cmp	r3, r0
 800d51c:	6011      	str	r1, [r2, #0]
 800d51e:	d1e0      	bne.n	800d4e2 <_free_r+0x22>
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	6053      	str	r3, [r2, #4]
 800d526:	4408      	add	r0, r1
 800d528:	6010      	str	r0, [r2, #0]
 800d52a:	e7da      	b.n	800d4e2 <_free_r+0x22>
 800d52c:	d902      	bls.n	800d534 <_free_r+0x74>
 800d52e:	230c      	movs	r3, #12
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	e7d6      	b.n	800d4e2 <_free_r+0x22>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	1821      	adds	r1, r4, r0
 800d538:	428b      	cmp	r3, r1
 800d53a:	bf04      	itt	eq
 800d53c:	6819      	ldreq	r1, [r3, #0]
 800d53e:	685b      	ldreq	r3, [r3, #4]
 800d540:	6063      	str	r3, [r4, #4]
 800d542:	bf04      	itt	eq
 800d544:	1809      	addeq	r1, r1, r0
 800d546:	6021      	streq	r1, [r4, #0]
 800d548:	6054      	str	r4, [r2, #4]
 800d54a:	e7ca      	b.n	800d4e2 <_free_r+0x22>
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	bf00      	nop
 800d550:	20001970 	.word	0x20001970

0800d554 <malloc>:
 800d554:	4b02      	ldr	r3, [pc, #8]	@ (800d560 <malloc+0xc>)
 800d556:	4601      	mov	r1, r0
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	f000 b825 	b.w	800d5a8 <_malloc_r>
 800d55e:	bf00      	nop
 800d560:	20000148 	.word	0x20000148

0800d564 <sbrk_aligned>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4e0f      	ldr	r6, [pc, #60]	@ (800d5a4 <sbrk_aligned+0x40>)
 800d568:	460c      	mov	r4, r1
 800d56a:	6831      	ldr	r1, [r6, #0]
 800d56c:	4605      	mov	r5, r0
 800d56e:	b911      	cbnz	r1, 800d576 <sbrk_aligned+0x12>
 800d570:	f001 f804 	bl	800e57c <_sbrk_r>
 800d574:	6030      	str	r0, [r6, #0]
 800d576:	4621      	mov	r1, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	f000 ffff 	bl	800e57c <_sbrk_r>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d103      	bne.n	800d58a <sbrk_aligned+0x26>
 800d582:	f04f 34ff 	mov.w	r4, #4294967295
 800d586:	4620      	mov	r0, r4
 800d588:	bd70      	pop	{r4, r5, r6, pc}
 800d58a:	1cc4      	adds	r4, r0, #3
 800d58c:	f024 0403 	bic.w	r4, r4, #3
 800d590:	42a0      	cmp	r0, r4
 800d592:	d0f8      	beq.n	800d586 <sbrk_aligned+0x22>
 800d594:	1a21      	subs	r1, r4, r0
 800d596:	4628      	mov	r0, r5
 800d598:	f000 fff0 	bl	800e57c <_sbrk_r>
 800d59c:	3001      	adds	r0, #1
 800d59e:	d1f2      	bne.n	800d586 <sbrk_aligned+0x22>
 800d5a0:	e7ef      	b.n	800d582 <sbrk_aligned+0x1e>
 800d5a2:	bf00      	nop
 800d5a4:	2000196c 	.word	0x2000196c

0800d5a8 <_malloc_r>:
 800d5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ac:	1ccd      	adds	r5, r1, #3
 800d5ae:	f025 0503 	bic.w	r5, r5, #3
 800d5b2:	3508      	adds	r5, #8
 800d5b4:	2d0c      	cmp	r5, #12
 800d5b6:	bf38      	it	cc
 800d5b8:	250c      	movcc	r5, #12
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	4606      	mov	r6, r0
 800d5be:	db01      	blt.n	800d5c4 <_malloc_r+0x1c>
 800d5c0:	42a9      	cmp	r1, r5
 800d5c2:	d904      	bls.n	800d5ce <_malloc_r+0x26>
 800d5c4:	230c      	movs	r3, #12
 800d5c6:	6033      	str	r3, [r6, #0]
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6a4 <_malloc_r+0xfc>
 800d5d2:	f000 f869 	bl	800d6a8 <__malloc_lock>
 800d5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5da:	461c      	mov	r4, r3
 800d5dc:	bb44      	cbnz	r4, 800d630 <_malloc_r+0x88>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ffbf 	bl	800d564 <sbrk_aligned>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	d158      	bne.n	800d69e <_malloc_r+0xf6>
 800d5ec:	f8d8 4000 	ldr.w	r4, [r8]
 800d5f0:	4627      	mov	r7, r4
 800d5f2:	2f00      	cmp	r7, #0
 800d5f4:	d143      	bne.n	800d67e <_malloc_r+0xd6>
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	d04b      	beq.n	800d692 <_malloc_r+0xea>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	4630      	mov	r0, r6
 800d600:	eb04 0903 	add.w	r9, r4, r3
 800d604:	f000 ffba 	bl	800e57c <_sbrk_r>
 800d608:	4581      	cmp	r9, r0
 800d60a:	d142      	bne.n	800d692 <_malloc_r+0xea>
 800d60c:	6821      	ldr	r1, [r4, #0]
 800d60e:	1a6d      	subs	r5, r5, r1
 800d610:	4629      	mov	r1, r5
 800d612:	4630      	mov	r0, r6
 800d614:	f7ff ffa6 	bl	800d564 <sbrk_aligned>
 800d618:	3001      	adds	r0, #1
 800d61a:	d03a      	beq.n	800d692 <_malloc_r+0xea>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	442b      	add	r3, r5
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	f8d8 3000 	ldr.w	r3, [r8]
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	bb62      	cbnz	r2, 800d684 <_malloc_r+0xdc>
 800d62a:	f8c8 7000 	str.w	r7, [r8]
 800d62e:	e00f      	b.n	800d650 <_malloc_r+0xa8>
 800d630:	6822      	ldr	r2, [r4, #0]
 800d632:	1b52      	subs	r2, r2, r5
 800d634:	d420      	bmi.n	800d678 <_malloc_r+0xd0>
 800d636:	2a0b      	cmp	r2, #11
 800d638:	d917      	bls.n	800d66a <_malloc_r+0xc2>
 800d63a:	1961      	adds	r1, r4, r5
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	6025      	str	r5, [r4, #0]
 800d640:	bf18      	it	ne
 800d642:	6059      	strne	r1, [r3, #4]
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	bf08      	it	eq
 800d648:	f8c8 1000 	streq.w	r1, [r8]
 800d64c:	5162      	str	r2, [r4, r5]
 800d64e:	604b      	str	r3, [r1, #4]
 800d650:	4630      	mov	r0, r6
 800d652:	f000 f82f 	bl	800d6b4 <__malloc_unlock>
 800d656:	f104 000b 	add.w	r0, r4, #11
 800d65a:	1d23      	adds	r3, r4, #4
 800d65c:	f020 0007 	bic.w	r0, r0, #7
 800d660:	1ac2      	subs	r2, r0, r3
 800d662:	bf1c      	itt	ne
 800d664:	1a1b      	subne	r3, r3, r0
 800d666:	50a3      	strne	r3, [r4, r2]
 800d668:	e7af      	b.n	800d5ca <_malloc_r+0x22>
 800d66a:	6862      	ldr	r2, [r4, #4]
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	bf0c      	ite	eq
 800d670:	f8c8 2000 	streq.w	r2, [r8]
 800d674:	605a      	strne	r2, [r3, #4]
 800d676:	e7eb      	b.n	800d650 <_malloc_r+0xa8>
 800d678:	4623      	mov	r3, r4
 800d67a:	6864      	ldr	r4, [r4, #4]
 800d67c:	e7ae      	b.n	800d5dc <_malloc_r+0x34>
 800d67e:	463c      	mov	r4, r7
 800d680:	687f      	ldr	r7, [r7, #4]
 800d682:	e7b6      	b.n	800d5f2 <_malloc_r+0x4a>
 800d684:	461a      	mov	r2, r3
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	42a3      	cmp	r3, r4
 800d68a:	d1fb      	bne.n	800d684 <_malloc_r+0xdc>
 800d68c:	2300      	movs	r3, #0
 800d68e:	6053      	str	r3, [r2, #4]
 800d690:	e7de      	b.n	800d650 <_malloc_r+0xa8>
 800d692:	230c      	movs	r3, #12
 800d694:	6033      	str	r3, [r6, #0]
 800d696:	4630      	mov	r0, r6
 800d698:	f000 f80c 	bl	800d6b4 <__malloc_unlock>
 800d69c:	e794      	b.n	800d5c8 <_malloc_r+0x20>
 800d69e:	6005      	str	r5, [r0, #0]
 800d6a0:	e7d6      	b.n	800d650 <_malloc_r+0xa8>
 800d6a2:	bf00      	nop
 800d6a4:	20001970 	.word	0x20001970

0800d6a8 <__malloc_lock>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	@ (800d6b0 <__malloc_lock+0x8>)
 800d6aa:	f7ff b89e 	b.w	800c7ea <__retarget_lock_acquire_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	20001968 	.word	0x20001968

0800d6b4 <__malloc_unlock>:
 800d6b4:	4801      	ldr	r0, [pc, #4]	@ (800d6bc <__malloc_unlock+0x8>)
 800d6b6:	f7ff b899 	b.w	800c7ec <__retarget_lock_release_recursive>
 800d6ba:	bf00      	nop
 800d6bc:	20001968 	.word	0x20001968

0800d6c0 <_Balloc>:
 800d6c0:	b570      	push	{r4, r5, r6, lr}
 800d6c2:	69c6      	ldr	r6, [r0, #28]
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	460d      	mov	r5, r1
 800d6c8:	b976      	cbnz	r6, 800d6e8 <_Balloc+0x28>
 800d6ca:	2010      	movs	r0, #16
 800d6cc:	f7ff ff42 	bl	800d554 <malloc>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	61e0      	str	r0, [r4, #28]
 800d6d4:	b920      	cbnz	r0, 800d6e0 <_Balloc+0x20>
 800d6d6:	4b18      	ldr	r3, [pc, #96]	@ (800d738 <_Balloc+0x78>)
 800d6d8:	4818      	ldr	r0, [pc, #96]	@ (800d73c <_Balloc+0x7c>)
 800d6da:	216b      	movs	r1, #107	@ 0x6b
 800d6dc:	f000 ff5e 	bl	800e59c <__assert_func>
 800d6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e4:	6006      	str	r6, [r0, #0]
 800d6e6:	60c6      	str	r6, [r0, #12]
 800d6e8:	69e6      	ldr	r6, [r4, #28]
 800d6ea:	68f3      	ldr	r3, [r6, #12]
 800d6ec:	b183      	cbz	r3, 800d710 <_Balloc+0x50>
 800d6ee:	69e3      	ldr	r3, [r4, #28]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6f6:	b9b8      	cbnz	r0, 800d728 <_Balloc+0x68>
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d6fe:	1d72      	adds	r2, r6, #5
 800d700:	0092      	lsls	r2, r2, #2
 800d702:	4620      	mov	r0, r4
 800d704:	f000 ff68 	bl	800e5d8 <_calloc_r>
 800d708:	b160      	cbz	r0, 800d724 <_Balloc+0x64>
 800d70a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d70e:	e00e      	b.n	800d72e <_Balloc+0x6e>
 800d710:	2221      	movs	r2, #33	@ 0x21
 800d712:	2104      	movs	r1, #4
 800d714:	4620      	mov	r0, r4
 800d716:	f000 ff5f 	bl	800e5d8 <_calloc_r>
 800d71a:	69e3      	ldr	r3, [r4, #28]
 800d71c:	60f0      	str	r0, [r6, #12]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e4      	bne.n	800d6ee <_Balloc+0x2e>
 800d724:	2000      	movs	r0, #0
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	6802      	ldr	r2, [r0, #0]
 800d72a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d72e:	2300      	movs	r3, #0
 800d730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d734:	e7f7      	b.n	800d726 <_Balloc+0x66>
 800d736:	bf00      	nop
 800d738:	0800f949 	.word	0x0800f949
 800d73c:	0800f9c9 	.word	0x0800f9c9

0800d740 <_Bfree>:
 800d740:	b570      	push	{r4, r5, r6, lr}
 800d742:	69c6      	ldr	r6, [r0, #28]
 800d744:	4605      	mov	r5, r0
 800d746:	460c      	mov	r4, r1
 800d748:	b976      	cbnz	r6, 800d768 <_Bfree+0x28>
 800d74a:	2010      	movs	r0, #16
 800d74c:	f7ff ff02 	bl	800d554 <malloc>
 800d750:	4602      	mov	r2, r0
 800d752:	61e8      	str	r0, [r5, #28]
 800d754:	b920      	cbnz	r0, 800d760 <_Bfree+0x20>
 800d756:	4b09      	ldr	r3, [pc, #36]	@ (800d77c <_Bfree+0x3c>)
 800d758:	4809      	ldr	r0, [pc, #36]	@ (800d780 <_Bfree+0x40>)
 800d75a:	218f      	movs	r1, #143	@ 0x8f
 800d75c:	f000 ff1e 	bl	800e59c <__assert_func>
 800d760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d764:	6006      	str	r6, [r0, #0]
 800d766:	60c6      	str	r6, [r0, #12]
 800d768:	b13c      	cbz	r4, 800d77a <_Bfree+0x3a>
 800d76a:	69eb      	ldr	r3, [r5, #28]
 800d76c:	6862      	ldr	r2, [r4, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d774:	6021      	str	r1, [r4, #0]
 800d776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	0800f949 	.word	0x0800f949
 800d780:	0800f9c9 	.word	0x0800f9c9

0800d784 <__multadd>:
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	690d      	ldr	r5, [r1, #16]
 800d78a:	4607      	mov	r7, r0
 800d78c:	460c      	mov	r4, r1
 800d78e:	461e      	mov	r6, r3
 800d790:	f101 0c14 	add.w	ip, r1, #20
 800d794:	2000      	movs	r0, #0
 800d796:	f8dc 3000 	ldr.w	r3, [ip]
 800d79a:	b299      	uxth	r1, r3
 800d79c:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a0:	0c1e      	lsrs	r6, r3, #16
 800d7a2:	0c0b      	lsrs	r3, r1, #16
 800d7a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7a8:	b289      	uxth	r1, r1
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b0:	4285      	cmp	r5, r0
 800d7b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ba:	dcec      	bgt.n	800d796 <__multadd+0x12>
 800d7bc:	b30e      	cbz	r6, 800d802 <__multadd+0x7e>
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	42ab      	cmp	r3, r5
 800d7c2:	dc19      	bgt.n	800d7f8 <__multadd+0x74>
 800d7c4:	6861      	ldr	r1, [r4, #4]
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	3101      	adds	r1, #1
 800d7ca:	f7ff ff79 	bl	800d6c0 <_Balloc>
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	b928      	cbnz	r0, 800d7de <__multadd+0x5a>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d808 <__multadd+0x84>)
 800d7d6:	480d      	ldr	r0, [pc, #52]	@ (800d80c <__multadd+0x88>)
 800d7d8:	21ba      	movs	r1, #186	@ 0xba
 800d7da:	f000 fedf 	bl	800e59c <__assert_func>
 800d7de:	6922      	ldr	r2, [r4, #16]
 800d7e0:	3202      	adds	r2, #2
 800d7e2:	f104 010c 	add.w	r1, r4, #12
 800d7e6:	0092      	lsls	r2, r2, #2
 800d7e8:	300c      	adds	r0, #12
 800d7ea:	f7ff f800 	bl	800c7ee <memcpy>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff ffa5 	bl	800d740 <_Bfree>
 800d7f6:	4644      	mov	r4, r8
 800d7f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	615e      	str	r6, [r3, #20]
 800d800:	6125      	str	r5, [r4, #16]
 800d802:	4620      	mov	r0, r4
 800d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d808:	0800f9b8 	.word	0x0800f9b8
 800d80c:	0800f9c9 	.word	0x0800f9c9

0800d810 <__hi0bits>:
 800d810:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d814:	4603      	mov	r3, r0
 800d816:	bf36      	itet	cc
 800d818:	0403      	lslcc	r3, r0, #16
 800d81a:	2000      	movcs	r0, #0
 800d81c:	2010      	movcc	r0, #16
 800d81e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d822:	bf3c      	itt	cc
 800d824:	021b      	lslcc	r3, r3, #8
 800d826:	3008      	addcc	r0, #8
 800d828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d82c:	bf3c      	itt	cc
 800d82e:	011b      	lslcc	r3, r3, #4
 800d830:	3004      	addcc	r0, #4
 800d832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d836:	bf3c      	itt	cc
 800d838:	009b      	lslcc	r3, r3, #2
 800d83a:	3002      	addcc	r0, #2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	db05      	blt.n	800d84c <__hi0bits+0x3c>
 800d840:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d844:	f100 0001 	add.w	r0, r0, #1
 800d848:	bf08      	it	eq
 800d84a:	2020      	moveq	r0, #32
 800d84c:	4770      	bx	lr

0800d84e <__lo0bits>:
 800d84e:	6803      	ldr	r3, [r0, #0]
 800d850:	4602      	mov	r2, r0
 800d852:	f013 0007 	ands.w	r0, r3, #7
 800d856:	d00b      	beq.n	800d870 <__lo0bits+0x22>
 800d858:	07d9      	lsls	r1, r3, #31
 800d85a:	d421      	bmi.n	800d8a0 <__lo0bits+0x52>
 800d85c:	0798      	lsls	r0, r3, #30
 800d85e:	bf49      	itett	mi
 800d860:	085b      	lsrmi	r3, r3, #1
 800d862:	089b      	lsrpl	r3, r3, #2
 800d864:	2001      	movmi	r0, #1
 800d866:	6013      	strmi	r3, [r2, #0]
 800d868:	bf5c      	itt	pl
 800d86a:	6013      	strpl	r3, [r2, #0]
 800d86c:	2002      	movpl	r0, #2
 800d86e:	4770      	bx	lr
 800d870:	b299      	uxth	r1, r3
 800d872:	b909      	cbnz	r1, 800d878 <__lo0bits+0x2a>
 800d874:	0c1b      	lsrs	r3, r3, #16
 800d876:	2010      	movs	r0, #16
 800d878:	b2d9      	uxtb	r1, r3
 800d87a:	b909      	cbnz	r1, 800d880 <__lo0bits+0x32>
 800d87c:	3008      	adds	r0, #8
 800d87e:	0a1b      	lsrs	r3, r3, #8
 800d880:	0719      	lsls	r1, r3, #28
 800d882:	bf04      	itt	eq
 800d884:	091b      	lsreq	r3, r3, #4
 800d886:	3004      	addeq	r0, #4
 800d888:	0799      	lsls	r1, r3, #30
 800d88a:	bf04      	itt	eq
 800d88c:	089b      	lsreq	r3, r3, #2
 800d88e:	3002      	addeq	r0, #2
 800d890:	07d9      	lsls	r1, r3, #31
 800d892:	d403      	bmi.n	800d89c <__lo0bits+0x4e>
 800d894:	085b      	lsrs	r3, r3, #1
 800d896:	f100 0001 	add.w	r0, r0, #1
 800d89a:	d003      	beq.n	800d8a4 <__lo0bits+0x56>
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	4770      	bx	lr
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	4770      	bx	lr
 800d8a4:	2020      	movs	r0, #32
 800d8a6:	4770      	bx	lr

0800d8a8 <__i2b>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	f7ff ff07 	bl	800d6c0 <_Balloc>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	b928      	cbnz	r0, 800d8c2 <__i2b+0x1a>
 800d8b6:	4b05      	ldr	r3, [pc, #20]	@ (800d8cc <__i2b+0x24>)
 800d8b8:	4805      	ldr	r0, [pc, #20]	@ (800d8d0 <__i2b+0x28>)
 800d8ba:	f240 1145 	movw	r1, #325	@ 0x145
 800d8be:	f000 fe6d 	bl	800e59c <__assert_func>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	6144      	str	r4, [r0, #20]
 800d8c6:	6103      	str	r3, [r0, #16]
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	bf00      	nop
 800d8cc:	0800f9b8 	.word	0x0800f9b8
 800d8d0:	0800f9c9 	.word	0x0800f9c9

0800d8d4 <__multiply>:
 800d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d8:	4617      	mov	r7, r2
 800d8da:	690a      	ldr	r2, [r1, #16]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	bfa8      	it	ge
 800d8e2:	463b      	movge	r3, r7
 800d8e4:	4689      	mov	r9, r1
 800d8e6:	bfa4      	itt	ge
 800d8e8:	460f      	movge	r7, r1
 800d8ea:	4699      	movge	r9, r3
 800d8ec:	693d      	ldr	r5, [r7, #16]
 800d8ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	eb05 060a 	add.w	r6, r5, sl
 800d8fa:	42b3      	cmp	r3, r6
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	bfb8      	it	lt
 800d900:	3101      	addlt	r1, #1
 800d902:	f7ff fedd 	bl	800d6c0 <_Balloc>
 800d906:	b930      	cbnz	r0, 800d916 <__multiply+0x42>
 800d908:	4602      	mov	r2, r0
 800d90a:	4b41      	ldr	r3, [pc, #260]	@ (800da10 <__multiply+0x13c>)
 800d90c:	4841      	ldr	r0, [pc, #260]	@ (800da14 <__multiply+0x140>)
 800d90e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d912:	f000 fe43 	bl	800e59c <__assert_func>
 800d916:	f100 0414 	add.w	r4, r0, #20
 800d91a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d91e:	4623      	mov	r3, r4
 800d920:	2200      	movs	r2, #0
 800d922:	4573      	cmp	r3, lr
 800d924:	d320      	bcc.n	800d968 <__multiply+0x94>
 800d926:	f107 0814 	add.w	r8, r7, #20
 800d92a:	f109 0114 	add.w	r1, r9, #20
 800d92e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d932:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d936:	9302      	str	r3, [sp, #8]
 800d938:	1beb      	subs	r3, r5, r7
 800d93a:	3b15      	subs	r3, #21
 800d93c:	f023 0303 	bic.w	r3, r3, #3
 800d940:	3304      	adds	r3, #4
 800d942:	3715      	adds	r7, #21
 800d944:	42bd      	cmp	r5, r7
 800d946:	bf38      	it	cc
 800d948:	2304      	movcc	r3, #4
 800d94a:	9301      	str	r3, [sp, #4]
 800d94c:	9b02      	ldr	r3, [sp, #8]
 800d94e:	9103      	str	r1, [sp, #12]
 800d950:	428b      	cmp	r3, r1
 800d952:	d80c      	bhi.n	800d96e <__multiply+0x9a>
 800d954:	2e00      	cmp	r6, #0
 800d956:	dd03      	ble.n	800d960 <__multiply+0x8c>
 800d958:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d055      	beq.n	800da0c <__multiply+0x138>
 800d960:	6106      	str	r6, [r0, #16]
 800d962:	b005      	add	sp, #20
 800d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d968:	f843 2b04 	str.w	r2, [r3], #4
 800d96c:	e7d9      	b.n	800d922 <__multiply+0x4e>
 800d96e:	f8b1 a000 	ldrh.w	sl, [r1]
 800d972:	f1ba 0f00 	cmp.w	sl, #0
 800d976:	d01f      	beq.n	800d9b8 <__multiply+0xe4>
 800d978:	46c4      	mov	ip, r8
 800d97a:	46a1      	mov	r9, r4
 800d97c:	2700      	movs	r7, #0
 800d97e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d982:	f8d9 3000 	ldr.w	r3, [r9]
 800d986:	fa1f fb82 	uxth.w	fp, r2
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d990:	443b      	add	r3, r7
 800d992:	f8d9 7000 	ldr.w	r7, [r9]
 800d996:	0c12      	lsrs	r2, r2, #16
 800d998:	0c3f      	lsrs	r7, r7, #16
 800d99a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d99e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9a8:	4565      	cmp	r5, ip
 800d9aa:	f849 3b04 	str.w	r3, [r9], #4
 800d9ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d9b2:	d8e4      	bhi.n	800d97e <__multiply+0xaa>
 800d9b4:	9b01      	ldr	r3, [sp, #4]
 800d9b6:	50e7      	str	r7, [r4, r3]
 800d9b8:	9b03      	ldr	r3, [sp, #12]
 800d9ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9be:	3104      	adds	r1, #4
 800d9c0:	f1b9 0f00 	cmp.w	r9, #0
 800d9c4:	d020      	beq.n	800da08 <__multiply+0x134>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	4647      	mov	r7, r8
 800d9ca:	46a4      	mov	ip, r4
 800d9cc:	f04f 0a00 	mov.w	sl, #0
 800d9d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800d9d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d9d8:	fb09 220b 	mla	r2, r9, fp, r2
 800d9dc:	4452      	add	r2, sl
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e4:	f84c 3b04 	str.w	r3, [ip], #4
 800d9e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800d9ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800d9f4:	fb09 330a 	mla	r3, r9, sl, r3
 800d9f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d9fc:	42bd      	cmp	r5, r7
 800d9fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da02:	d8e5      	bhi.n	800d9d0 <__multiply+0xfc>
 800da04:	9a01      	ldr	r2, [sp, #4]
 800da06:	50a3      	str	r3, [r4, r2]
 800da08:	3404      	adds	r4, #4
 800da0a:	e79f      	b.n	800d94c <__multiply+0x78>
 800da0c:	3e01      	subs	r6, #1
 800da0e:	e7a1      	b.n	800d954 <__multiply+0x80>
 800da10:	0800f9b8 	.word	0x0800f9b8
 800da14:	0800f9c9 	.word	0x0800f9c9

0800da18 <__pow5mult>:
 800da18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da1c:	4615      	mov	r5, r2
 800da1e:	f012 0203 	ands.w	r2, r2, #3
 800da22:	4607      	mov	r7, r0
 800da24:	460e      	mov	r6, r1
 800da26:	d007      	beq.n	800da38 <__pow5mult+0x20>
 800da28:	4c25      	ldr	r4, [pc, #148]	@ (800dac0 <__pow5mult+0xa8>)
 800da2a:	3a01      	subs	r2, #1
 800da2c:	2300      	movs	r3, #0
 800da2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da32:	f7ff fea7 	bl	800d784 <__multadd>
 800da36:	4606      	mov	r6, r0
 800da38:	10ad      	asrs	r5, r5, #2
 800da3a:	d03d      	beq.n	800dab8 <__pow5mult+0xa0>
 800da3c:	69fc      	ldr	r4, [r7, #28]
 800da3e:	b97c      	cbnz	r4, 800da60 <__pow5mult+0x48>
 800da40:	2010      	movs	r0, #16
 800da42:	f7ff fd87 	bl	800d554 <malloc>
 800da46:	4602      	mov	r2, r0
 800da48:	61f8      	str	r0, [r7, #28]
 800da4a:	b928      	cbnz	r0, 800da58 <__pow5mult+0x40>
 800da4c:	4b1d      	ldr	r3, [pc, #116]	@ (800dac4 <__pow5mult+0xac>)
 800da4e:	481e      	ldr	r0, [pc, #120]	@ (800dac8 <__pow5mult+0xb0>)
 800da50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da54:	f000 fda2 	bl	800e59c <__assert_func>
 800da58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da5c:	6004      	str	r4, [r0, #0]
 800da5e:	60c4      	str	r4, [r0, #12]
 800da60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da68:	b94c      	cbnz	r4, 800da7e <__pow5mult+0x66>
 800da6a:	f240 2171 	movw	r1, #625	@ 0x271
 800da6e:	4638      	mov	r0, r7
 800da70:	f7ff ff1a 	bl	800d8a8 <__i2b>
 800da74:	2300      	movs	r3, #0
 800da76:	f8c8 0008 	str.w	r0, [r8, #8]
 800da7a:	4604      	mov	r4, r0
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	f04f 0900 	mov.w	r9, #0
 800da82:	07eb      	lsls	r3, r5, #31
 800da84:	d50a      	bpl.n	800da9c <__pow5mult+0x84>
 800da86:	4631      	mov	r1, r6
 800da88:	4622      	mov	r2, r4
 800da8a:	4638      	mov	r0, r7
 800da8c:	f7ff ff22 	bl	800d8d4 <__multiply>
 800da90:	4631      	mov	r1, r6
 800da92:	4680      	mov	r8, r0
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff fe53 	bl	800d740 <_Bfree>
 800da9a:	4646      	mov	r6, r8
 800da9c:	106d      	asrs	r5, r5, #1
 800da9e:	d00b      	beq.n	800dab8 <__pow5mult+0xa0>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	b938      	cbnz	r0, 800dab4 <__pow5mult+0x9c>
 800daa4:	4622      	mov	r2, r4
 800daa6:	4621      	mov	r1, r4
 800daa8:	4638      	mov	r0, r7
 800daaa:	f7ff ff13 	bl	800d8d4 <__multiply>
 800daae:	6020      	str	r0, [r4, #0]
 800dab0:	f8c0 9000 	str.w	r9, [r0]
 800dab4:	4604      	mov	r4, r0
 800dab6:	e7e4      	b.n	800da82 <__pow5mult+0x6a>
 800dab8:	4630      	mov	r0, r6
 800daba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dabe:	bf00      	nop
 800dac0:	0800fa7c 	.word	0x0800fa7c
 800dac4:	0800f949 	.word	0x0800f949
 800dac8:	0800f9c9 	.word	0x0800f9c9

0800dacc <__lshift>:
 800dacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	460c      	mov	r4, r1
 800dad2:	6849      	ldr	r1, [r1, #4]
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	4607      	mov	r7, r0
 800dade:	4691      	mov	r9, r2
 800dae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dae4:	f108 0601 	add.w	r6, r8, #1
 800dae8:	42b3      	cmp	r3, r6
 800daea:	db0b      	blt.n	800db04 <__lshift+0x38>
 800daec:	4638      	mov	r0, r7
 800daee:	f7ff fde7 	bl	800d6c0 <_Balloc>
 800daf2:	4605      	mov	r5, r0
 800daf4:	b948      	cbnz	r0, 800db0a <__lshift+0x3e>
 800daf6:	4602      	mov	r2, r0
 800daf8:	4b28      	ldr	r3, [pc, #160]	@ (800db9c <__lshift+0xd0>)
 800dafa:	4829      	ldr	r0, [pc, #164]	@ (800dba0 <__lshift+0xd4>)
 800dafc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db00:	f000 fd4c 	bl	800e59c <__assert_func>
 800db04:	3101      	adds	r1, #1
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	e7ee      	b.n	800dae8 <__lshift+0x1c>
 800db0a:	2300      	movs	r3, #0
 800db0c:	f100 0114 	add.w	r1, r0, #20
 800db10:	f100 0210 	add.w	r2, r0, #16
 800db14:	4618      	mov	r0, r3
 800db16:	4553      	cmp	r3, sl
 800db18:	db33      	blt.n	800db82 <__lshift+0xb6>
 800db1a:	6920      	ldr	r0, [r4, #16]
 800db1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db20:	f104 0314 	add.w	r3, r4, #20
 800db24:	f019 091f 	ands.w	r9, r9, #31
 800db28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db30:	d02b      	beq.n	800db8a <__lshift+0xbe>
 800db32:	f1c9 0e20 	rsb	lr, r9, #32
 800db36:	468a      	mov	sl, r1
 800db38:	2200      	movs	r2, #0
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	fa00 f009 	lsl.w	r0, r0, r9
 800db40:	4310      	orrs	r0, r2
 800db42:	f84a 0b04 	str.w	r0, [sl], #4
 800db46:	f853 2b04 	ldr.w	r2, [r3], #4
 800db4a:	459c      	cmp	ip, r3
 800db4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db50:	d8f3      	bhi.n	800db3a <__lshift+0x6e>
 800db52:	ebac 0304 	sub.w	r3, ip, r4
 800db56:	3b15      	subs	r3, #21
 800db58:	f023 0303 	bic.w	r3, r3, #3
 800db5c:	3304      	adds	r3, #4
 800db5e:	f104 0015 	add.w	r0, r4, #21
 800db62:	4560      	cmp	r0, ip
 800db64:	bf88      	it	hi
 800db66:	2304      	movhi	r3, #4
 800db68:	50ca      	str	r2, [r1, r3]
 800db6a:	b10a      	cbz	r2, 800db70 <__lshift+0xa4>
 800db6c:	f108 0602 	add.w	r6, r8, #2
 800db70:	3e01      	subs	r6, #1
 800db72:	4638      	mov	r0, r7
 800db74:	612e      	str	r6, [r5, #16]
 800db76:	4621      	mov	r1, r4
 800db78:	f7ff fde2 	bl	800d740 <_Bfree>
 800db7c:	4628      	mov	r0, r5
 800db7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db82:	f842 0f04 	str.w	r0, [r2, #4]!
 800db86:	3301      	adds	r3, #1
 800db88:	e7c5      	b.n	800db16 <__lshift+0x4a>
 800db8a:	3904      	subs	r1, #4
 800db8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db90:	f841 2f04 	str.w	r2, [r1, #4]!
 800db94:	459c      	cmp	ip, r3
 800db96:	d8f9      	bhi.n	800db8c <__lshift+0xc0>
 800db98:	e7ea      	b.n	800db70 <__lshift+0xa4>
 800db9a:	bf00      	nop
 800db9c:	0800f9b8 	.word	0x0800f9b8
 800dba0:	0800f9c9 	.word	0x0800f9c9

0800dba4 <__mcmp>:
 800dba4:	690a      	ldr	r2, [r1, #16]
 800dba6:	4603      	mov	r3, r0
 800dba8:	6900      	ldr	r0, [r0, #16]
 800dbaa:	1a80      	subs	r0, r0, r2
 800dbac:	b530      	push	{r4, r5, lr}
 800dbae:	d10e      	bne.n	800dbce <__mcmp+0x2a>
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	3114      	adds	r1, #20
 800dbb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbc4:	4295      	cmp	r5, r2
 800dbc6:	d003      	beq.n	800dbd0 <__mcmp+0x2c>
 800dbc8:	d205      	bcs.n	800dbd6 <__mcmp+0x32>
 800dbca:	f04f 30ff 	mov.w	r0, #4294967295
 800dbce:	bd30      	pop	{r4, r5, pc}
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	d3f3      	bcc.n	800dbbc <__mcmp+0x18>
 800dbd4:	e7fb      	b.n	800dbce <__mcmp+0x2a>
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	e7f9      	b.n	800dbce <__mcmp+0x2a>
	...

0800dbdc <__mdiff>:
 800dbdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	4689      	mov	r9, r1
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4648      	mov	r0, r9
 800dbe8:	4614      	mov	r4, r2
 800dbea:	f7ff ffdb 	bl	800dba4 <__mcmp>
 800dbee:	1e05      	subs	r5, r0, #0
 800dbf0:	d112      	bne.n	800dc18 <__mdiff+0x3c>
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f7ff fd63 	bl	800d6c0 <_Balloc>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	b928      	cbnz	r0, 800dc0a <__mdiff+0x2e>
 800dbfe:	4b3f      	ldr	r3, [pc, #252]	@ (800dcfc <__mdiff+0x120>)
 800dc00:	f240 2137 	movw	r1, #567	@ 0x237
 800dc04:	483e      	ldr	r0, [pc, #248]	@ (800dd00 <__mdiff+0x124>)
 800dc06:	f000 fcc9 	bl	800e59c <__assert_func>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc10:	4610      	mov	r0, r2
 800dc12:	b003      	add	sp, #12
 800dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc18:	bfbc      	itt	lt
 800dc1a:	464b      	movlt	r3, r9
 800dc1c:	46a1      	movlt	r9, r4
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc24:	bfba      	itte	lt
 800dc26:	461c      	movlt	r4, r3
 800dc28:	2501      	movlt	r5, #1
 800dc2a:	2500      	movge	r5, #0
 800dc2c:	f7ff fd48 	bl	800d6c0 <_Balloc>
 800dc30:	4602      	mov	r2, r0
 800dc32:	b918      	cbnz	r0, 800dc3c <__mdiff+0x60>
 800dc34:	4b31      	ldr	r3, [pc, #196]	@ (800dcfc <__mdiff+0x120>)
 800dc36:	f240 2145 	movw	r1, #581	@ 0x245
 800dc3a:	e7e3      	b.n	800dc04 <__mdiff+0x28>
 800dc3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc40:	6926      	ldr	r6, [r4, #16]
 800dc42:	60c5      	str	r5, [r0, #12]
 800dc44:	f109 0310 	add.w	r3, r9, #16
 800dc48:	f109 0514 	add.w	r5, r9, #20
 800dc4c:	f104 0e14 	add.w	lr, r4, #20
 800dc50:	f100 0b14 	add.w	fp, r0, #20
 800dc54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	46d9      	mov	r9, fp
 800dc60:	f04f 0c00 	mov.w	ip, #0
 800dc64:	9b01      	ldr	r3, [sp, #4]
 800dc66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	fa1f f38a 	uxth.w	r3, sl
 800dc74:	4619      	mov	r1, r3
 800dc76:	b283      	uxth	r3, r0
 800dc78:	1acb      	subs	r3, r1, r3
 800dc7a:	0c00      	lsrs	r0, r0, #16
 800dc7c:	4463      	add	r3, ip
 800dc7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc8c:	4576      	cmp	r6, lr
 800dc8e:	f849 3b04 	str.w	r3, [r9], #4
 800dc92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc96:	d8e5      	bhi.n	800dc64 <__mdiff+0x88>
 800dc98:	1b33      	subs	r3, r6, r4
 800dc9a:	3b15      	subs	r3, #21
 800dc9c:	f023 0303 	bic.w	r3, r3, #3
 800dca0:	3415      	adds	r4, #21
 800dca2:	3304      	adds	r3, #4
 800dca4:	42a6      	cmp	r6, r4
 800dca6:	bf38      	it	cc
 800dca8:	2304      	movcc	r3, #4
 800dcaa:	441d      	add	r5, r3
 800dcac:	445b      	add	r3, fp
 800dcae:	461e      	mov	r6, r3
 800dcb0:	462c      	mov	r4, r5
 800dcb2:	4544      	cmp	r4, r8
 800dcb4:	d30e      	bcc.n	800dcd4 <__mdiff+0xf8>
 800dcb6:	f108 0103 	add.w	r1, r8, #3
 800dcba:	1b49      	subs	r1, r1, r5
 800dcbc:	f021 0103 	bic.w	r1, r1, #3
 800dcc0:	3d03      	subs	r5, #3
 800dcc2:	45a8      	cmp	r8, r5
 800dcc4:	bf38      	it	cc
 800dcc6:	2100      	movcc	r1, #0
 800dcc8:	440b      	add	r3, r1
 800dcca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcce:	b191      	cbz	r1, 800dcf6 <__mdiff+0x11a>
 800dcd0:	6117      	str	r7, [r2, #16]
 800dcd2:	e79d      	b.n	800dc10 <__mdiff+0x34>
 800dcd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800dcd8:	46e6      	mov	lr, ip
 800dcda:	0c08      	lsrs	r0, r1, #16
 800dcdc:	fa1c fc81 	uxtah	ip, ip, r1
 800dce0:	4471      	add	r1, lr
 800dce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dce6:	b289      	uxth	r1, r1
 800dce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dcec:	f846 1b04 	str.w	r1, [r6], #4
 800dcf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcf4:	e7dd      	b.n	800dcb2 <__mdiff+0xd6>
 800dcf6:	3f01      	subs	r7, #1
 800dcf8:	e7e7      	b.n	800dcca <__mdiff+0xee>
 800dcfa:	bf00      	nop
 800dcfc:	0800f9b8 	.word	0x0800f9b8
 800dd00:	0800f9c9 	.word	0x0800f9c9

0800dd04 <__d2b>:
 800dd04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd08:	460f      	mov	r7, r1
 800dd0a:	2101      	movs	r1, #1
 800dd0c:	ec59 8b10 	vmov	r8, r9, d0
 800dd10:	4616      	mov	r6, r2
 800dd12:	f7ff fcd5 	bl	800d6c0 <_Balloc>
 800dd16:	4604      	mov	r4, r0
 800dd18:	b930      	cbnz	r0, 800dd28 <__d2b+0x24>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	4b23      	ldr	r3, [pc, #140]	@ (800ddac <__d2b+0xa8>)
 800dd1e:	4824      	ldr	r0, [pc, #144]	@ (800ddb0 <__d2b+0xac>)
 800dd20:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd24:	f000 fc3a 	bl	800e59c <__assert_func>
 800dd28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd30:	b10d      	cbz	r5, 800dd36 <__d2b+0x32>
 800dd32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	f1b8 0300 	subs.w	r3, r8, #0
 800dd3c:	d023      	beq.n	800dd86 <__d2b+0x82>
 800dd3e:	4668      	mov	r0, sp
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	f7ff fd84 	bl	800d84e <__lo0bits>
 800dd46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd4a:	b1d0      	cbz	r0, 800dd82 <__d2b+0x7e>
 800dd4c:	f1c0 0320 	rsb	r3, r0, #32
 800dd50:	fa02 f303 	lsl.w	r3, r2, r3
 800dd54:	430b      	orrs	r3, r1
 800dd56:	40c2      	lsrs	r2, r0
 800dd58:	6163      	str	r3, [r4, #20]
 800dd5a:	9201      	str	r2, [sp, #4]
 800dd5c:	9b01      	ldr	r3, [sp, #4]
 800dd5e:	61a3      	str	r3, [r4, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	bf0c      	ite	eq
 800dd64:	2201      	moveq	r2, #1
 800dd66:	2202      	movne	r2, #2
 800dd68:	6122      	str	r2, [r4, #16]
 800dd6a:	b1a5      	cbz	r5, 800dd96 <__d2b+0x92>
 800dd6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd70:	4405      	add	r5, r0
 800dd72:	603d      	str	r5, [r7, #0]
 800dd74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd78:	6030      	str	r0, [r6, #0]
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	b003      	add	sp, #12
 800dd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd82:	6161      	str	r1, [r4, #20]
 800dd84:	e7ea      	b.n	800dd5c <__d2b+0x58>
 800dd86:	a801      	add	r0, sp, #4
 800dd88:	f7ff fd61 	bl	800d84e <__lo0bits>
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	6163      	str	r3, [r4, #20]
 800dd90:	3020      	adds	r0, #32
 800dd92:	2201      	movs	r2, #1
 800dd94:	e7e8      	b.n	800dd68 <__d2b+0x64>
 800dd96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dd9e:	6038      	str	r0, [r7, #0]
 800dda0:	6918      	ldr	r0, [r3, #16]
 800dda2:	f7ff fd35 	bl	800d810 <__hi0bits>
 800dda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddaa:	e7e5      	b.n	800dd78 <__d2b+0x74>
 800ddac:	0800f9b8 	.word	0x0800f9b8
 800ddb0:	0800f9c9 	.word	0x0800f9c9

0800ddb4 <__ssputs_r>:
 800ddb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb8:	688e      	ldr	r6, [r1, #8]
 800ddba:	461f      	mov	r7, r3
 800ddbc:	42be      	cmp	r6, r7
 800ddbe:	680b      	ldr	r3, [r1, #0]
 800ddc0:	4682      	mov	sl, r0
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	4690      	mov	r8, r2
 800ddc6:	d82d      	bhi.n	800de24 <__ssputs_r+0x70>
 800ddc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddd0:	d026      	beq.n	800de20 <__ssputs_r+0x6c>
 800ddd2:	6965      	ldr	r5, [r4, #20]
 800ddd4:	6909      	ldr	r1, [r1, #16]
 800ddd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddda:	eba3 0901 	sub.w	r9, r3, r1
 800ddde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dde2:	1c7b      	adds	r3, r7, #1
 800dde4:	444b      	add	r3, r9
 800dde6:	106d      	asrs	r5, r5, #1
 800dde8:	429d      	cmp	r5, r3
 800ddea:	bf38      	it	cc
 800ddec:	461d      	movcc	r5, r3
 800ddee:	0553      	lsls	r3, r2, #21
 800ddf0:	d527      	bpl.n	800de42 <__ssputs_r+0x8e>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	f7ff fbd8 	bl	800d5a8 <_malloc_r>
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	b360      	cbz	r0, 800de56 <__ssputs_r+0xa2>
 800ddfc:	6921      	ldr	r1, [r4, #16]
 800ddfe:	464a      	mov	r2, r9
 800de00:	f7fe fcf5 	bl	800c7ee <memcpy>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	6126      	str	r6, [r4, #16]
 800de12:	6165      	str	r5, [r4, #20]
 800de14:	444e      	add	r6, r9
 800de16:	eba5 0509 	sub.w	r5, r5, r9
 800de1a:	6026      	str	r6, [r4, #0]
 800de1c:	60a5      	str	r5, [r4, #8]
 800de1e:	463e      	mov	r6, r7
 800de20:	42be      	cmp	r6, r7
 800de22:	d900      	bls.n	800de26 <__ssputs_r+0x72>
 800de24:	463e      	mov	r6, r7
 800de26:	6820      	ldr	r0, [r4, #0]
 800de28:	4632      	mov	r2, r6
 800de2a:	4641      	mov	r1, r8
 800de2c:	f000 fb6a 	bl	800e504 <memmove>
 800de30:	68a3      	ldr	r3, [r4, #8]
 800de32:	1b9b      	subs	r3, r3, r6
 800de34:	60a3      	str	r3, [r4, #8]
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	4433      	add	r3, r6
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	2000      	movs	r0, #0
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	462a      	mov	r2, r5
 800de44:	f000 fbee 	bl	800e624 <_realloc_r>
 800de48:	4606      	mov	r6, r0
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d1e0      	bne.n	800de10 <__ssputs_r+0x5c>
 800de4e:	6921      	ldr	r1, [r4, #16]
 800de50:	4650      	mov	r0, sl
 800de52:	f7ff fb35 	bl	800d4c0 <_free_r>
 800de56:	230c      	movs	r3, #12
 800de58:	f8ca 3000 	str.w	r3, [sl]
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	e7e9      	b.n	800de3e <__ssputs_r+0x8a>
	...

0800de6c <_svfiprintf_r>:
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	4698      	mov	r8, r3
 800de72:	898b      	ldrh	r3, [r1, #12]
 800de74:	061b      	lsls	r3, r3, #24
 800de76:	b09d      	sub	sp, #116	@ 0x74
 800de78:	4607      	mov	r7, r0
 800de7a:	460d      	mov	r5, r1
 800de7c:	4614      	mov	r4, r2
 800de7e:	d510      	bpl.n	800dea2 <_svfiprintf_r+0x36>
 800de80:	690b      	ldr	r3, [r1, #16]
 800de82:	b973      	cbnz	r3, 800dea2 <_svfiprintf_r+0x36>
 800de84:	2140      	movs	r1, #64	@ 0x40
 800de86:	f7ff fb8f 	bl	800d5a8 <_malloc_r>
 800de8a:	6028      	str	r0, [r5, #0]
 800de8c:	6128      	str	r0, [r5, #16]
 800de8e:	b930      	cbnz	r0, 800de9e <_svfiprintf_r+0x32>
 800de90:	230c      	movs	r3, #12
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	f04f 30ff 	mov.w	r0, #4294967295
 800de98:	b01d      	add	sp, #116	@ 0x74
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9e:	2340      	movs	r3, #64	@ 0x40
 800dea0:	616b      	str	r3, [r5, #20]
 800dea2:	2300      	movs	r3, #0
 800dea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea6:	2320      	movs	r3, #32
 800dea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deac:	f8cd 800c 	str.w	r8, [sp, #12]
 800deb0:	2330      	movs	r3, #48	@ 0x30
 800deb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e050 <_svfiprintf_r+0x1e4>
 800deb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deba:	f04f 0901 	mov.w	r9, #1
 800debe:	4623      	mov	r3, r4
 800dec0:	469a      	mov	sl, r3
 800dec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec6:	b10a      	cbz	r2, 800decc <_svfiprintf_r+0x60>
 800dec8:	2a25      	cmp	r2, #37	@ 0x25
 800deca:	d1f9      	bne.n	800dec0 <_svfiprintf_r+0x54>
 800decc:	ebba 0b04 	subs.w	fp, sl, r4
 800ded0:	d00b      	beq.n	800deea <_svfiprintf_r+0x7e>
 800ded2:	465b      	mov	r3, fp
 800ded4:	4622      	mov	r2, r4
 800ded6:	4629      	mov	r1, r5
 800ded8:	4638      	mov	r0, r7
 800deda:	f7ff ff6b 	bl	800ddb4 <__ssputs_r>
 800dede:	3001      	adds	r0, #1
 800dee0:	f000 80a7 	beq.w	800e032 <_svfiprintf_r+0x1c6>
 800dee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee6:	445a      	add	r2, fp
 800dee8:	9209      	str	r2, [sp, #36]	@ 0x24
 800deea:	f89a 3000 	ldrb.w	r3, [sl]
 800deee:	2b00      	cmp	r3, #0
 800def0:	f000 809f 	beq.w	800e032 <_svfiprintf_r+0x1c6>
 800def4:	2300      	movs	r3, #0
 800def6:	f04f 32ff 	mov.w	r2, #4294967295
 800defa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800defe:	f10a 0a01 	add.w	sl, sl, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	9307      	str	r3, [sp, #28]
 800df06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df0c:	4654      	mov	r4, sl
 800df0e:	2205      	movs	r2, #5
 800df10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df14:	484e      	ldr	r0, [pc, #312]	@ (800e050 <_svfiprintf_r+0x1e4>)
 800df16:	f7f2 f95b 	bl	80001d0 <memchr>
 800df1a:	9a04      	ldr	r2, [sp, #16]
 800df1c:	b9d8      	cbnz	r0, 800df56 <_svfiprintf_r+0xea>
 800df1e:	06d0      	lsls	r0, r2, #27
 800df20:	bf44      	itt	mi
 800df22:	2320      	movmi	r3, #32
 800df24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df28:	0711      	lsls	r1, r2, #28
 800df2a:	bf44      	itt	mi
 800df2c:	232b      	movmi	r3, #43	@ 0x2b
 800df2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df32:	f89a 3000 	ldrb.w	r3, [sl]
 800df36:	2b2a      	cmp	r3, #42	@ 0x2a
 800df38:	d015      	beq.n	800df66 <_svfiprintf_r+0xfa>
 800df3a:	9a07      	ldr	r2, [sp, #28]
 800df3c:	4654      	mov	r4, sl
 800df3e:	2000      	movs	r0, #0
 800df40:	f04f 0c0a 	mov.w	ip, #10
 800df44:	4621      	mov	r1, r4
 800df46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df4a:	3b30      	subs	r3, #48	@ 0x30
 800df4c:	2b09      	cmp	r3, #9
 800df4e:	d94b      	bls.n	800dfe8 <_svfiprintf_r+0x17c>
 800df50:	b1b0      	cbz	r0, 800df80 <_svfiprintf_r+0x114>
 800df52:	9207      	str	r2, [sp, #28]
 800df54:	e014      	b.n	800df80 <_svfiprintf_r+0x114>
 800df56:	eba0 0308 	sub.w	r3, r0, r8
 800df5a:	fa09 f303 	lsl.w	r3, r9, r3
 800df5e:	4313      	orrs	r3, r2
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	46a2      	mov	sl, r4
 800df64:	e7d2      	b.n	800df0c <_svfiprintf_r+0xa0>
 800df66:	9b03      	ldr	r3, [sp, #12]
 800df68:	1d19      	adds	r1, r3, #4
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	9103      	str	r1, [sp, #12]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	bfbb      	ittet	lt
 800df72:	425b      	neglt	r3, r3
 800df74:	f042 0202 	orrlt.w	r2, r2, #2
 800df78:	9307      	strge	r3, [sp, #28]
 800df7a:	9307      	strlt	r3, [sp, #28]
 800df7c:	bfb8      	it	lt
 800df7e:	9204      	strlt	r2, [sp, #16]
 800df80:	7823      	ldrb	r3, [r4, #0]
 800df82:	2b2e      	cmp	r3, #46	@ 0x2e
 800df84:	d10a      	bne.n	800df9c <_svfiprintf_r+0x130>
 800df86:	7863      	ldrb	r3, [r4, #1]
 800df88:	2b2a      	cmp	r3, #42	@ 0x2a
 800df8a:	d132      	bne.n	800dff2 <_svfiprintf_r+0x186>
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	1d1a      	adds	r2, r3, #4
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	9203      	str	r2, [sp, #12]
 800df94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df98:	3402      	adds	r4, #2
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e060 <_svfiprintf_r+0x1f4>
 800dfa0:	7821      	ldrb	r1, [r4, #0]
 800dfa2:	2203      	movs	r2, #3
 800dfa4:	4650      	mov	r0, sl
 800dfa6:	f7f2 f913 	bl	80001d0 <memchr>
 800dfaa:	b138      	cbz	r0, 800dfbc <_svfiprintf_r+0x150>
 800dfac:	9b04      	ldr	r3, [sp, #16]
 800dfae:	eba0 000a 	sub.w	r0, r0, sl
 800dfb2:	2240      	movs	r2, #64	@ 0x40
 800dfb4:	4082      	lsls	r2, r0
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	3401      	adds	r4, #1
 800dfba:	9304      	str	r3, [sp, #16]
 800dfbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfc0:	4824      	ldr	r0, [pc, #144]	@ (800e054 <_svfiprintf_r+0x1e8>)
 800dfc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfc6:	2206      	movs	r2, #6
 800dfc8:	f7f2 f902 	bl	80001d0 <memchr>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d036      	beq.n	800e03e <_svfiprintf_r+0x1d2>
 800dfd0:	4b21      	ldr	r3, [pc, #132]	@ (800e058 <_svfiprintf_r+0x1ec>)
 800dfd2:	bb1b      	cbnz	r3, 800e01c <_svfiprintf_r+0x1b0>
 800dfd4:	9b03      	ldr	r3, [sp, #12]
 800dfd6:	3307      	adds	r3, #7
 800dfd8:	f023 0307 	bic.w	r3, r3, #7
 800dfdc:	3308      	adds	r3, #8
 800dfde:	9303      	str	r3, [sp, #12]
 800dfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe2:	4433      	add	r3, r6
 800dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe6:	e76a      	b.n	800debe <_svfiprintf_r+0x52>
 800dfe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfec:	460c      	mov	r4, r1
 800dfee:	2001      	movs	r0, #1
 800dff0:	e7a8      	b.n	800df44 <_svfiprintf_r+0xd8>
 800dff2:	2300      	movs	r3, #0
 800dff4:	3401      	adds	r4, #1
 800dff6:	9305      	str	r3, [sp, #20]
 800dff8:	4619      	mov	r1, r3
 800dffa:	f04f 0c0a 	mov.w	ip, #10
 800dffe:	4620      	mov	r0, r4
 800e000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e004:	3a30      	subs	r2, #48	@ 0x30
 800e006:	2a09      	cmp	r2, #9
 800e008:	d903      	bls.n	800e012 <_svfiprintf_r+0x1a6>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d0c6      	beq.n	800df9c <_svfiprintf_r+0x130>
 800e00e:	9105      	str	r1, [sp, #20]
 800e010:	e7c4      	b.n	800df9c <_svfiprintf_r+0x130>
 800e012:	fb0c 2101 	mla	r1, ip, r1, r2
 800e016:	4604      	mov	r4, r0
 800e018:	2301      	movs	r3, #1
 800e01a:	e7f0      	b.n	800dffe <_svfiprintf_r+0x192>
 800e01c:	ab03      	add	r3, sp, #12
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	462a      	mov	r2, r5
 800e022:	4b0e      	ldr	r3, [pc, #56]	@ (800e05c <_svfiprintf_r+0x1f0>)
 800e024:	a904      	add	r1, sp, #16
 800e026:	4638      	mov	r0, r7
 800e028:	f7fd fd3c 	bl	800baa4 <_printf_float>
 800e02c:	1c42      	adds	r2, r0, #1
 800e02e:	4606      	mov	r6, r0
 800e030:	d1d6      	bne.n	800dfe0 <_svfiprintf_r+0x174>
 800e032:	89ab      	ldrh	r3, [r5, #12]
 800e034:	065b      	lsls	r3, r3, #25
 800e036:	f53f af2d 	bmi.w	800de94 <_svfiprintf_r+0x28>
 800e03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e03c:	e72c      	b.n	800de98 <_svfiprintf_r+0x2c>
 800e03e:	ab03      	add	r3, sp, #12
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	462a      	mov	r2, r5
 800e044:	4b05      	ldr	r3, [pc, #20]	@ (800e05c <_svfiprintf_r+0x1f0>)
 800e046:	a904      	add	r1, sp, #16
 800e048:	4638      	mov	r0, r7
 800e04a:	f7fd ffc3 	bl	800bfd4 <_printf_i>
 800e04e:	e7ed      	b.n	800e02c <_svfiprintf_r+0x1c0>
 800e050:	0800fa22 	.word	0x0800fa22
 800e054:	0800fa2c 	.word	0x0800fa2c
 800e058:	0800baa5 	.word	0x0800baa5
 800e05c:	0800ddb5 	.word	0x0800ddb5
 800e060:	0800fa28 	.word	0x0800fa28

0800e064 <__sfputc_r>:
 800e064:	6893      	ldr	r3, [r2, #8]
 800e066:	3b01      	subs	r3, #1
 800e068:	2b00      	cmp	r3, #0
 800e06a:	b410      	push	{r4}
 800e06c:	6093      	str	r3, [r2, #8]
 800e06e:	da08      	bge.n	800e082 <__sfputc_r+0x1e>
 800e070:	6994      	ldr	r4, [r2, #24]
 800e072:	42a3      	cmp	r3, r4
 800e074:	db01      	blt.n	800e07a <__sfputc_r+0x16>
 800e076:	290a      	cmp	r1, #10
 800e078:	d103      	bne.n	800e082 <__sfputc_r+0x1e>
 800e07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e07e:	f7fe ba82 	b.w	800c586 <__swbuf_r>
 800e082:	6813      	ldr	r3, [r2, #0]
 800e084:	1c58      	adds	r0, r3, #1
 800e086:	6010      	str	r0, [r2, #0]
 800e088:	7019      	strb	r1, [r3, #0]
 800e08a:	4608      	mov	r0, r1
 800e08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <__sfputs_r>:
 800e092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e094:	4606      	mov	r6, r0
 800e096:	460f      	mov	r7, r1
 800e098:	4614      	mov	r4, r2
 800e09a:	18d5      	adds	r5, r2, r3
 800e09c:	42ac      	cmp	r4, r5
 800e09e:	d101      	bne.n	800e0a4 <__sfputs_r+0x12>
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e007      	b.n	800e0b4 <__sfputs_r+0x22>
 800e0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a8:	463a      	mov	r2, r7
 800e0aa:	4630      	mov	r0, r6
 800e0ac:	f7ff ffda 	bl	800e064 <__sfputc_r>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d1f3      	bne.n	800e09c <__sfputs_r+0xa>
 800e0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0b8 <_vfiprintf_r>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	460d      	mov	r5, r1
 800e0be:	b09d      	sub	sp, #116	@ 0x74
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	4698      	mov	r8, r3
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	b118      	cbz	r0, 800e0d0 <_vfiprintf_r+0x18>
 800e0c8:	6a03      	ldr	r3, [r0, #32]
 800e0ca:	b90b      	cbnz	r3, 800e0d0 <_vfiprintf_r+0x18>
 800e0cc:	f7fe f92c 	bl	800c328 <__sinit>
 800e0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0d2:	07d9      	lsls	r1, r3, #31
 800e0d4:	d405      	bmi.n	800e0e2 <_vfiprintf_r+0x2a>
 800e0d6:	89ab      	ldrh	r3, [r5, #12]
 800e0d8:	059a      	lsls	r2, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_vfiprintf_r+0x2a>
 800e0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0de:	f7fe fb84 	bl	800c7ea <__retarget_lock_acquire_recursive>
 800e0e2:	89ab      	ldrh	r3, [r5, #12]
 800e0e4:	071b      	lsls	r3, r3, #28
 800e0e6:	d501      	bpl.n	800e0ec <_vfiprintf_r+0x34>
 800e0e8:	692b      	ldr	r3, [r5, #16]
 800e0ea:	b99b      	cbnz	r3, 800e114 <_vfiprintf_r+0x5c>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7fe fa88 	bl	800c604 <__swsetup_r>
 800e0f4:	b170      	cbz	r0, 800e114 <_vfiprintf_r+0x5c>
 800e0f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0f8:	07dc      	lsls	r4, r3, #31
 800e0fa:	d504      	bpl.n	800e106 <_vfiprintf_r+0x4e>
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	b01d      	add	sp, #116	@ 0x74
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e106:	89ab      	ldrh	r3, [r5, #12]
 800e108:	0598      	lsls	r0, r3, #22
 800e10a:	d4f7      	bmi.n	800e0fc <_vfiprintf_r+0x44>
 800e10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e10e:	f7fe fb6d 	bl	800c7ec <__retarget_lock_release_recursive>
 800e112:	e7f3      	b.n	800e0fc <_vfiprintf_r+0x44>
 800e114:	2300      	movs	r3, #0
 800e116:	9309      	str	r3, [sp, #36]	@ 0x24
 800e118:	2320      	movs	r3, #32
 800e11a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e11e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e122:	2330      	movs	r3, #48	@ 0x30
 800e124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2d4 <_vfiprintf_r+0x21c>
 800e128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e12c:	f04f 0901 	mov.w	r9, #1
 800e130:	4623      	mov	r3, r4
 800e132:	469a      	mov	sl, r3
 800e134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e138:	b10a      	cbz	r2, 800e13e <_vfiprintf_r+0x86>
 800e13a:	2a25      	cmp	r2, #37	@ 0x25
 800e13c:	d1f9      	bne.n	800e132 <_vfiprintf_r+0x7a>
 800e13e:	ebba 0b04 	subs.w	fp, sl, r4
 800e142:	d00b      	beq.n	800e15c <_vfiprintf_r+0xa4>
 800e144:	465b      	mov	r3, fp
 800e146:	4622      	mov	r2, r4
 800e148:	4629      	mov	r1, r5
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7ff ffa1 	bl	800e092 <__sfputs_r>
 800e150:	3001      	adds	r0, #1
 800e152:	f000 80a7 	beq.w	800e2a4 <_vfiprintf_r+0x1ec>
 800e156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e158:	445a      	add	r2, fp
 800e15a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e15c:	f89a 3000 	ldrb.w	r3, [sl]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 809f 	beq.w	800e2a4 <_vfiprintf_r+0x1ec>
 800e166:	2300      	movs	r3, #0
 800e168:	f04f 32ff 	mov.w	r2, #4294967295
 800e16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e170:	f10a 0a01 	add.w	sl, sl, #1
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	9307      	str	r3, [sp, #28]
 800e178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e17c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e17e:	4654      	mov	r4, sl
 800e180:	2205      	movs	r2, #5
 800e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e186:	4853      	ldr	r0, [pc, #332]	@ (800e2d4 <_vfiprintf_r+0x21c>)
 800e188:	f7f2 f822 	bl	80001d0 <memchr>
 800e18c:	9a04      	ldr	r2, [sp, #16]
 800e18e:	b9d8      	cbnz	r0, 800e1c8 <_vfiprintf_r+0x110>
 800e190:	06d1      	lsls	r1, r2, #27
 800e192:	bf44      	itt	mi
 800e194:	2320      	movmi	r3, #32
 800e196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e19a:	0713      	lsls	r3, r2, #28
 800e19c:	bf44      	itt	mi
 800e19e:	232b      	movmi	r3, #43	@ 0x2b
 800e1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1aa:	d015      	beq.n	800e1d8 <_vfiprintf_r+0x120>
 800e1ac:	9a07      	ldr	r2, [sp, #28]
 800e1ae:	4654      	mov	r4, sl
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	f04f 0c0a 	mov.w	ip, #10
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1bc:	3b30      	subs	r3, #48	@ 0x30
 800e1be:	2b09      	cmp	r3, #9
 800e1c0:	d94b      	bls.n	800e25a <_vfiprintf_r+0x1a2>
 800e1c2:	b1b0      	cbz	r0, 800e1f2 <_vfiprintf_r+0x13a>
 800e1c4:	9207      	str	r2, [sp, #28]
 800e1c6:	e014      	b.n	800e1f2 <_vfiprintf_r+0x13a>
 800e1c8:	eba0 0308 	sub.w	r3, r0, r8
 800e1cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	9304      	str	r3, [sp, #16]
 800e1d4:	46a2      	mov	sl, r4
 800e1d6:	e7d2      	b.n	800e17e <_vfiprintf_r+0xc6>
 800e1d8:	9b03      	ldr	r3, [sp, #12]
 800e1da:	1d19      	adds	r1, r3, #4
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	9103      	str	r1, [sp, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	bfbb      	ittet	lt
 800e1e4:	425b      	neglt	r3, r3
 800e1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ea:	9307      	strge	r3, [sp, #28]
 800e1ec:	9307      	strlt	r3, [sp, #28]
 800e1ee:	bfb8      	it	lt
 800e1f0:	9204      	strlt	r2, [sp, #16]
 800e1f2:	7823      	ldrb	r3, [r4, #0]
 800e1f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1f6:	d10a      	bne.n	800e20e <_vfiprintf_r+0x156>
 800e1f8:	7863      	ldrb	r3, [r4, #1]
 800e1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fc:	d132      	bne.n	800e264 <_vfiprintf_r+0x1ac>
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	1d1a      	adds	r2, r3, #4
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	9203      	str	r2, [sp, #12]
 800e206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e20a:	3402      	adds	r4, #2
 800e20c:	9305      	str	r3, [sp, #20]
 800e20e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2e4 <_vfiprintf_r+0x22c>
 800e212:	7821      	ldrb	r1, [r4, #0]
 800e214:	2203      	movs	r2, #3
 800e216:	4650      	mov	r0, sl
 800e218:	f7f1 ffda 	bl	80001d0 <memchr>
 800e21c:	b138      	cbz	r0, 800e22e <_vfiprintf_r+0x176>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	eba0 000a 	sub.w	r0, r0, sl
 800e224:	2240      	movs	r2, #64	@ 0x40
 800e226:	4082      	lsls	r2, r0
 800e228:	4313      	orrs	r3, r2
 800e22a:	3401      	adds	r4, #1
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e232:	4829      	ldr	r0, [pc, #164]	@ (800e2d8 <_vfiprintf_r+0x220>)
 800e234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e238:	2206      	movs	r2, #6
 800e23a:	f7f1 ffc9 	bl	80001d0 <memchr>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d03f      	beq.n	800e2c2 <_vfiprintf_r+0x20a>
 800e242:	4b26      	ldr	r3, [pc, #152]	@ (800e2dc <_vfiprintf_r+0x224>)
 800e244:	bb1b      	cbnz	r3, 800e28e <_vfiprintf_r+0x1d6>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	3307      	adds	r3, #7
 800e24a:	f023 0307 	bic.w	r3, r3, #7
 800e24e:	3308      	adds	r3, #8
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e254:	443b      	add	r3, r7
 800e256:	9309      	str	r3, [sp, #36]	@ 0x24
 800e258:	e76a      	b.n	800e130 <_vfiprintf_r+0x78>
 800e25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25e:	460c      	mov	r4, r1
 800e260:	2001      	movs	r0, #1
 800e262:	e7a8      	b.n	800e1b6 <_vfiprintf_r+0xfe>
 800e264:	2300      	movs	r3, #0
 800e266:	3401      	adds	r4, #1
 800e268:	9305      	str	r3, [sp, #20]
 800e26a:	4619      	mov	r1, r3
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4620      	mov	r0, r4
 800e272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e276:	3a30      	subs	r2, #48	@ 0x30
 800e278:	2a09      	cmp	r2, #9
 800e27a:	d903      	bls.n	800e284 <_vfiprintf_r+0x1cc>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c6      	beq.n	800e20e <_vfiprintf_r+0x156>
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	e7c4      	b.n	800e20e <_vfiprintf_r+0x156>
 800e284:	fb0c 2101 	mla	r1, ip, r1, r2
 800e288:	4604      	mov	r4, r0
 800e28a:	2301      	movs	r3, #1
 800e28c:	e7f0      	b.n	800e270 <_vfiprintf_r+0x1b8>
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462a      	mov	r2, r5
 800e294:	4b12      	ldr	r3, [pc, #72]	@ (800e2e0 <_vfiprintf_r+0x228>)
 800e296:	a904      	add	r1, sp, #16
 800e298:	4630      	mov	r0, r6
 800e29a:	f7fd fc03 	bl	800baa4 <_printf_float>
 800e29e:	4607      	mov	r7, r0
 800e2a0:	1c78      	adds	r0, r7, #1
 800e2a2:	d1d6      	bne.n	800e252 <_vfiprintf_r+0x19a>
 800e2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2a6:	07d9      	lsls	r1, r3, #31
 800e2a8:	d405      	bmi.n	800e2b6 <_vfiprintf_r+0x1fe>
 800e2aa:	89ab      	ldrh	r3, [r5, #12]
 800e2ac:	059a      	lsls	r2, r3, #22
 800e2ae:	d402      	bmi.n	800e2b6 <_vfiprintf_r+0x1fe>
 800e2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2b2:	f7fe fa9b 	bl	800c7ec <__retarget_lock_release_recursive>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	065b      	lsls	r3, r3, #25
 800e2ba:	f53f af1f 	bmi.w	800e0fc <_vfiprintf_r+0x44>
 800e2be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2c0:	e71e      	b.n	800e100 <_vfiprintf_r+0x48>
 800e2c2:	ab03      	add	r3, sp, #12
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	4b05      	ldr	r3, [pc, #20]	@ (800e2e0 <_vfiprintf_r+0x228>)
 800e2ca:	a904      	add	r1, sp, #16
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f7fd fe81 	bl	800bfd4 <_printf_i>
 800e2d2:	e7e4      	b.n	800e29e <_vfiprintf_r+0x1e6>
 800e2d4:	0800fa22 	.word	0x0800fa22
 800e2d8:	0800fa2c 	.word	0x0800fa2c
 800e2dc:	0800baa5 	.word	0x0800baa5
 800e2e0:	0800e093 	.word	0x0800e093
 800e2e4:	0800fa28 	.word	0x0800fa28

0800e2e8 <__sflush_r>:
 800e2e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f0:	0716      	lsls	r6, r2, #28
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	460c      	mov	r4, r1
 800e2f6:	d454      	bmi.n	800e3a2 <__sflush_r+0xba>
 800e2f8:	684b      	ldr	r3, [r1, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	dc02      	bgt.n	800e304 <__sflush_r+0x1c>
 800e2fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd48      	ble.n	800e396 <__sflush_r+0xae>
 800e304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e306:	2e00      	cmp	r6, #0
 800e308:	d045      	beq.n	800e396 <__sflush_r+0xae>
 800e30a:	2300      	movs	r3, #0
 800e30c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e310:	682f      	ldr	r7, [r5, #0]
 800e312:	6a21      	ldr	r1, [r4, #32]
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	d030      	beq.n	800e37a <__sflush_r+0x92>
 800e318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e31a:	89a3      	ldrh	r3, [r4, #12]
 800e31c:	0759      	lsls	r1, r3, #29
 800e31e:	d505      	bpl.n	800e32c <__sflush_r+0x44>
 800e320:	6863      	ldr	r3, [r4, #4]
 800e322:	1ad2      	subs	r2, r2, r3
 800e324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e326:	b10b      	cbz	r3, 800e32c <__sflush_r+0x44>
 800e328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e32a:	1ad2      	subs	r2, r2, r3
 800e32c:	2300      	movs	r3, #0
 800e32e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e330:	6a21      	ldr	r1, [r4, #32]
 800e332:	4628      	mov	r0, r5
 800e334:	47b0      	blx	r6
 800e336:	1c43      	adds	r3, r0, #1
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	d106      	bne.n	800e34a <__sflush_r+0x62>
 800e33c:	6829      	ldr	r1, [r5, #0]
 800e33e:	291d      	cmp	r1, #29
 800e340:	d82b      	bhi.n	800e39a <__sflush_r+0xb2>
 800e342:	4a2a      	ldr	r2, [pc, #168]	@ (800e3ec <__sflush_r+0x104>)
 800e344:	40ca      	lsrs	r2, r1
 800e346:	07d6      	lsls	r6, r2, #31
 800e348:	d527      	bpl.n	800e39a <__sflush_r+0xb2>
 800e34a:	2200      	movs	r2, #0
 800e34c:	6062      	str	r2, [r4, #4]
 800e34e:	04d9      	lsls	r1, r3, #19
 800e350:	6922      	ldr	r2, [r4, #16]
 800e352:	6022      	str	r2, [r4, #0]
 800e354:	d504      	bpl.n	800e360 <__sflush_r+0x78>
 800e356:	1c42      	adds	r2, r0, #1
 800e358:	d101      	bne.n	800e35e <__sflush_r+0x76>
 800e35a:	682b      	ldr	r3, [r5, #0]
 800e35c:	b903      	cbnz	r3, 800e360 <__sflush_r+0x78>
 800e35e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e362:	602f      	str	r7, [r5, #0]
 800e364:	b1b9      	cbz	r1, 800e396 <__sflush_r+0xae>
 800e366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e36a:	4299      	cmp	r1, r3
 800e36c:	d002      	beq.n	800e374 <__sflush_r+0x8c>
 800e36e:	4628      	mov	r0, r5
 800e370:	f7ff f8a6 	bl	800d4c0 <_free_r>
 800e374:	2300      	movs	r3, #0
 800e376:	6363      	str	r3, [r4, #52]	@ 0x34
 800e378:	e00d      	b.n	800e396 <__sflush_r+0xae>
 800e37a:	2301      	movs	r3, #1
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b0      	blx	r6
 800e380:	4602      	mov	r2, r0
 800e382:	1c50      	adds	r0, r2, #1
 800e384:	d1c9      	bne.n	800e31a <__sflush_r+0x32>
 800e386:	682b      	ldr	r3, [r5, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0c6      	beq.n	800e31a <__sflush_r+0x32>
 800e38c:	2b1d      	cmp	r3, #29
 800e38e:	d001      	beq.n	800e394 <__sflush_r+0xac>
 800e390:	2b16      	cmp	r3, #22
 800e392:	d11e      	bne.n	800e3d2 <__sflush_r+0xea>
 800e394:	602f      	str	r7, [r5, #0]
 800e396:	2000      	movs	r0, #0
 800e398:	e022      	b.n	800e3e0 <__sflush_r+0xf8>
 800e39a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e39e:	b21b      	sxth	r3, r3
 800e3a0:	e01b      	b.n	800e3da <__sflush_r+0xf2>
 800e3a2:	690f      	ldr	r7, [r1, #16]
 800e3a4:	2f00      	cmp	r7, #0
 800e3a6:	d0f6      	beq.n	800e396 <__sflush_r+0xae>
 800e3a8:	0793      	lsls	r3, r2, #30
 800e3aa:	680e      	ldr	r6, [r1, #0]
 800e3ac:	bf08      	it	eq
 800e3ae:	694b      	ldreq	r3, [r1, #20]
 800e3b0:	600f      	str	r7, [r1, #0]
 800e3b2:	bf18      	it	ne
 800e3b4:	2300      	movne	r3, #0
 800e3b6:	eba6 0807 	sub.w	r8, r6, r7
 800e3ba:	608b      	str	r3, [r1, #8]
 800e3bc:	f1b8 0f00 	cmp.w	r8, #0
 800e3c0:	dde9      	ble.n	800e396 <__sflush_r+0xae>
 800e3c2:	6a21      	ldr	r1, [r4, #32]
 800e3c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3c6:	4643      	mov	r3, r8
 800e3c8:	463a      	mov	r2, r7
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	47b0      	blx	r6
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	dc08      	bgt.n	800e3e4 <__sflush_r+0xfc>
 800e3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3da:	81a3      	strh	r3, [r4, #12]
 800e3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e4:	4407      	add	r7, r0
 800e3e6:	eba8 0800 	sub.w	r8, r8, r0
 800e3ea:	e7e7      	b.n	800e3bc <__sflush_r+0xd4>
 800e3ec:	20400001 	.word	0x20400001

0800e3f0 <_fflush_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	690b      	ldr	r3, [r1, #16]
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	b913      	cbnz	r3, 800e400 <_fflush_r+0x10>
 800e3fa:	2500      	movs	r5, #0
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	b118      	cbz	r0, 800e40a <_fflush_r+0x1a>
 800e402:	6a03      	ldr	r3, [r0, #32]
 800e404:	b90b      	cbnz	r3, 800e40a <_fflush_r+0x1a>
 800e406:	f7fd ff8f 	bl	800c328 <__sinit>
 800e40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0f3      	beq.n	800e3fa <_fflush_r+0xa>
 800e412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e414:	07d0      	lsls	r0, r2, #31
 800e416:	d404      	bmi.n	800e422 <_fflush_r+0x32>
 800e418:	0599      	lsls	r1, r3, #22
 800e41a:	d402      	bmi.n	800e422 <_fflush_r+0x32>
 800e41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e41e:	f7fe f9e4 	bl	800c7ea <__retarget_lock_acquire_recursive>
 800e422:	4628      	mov	r0, r5
 800e424:	4621      	mov	r1, r4
 800e426:	f7ff ff5f 	bl	800e2e8 <__sflush_r>
 800e42a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e42c:	07da      	lsls	r2, r3, #31
 800e42e:	4605      	mov	r5, r0
 800e430:	d4e4      	bmi.n	800e3fc <_fflush_r+0xc>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	059b      	lsls	r3, r3, #22
 800e436:	d4e1      	bmi.n	800e3fc <_fflush_r+0xc>
 800e438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e43a:	f7fe f9d7 	bl	800c7ec <__retarget_lock_release_recursive>
 800e43e:	e7dd      	b.n	800e3fc <_fflush_r+0xc>

0800e440 <__swhatbuf_r>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	460c      	mov	r4, r1
 800e444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e448:	2900      	cmp	r1, #0
 800e44a:	b096      	sub	sp, #88	@ 0x58
 800e44c:	4615      	mov	r5, r2
 800e44e:	461e      	mov	r6, r3
 800e450:	da0d      	bge.n	800e46e <__swhatbuf_r+0x2e>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e458:	f04f 0100 	mov.w	r1, #0
 800e45c:	bf14      	ite	ne
 800e45e:	2340      	movne	r3, #64	@ 0x40
 800e460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e464:	2000      	movs	r0, #0
 800e466:	6031      	str	r1, [r6, #0]
 800e468:	602b      	str	r3, [r5, #0]
 800e46a:	b016      	add	sp, #88	@ 0x58
 800e46c:	bd70      	pop	{r4, r5, r6, pc}
 800e46e:	466a      	mov	r2, sp
 800e470:	f000 f862 	bl	800e538 <_fstat_r>
 800e474:	2800      	cmp	r0, #0
 800e476:	dbec      	blt.n	800e452 <__swhatbuf_r+0x12>
 800e478:	9901      	ldr	r1, [sp, #4]
 800e47a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e47e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e482:	4259      	negs	r1, r3
 800e484:	4159      	adcs	r1, r3
 800e486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e48a:	e7eb      	b.n	800e464 <__swhatbuf_r+0x24>

0800e48c <__smakebuf_r>:
 800e48c:	898b      	ldrh	r3, [r1, #12]
 800e48e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e490:	079d      	lsls	r5, r3, #30
 800e492:	4606      	mov	r6, r0
 800e494:	460c      	mov	r4, r1
 800e496:	d507      	bpl.n	800e4a8 <__smakebuf_r+0x1c>
 800e498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	6123      	str	r3, [r4, #16]
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	6163      	str	r3, [r4, #20]
 800e4a4:	b003      	add	sp, #12
 800e4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a8:	ab01      	add	r3, sp, #4
 800e4aa:	466a      	mov	r2, sp
 800e4ac:	f7ff ffc8 	bl	800e440 <__swhatbuf_r>
 800e4b0:	9f00      	ldr	r7, [sp, #0]
 800e4b2:	4605      	mov	r5, r0
 800e4b4:	4639      	mov	r1, r7
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff f876 	bl	800d5a8 <_malloc_r>
 800e4bc:	b948      	cbnz	r0, 800e4d2 <__smakebuf_r+0x46>
 800e4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c2:	059a      	lsls	r2, r3, #22
 800e4c4:	d4ee      	bmi.n	800e4a4 <__smakebuf_r+0x18>
 800e4c6:	f023 0303 	bic.w	r3, r3, #3
 800e4ca:	f043 0302 	orr.w	r3, r3, #2
 800e4ce:	81a3      	strh	r3, [r4, #12]
 800e4d0:	e7e2      	b.n	800e498 <__smakebuf_r+0xc>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	6020      	str	r0, [r4, #0]
 800e4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4da:	81a3      	strh	r3, [r4, #12]
 800e4dc:	9b01      	ldr	r3, [sp, #4]
 800e4de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4e2:	b15b      	cbz	r3, 800e4fc <__smakebuf_r+0x70>
 800e4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f000 f837 	bl	800e55c <_isatty_r>
 800e4ee:	b128      	cbz	r0, 800e4fc <__smakebuf_r+0x70>
 800e4f0:	89a3      	ldrh	r3, [r4, #12]
 800e4f2:	f023 0303 	bic.w	r3, r3, #3
 800e4f6:	f043 0301 	orr.w	r3, r3, #1
 800e4fa:	81a3      	strh	r3, [r4, #12]
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	431d      	orrs	r5, r3
 800e500:	81a5      	strh	r5, [r4, #12]
 800e502:	e7cf      	b.n	800e4a4 <__smakebuf_r+0x18>

0800e504 <memmove>:
 800e504:	4288      	cmp	r0, r1
 800e506:	b510      	push	{r4, lr}
 800e508:	eb01 0402 	add.w	r4, r1, r2
 800e50c:	d902      	bls.n	800e514 <memmove+0x10>
 800e50e:	4284      	cmp	r4, r0
 800e510:	4623      	mov	r3, r4
 800e512:	d807      	bhi.n	800e524 <memmove+0x20>
 800e514:	1e43      	subs	r3, r0, #1
 800e516:	42a1      	cmp	r1, r4
 800e518:	d008      	beq.n	800e52c <memmove+0x28>
 800e51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e522:	e7f8      	b.n	800e516 <memmove+0x12>
 800e524:	4402      	add	r2, r0
 800e526:	4601      	mov	r1, r0
 800e528:	428a      	cmp	r2, r1
 800e52a:	d100      	bne.n	800e52e <memmove+0x2a>
 800e52c:	bd10      	pop	{r4, pc}
 800e52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e536:	e7f7      	b.n	800e528 <memmove+0x24>

0800e538 <_fstat_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d07      	ldr	r5, [pc, #28]	@ (800e558 <_fstat_r+0x20>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	4611      	mov	r1, r2
 800e544:	602b      	str	r3, [r5, #0]
 800e546:	f7f6 f8e5 	bl	8004714 <_fstat>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	d102      	bne.n	800e554 <_fstat_r+0x1c>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	b103      	cbz	r3, 800e554 <_fstat_r+0x1c>
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	20001964 	.word	0x20001964

0800e55c <_isatty_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	4d06      	ldr	r5, [pc, #24]	@ (800e578 <_isatty_r+0x1c>)
 800e560:	2300      	movs	r3, #0
 800e562:	4604      	mov	r4, r0
 800e564:	4608      	mov	r0, r1
 800e566:	602b      	str	r3, [r5, #0]
 800e568:	f7f6 f8e4 	bl	8004734 <_isatty>
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	d102      	bne.n	800e576 <_isatty_r+0x1a>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	b103      	cbz	r3, 800e576 <_isatty_r+0x1a>
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	bd38      	pop	{r3, r4, r5, pc}
 800e578:	20001964 	.word	0x20001964

0800e57c <_sbrk_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4d06      	ldr	r5, [pc, #24]	@ (800e598 <_sbrk_r+0x1c>)
 800e580:	2300      	movs	r3, #0
 800e582:	4604      	mov	r4, r0
 800e584:	4608      	mov	r0, r1
 800e586:	602b      	str	r3, [r5, #0]
 800e588:	f7f6 f8ec 	bl	8004764 <_sbrk>
 800e58c:	1c43      	adds	r3, r0, #1
 800e58e:	d102      	bne.n	800e596 <_sbrk_r+0x1a>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	b103      	cbz	r3, 800e596 <_sbrk_r+0x1a>
 800e594:	6023      	str	r3, [r4, #0]
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	20001964 	.word	0x20001964

0800e59c <__assert_func>:
 800e59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e59e:	4614      	mov	r4, r2
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	4b09      	ldr	r3, [pc, #36]	@ (800e5c8 <__assert_func+0x2c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	68d8      	ldr	r0, [r3, #12]
 800e5aa:	b14c      	cbz	r4, 800e5c0 <__assert_func+0x24>
 800e5ac:	4b07      	ldr	r3, [pc, #28]	@ (800e5cc <__assert_func+0x30>)
 800e5ae:	9100      	str	r1, [sp, #0]
 800e5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5b4:	4906      	ldr	r1, [pc, #24]	@ (800e5d0 <__assert_func+0x34>)
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f000 f870 	bl	800e69c <fiprintf>
 800e5bc:	f000 f880 	bl	800e6c0 <abort>
 800e5c0:	4b04      	ldr	r3, [pc, #16]	@ (800e5d4 <__assert_func+0x38>)
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	e7f3      	b.n	800e5ae <__assert_func+0x12>
 800e5c6:	bf00      	nop
 800e5c8:	20000148 	.word	0x20000148
 800e5cc:	0800fa3d 	.word	0x0800fa3d
 800e5d0:	0800fa4a 	.word	0x0800fa4a
 800e5d4:	0800fa78 	.word	0x0800fa78

0800e5d8 <_calloc_r>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	fba1 5402 	umull	r5, r4, r1, r2
 800e5de:	b934      	cbnz	r4, 800e5ee <_calloc_r+0x16>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	f7fe ffe1 	bl	800d5a8 <_malloc_r>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	b928      	cbnz	r0, 800e5f6 <_calloc_r+0x1e>
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	bd70      	pop	{r4, r5, r6, pc}
 800e5ee:	220c      	movs	r2, #12
 800e5f0:	6002      	str	r2, [r0, #0]
 800e5f2:	2600      	movs	r6, #0
 800e5f4:	e7f9      	b.n	800e5ea <_calloc_r+0x12>
 800e5f6:	462a      	mov	r2, r5
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	f7fe f869 	bl	800c6d0 <memset>
 800e5fe:	e7f4      	b.n	800e5ea <_calloc_r+0x12>

0800e600 <__ascii_mbtowc>:
 800e600:	b082      	sub	sp, #8
 800e602:	b901      	cbnz	r1, 800e606 <__ascii_mbtowc+0x6>
 800e604:	a901      	add	r1, sp, #4
 800e606:	b142      	cbz	r2, 800e61a <__ascii_mbtowc+0x1a>
 800e608:	b14b      	cbz	r3, 800e61e <__ascii_mbtowc+0x1e>
 800e60a:	7813      	ldrb	r3, [r2, #0]
 800e60c:	600b      	str	r3, [r1, #0]
 800e60e:	7812      	ldrb	r2, [r2, #0]
 800e610:	1e10      	subs	r0, r2, #0
 800e612:	bf18      	it	ne
 800e614:	2001      	movne	r0, #1
 800e616:	b002      	add	sp, #8
 800e618:	4770      	bx	lr
 800e61a:	4610      	mov	r0, r2
 800e61c:	e7fb      	b.n	800e616 <__ascii_mbtowc+0x16>
 800e61e:	f06f 0001 	mvn.w	r0, #1
 800e622:	e7f8      	b.n	800e616 <__ascii_mbtowc+0x16>

0800e624 <_realloc_r>:
 800e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e628:	4607      	mov	r7, r0
 800e62a:	4614      	mov	r4, r2
 800e62c:	460d      	mov	r5, r1
 800e62e:	b921      	cbnz	r1, 800e63a <_realloc_r+0x16>
 800e630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	4611      	mov	r1, r2
 800e636:	f7fe bfb7 	b.w	800d5a8 <_malloc_r>
 800e63a:	b92a      	cbnz	r2, 800e648 <_realloc_r+0x24>
 800e63c:	f7fe ff40 	bl	800d4c0 <_free_r>
 800e640:	4625      	mov	r5, r4
 800e642:	4628      	mov	r0, r5
 800e644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e648:	f000 f841 	bl	800e6ce <_malloc_usable_size_r>
 800e64c:	4284      	cmp	r4, r0
 800e64e:	4606      	mov	r6, r0
 800e650:	d802      	bhi.n	800e658 <_realloc_r+0x34>
 800e652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e656:	d8f4      	bhi.n	800e642 <_realloc_r+0x1e>
 800e658:	4621      	mov	r1, r4
 800e65a:	4638      	mov	r0, r7
 800e65c:	f7fe ffa4 	bl	800d5a8 <_malloc_r>
 800e660:	4680      	mov	r8, r0
 800e662:	b908      	cbnz	r0, 800e668 <_realloc_r+0x44>
 800e664:	4645      	mov	r5, r8
 800e666:	e7ec      	b.n	800e642 <_realloc_r+0x1e>
 800e668:	42b4      	cmp	r4, r6
 800e66a:	4622      	mov	r2, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	bf28      	it	cs
 800e670:	4632      	movcs	r2, r6
 800e672:	f7fe f8bc 	bl	800c7ee <memcpy>
 800e676:	4629      	mov	r1, r5
 800e678:	4638      	mov	r0, r7
 800e67a:	f7fe ff21 	bl	800d4c0 <_free_r>
 800e67e:	e7f1      	b.n	800e664 <_realloc_r+0x40>

0800e680 <__ascii_wctomb>:
 800e680:	4603      	mov	r3, r0
 800e682:	4608      	mov	r0, r1
 800e684:	b141      	cbz	r1, 800e698 <__ascii_wctomb+0x18>
 800e686:	2aff      	cmp	r2, #255	@ 0xff
 800e688:	d904      	bls.n	800e694 <__ascii_wctomb+0x14>
 800e68a:	228a      	movs	r2, #138	@ 0x8a
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	f04f 30ff 	mov.w	r0, #4294967295
 800e692:	4770      	bx	lr
 800e694:	700a      	strb	r2, [r1, #0]
 800e696:	2001      	movs	r0, #1
 800e698:	4770      	bx	lr
	...

0800e69c <fiprintf>:
 800e69c:	b40e      	push	{r1, r2, r3}
 800e69e:	b503      	push	{r0, r1, lr}
 800e6a0:	4601      	mov	r1, r0
 800e6a2:	ab03      	add	r3, sp, #12
 800e6a4:	4805      	ldr	r0, [pc, #20]	@ (800e6bc <fiprintf+0x20>)
 800e6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6aa:	6800      	ldr	r0, [r0, #0]
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	f7ff fd03 	bl	800e0b8 <_vfiprintf_r>
 800e6b2:	b002      	add	sp, #8
 800e6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b8:	b003      	add	sp, #12
 800e6ba:	4770      	bx	lr
 800e6bc:	20000148 	.word	0x20000148

0800e6c0 <abort>:
 800e6c0:	b508      	push	{r3, lr}
 800e6c2:	2006      	movs	r0, #6
 800e6c4:	f000 f834 	bl	800e730 <raise>
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	f7f5 ffd3 	bl	8004674 <_exit>

0800e6ce <_malloc_usable_size_r>:
 800e6ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6d2:	1f18      	subs	r0, r3, #4
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bfbc      	itt	lt
 800e6d8:	580b      	ldrlt	r3, [r1, r0]
 800e6da:	18c0      	addlt	r0, r0, r3
 800e6dc:	4770      	bx	lr

0800e6de <_raise_r>:
 800e6de:	291f      	cmp	r1, #31
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	d904      	bls.n	800e6f2 <_raise_r+0x14>
 800e6e8:	2316      	movs	r3, #22
 800e6ea:	6003      	str	r3, [r0, #0]
 800e6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f0:	bd38      	pop	{r3, r4, r5, pc}
 800e6f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6f4:	b112      	cbz	r2, 800e6fc <_raise_r+0x1e>
 800e6f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6fa:	b94b      	cbnz	r3, 800e710 <_raise_r+0x32>
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f000 f831 	bl	800e764 <_getpid_r>
 800e702:	4622      	mov	r2, r4
 800e704:	4601      	mov	r1, r0
 800e706:	4628      	mov	r0, r5
 800e708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e70c:	f000 b818 	b.w	800e740 <_kill_r>
 800e710:	2b01      	cmp	r3, #1
 800e712:	d00a      	beq.n	800e72a <_raise_r+0x4c>
 800e714:	1c59      	adds	r1, r3, #1
 800e716:	d103      	bne.n	800e720 <_raise_r+0x42>
 800e718:	2316      	movs	r3, #22
 800e71a:	6003      	str	r3, [r0, #0]
 800e71c:	2001      	movs	r0, #1
 800e71e:	e7e7      	b.n	800e6f0 <_raise_r+0x12>
 800e720:	2100      	movs	r1, #0
 800e722:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e726:	4620      	mov	r0, r4
 800e728:	4798      	blx	r3
 800e72a:	2000      	movs	r0, #0
 800e72c:	e7e0      	b.n	800e6f0 <_raise_r+0x12>
	...

0800e730 <raise>:
 800e730:	4b02      	ldr	r3, [pc, #8]	@ (800e73c <raise+0xc>)
 800e732:	4601      	mov	r1, r0
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	f7ff bfd2 	b.w	800e6de <_raise_r>
 800e73a:	bf00      	nop
 800e73c:	20000148 	.word	0x20000148

0800e740 <_kill_r>:
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4d07      	ldr	r5, [pc, #28]	@ (800e760 <_kill_r+0x20>)
 800e744:	2300      	movs	r3, #0
 800e746:	4604      	mov	r4, r0
 800e748:	4608      	mov	r0, r1
 800e74a:	4611      	mov	r1, r2
 800e74c:	602b      	str	r3, [r5, #0]
 800e74e:	f7f5 ff81 	bl	8004654 <_kill>
 800e752:	1c43      	adds	r3, r0, #1
 800e754:	d102      	bne.n	800e75c <_kill_r+0x1c>
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	b103      	cbz	r3, 800e75c <_kill_r+0x1c>
 800e75a:	6023      	str	r3, [r4, #0]
 800e75c:	bd38      	pop	{r3, r4, r5, pc}
 800e75e:	bf00      	nop
 800e760:	20001964 	.word	0x20001964

0800e764 <_getpid_r>:
 800e764:	f7f5 bf6e 	b.w	8004644 <_getpid>

0800e768 <powf>:
 800e768:	b508      	push	{r3, lr}
 800e76a:	ed2d 8b04 	vpush	{d8-d9}
 800e76e:	eeb0 8a60 	vmov.f32	s16, s1
 800e772:	eeb0 9a40 	vmov.f32	s18, s0
 800e776:	f000 f859 	bl	800e82c <__ieee754_powf>
 800e77a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e782:	eef0 8a40 	vmov.f32	s17, s0
 800e786:	d63e      	bvs.n	800e806 <powf+0x9e>
 800e788:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e790:	d112      	bne.n	800e7b8 <powf+0x50>
 800e792:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79a:	d039      	beq.n	800e810 <powf+0xa8>
 800e79c:	eeb0 0a48 	vmov.f32	s0, s16
 800e7a0:	f000 f839 	bl	800e816 <finitef>
 800e7a4:	b378      	cbz	r0, 800e806 <powf+0x9e>
 800e7a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ae:	d52a      	bpl.n	800e806 <powf+0x9e>
 800e7b0:	f7fd fff0 	bl	800c794 <__errno>
 800e7b4:	2322      	movs	r3, #34	@ 0x22
 800e7b6:	e014      	b.n	800e7e2 <powf+0x7a>
 800e7b8:	f000 f82d 	bl	800e816 <finitef>
 800e7bc:	b998      	cbnz	r0, 800e7e6 <powf+0x7e>
 800e7be:	eeb0 0a49 	vmov.f32	s0, s18
 800e7c2:	f000 f828 	bl	800e816 <finitef>
 800e7c6:	b170      	cbz	r0, 800e7e6 <powf+0x7e>
 800e7c8:	eeb0 0a48 	vmov.f32	s0, s16
 800e7cc:	f000 f823 	bl	800e816 <finitef>
 800e7d0:	b148      	cbz	r0, 800e7e6 <powf+0x7e>
 800e7d2:	eef4 8a68 	vcmp.f32	s17, s17
 800e7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7da:	d7e9      	bvc.n	800e7b0 <powf+0x48>
 800e7dc:	f7fd ffda 	bl	800c794 <__errno>
 800e7e0:	2321      	movs	r3, #33	@ 0x21
 800e7e2:	6003      	str	r3, [r0, #0]
 800e7e4:	e00f      	b.n	800e806 <powf+0x9e>
 800e7e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	d10a      	bne.n	800e806 <powf+0x9e>
 800e7f0:	eeb0 0a49 	vmov.f32	s0, s18
 800e7f4:	f000 f80f 	bl	800e816 <finitef>
 800e7f8:	b128      	cbz	r0, 800e806 <powf+0x9e>
 800e7fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e7fe:	f000 f80a 	bl	800e816 <finitef>
 800e802:	2800      	cmp	r0, #0
 800e804:	d1d4      	bne.n	800e7b0 <powf+0x48>
 800e806:	eeb0 0a68 	vmov.f32	s0, s17
 800e80a:	ecbd 8b04 	vpop	{d8-d9}
 800e80e:	bd08      	pop	{r3, pc}
 800e810:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e814:	e7f7      	b.n	800e806 <powf+0x9e>

0800e816 <finitef>:
 800e816:	ee10 3a10 	vmov	r3, s0
 800e81a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e81e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e822:	bfac      	ite	ge
 800e824:	2000      	movge	r0, #0
 800e826:	2001      	movlt	r0, #1
 800e828:	4770      	bx	lr
	...

0800e82c <__ieee754_powf>:
 800e82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e830:	ee10 4a90 	vmov	r4, s1
 800e834:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e838:	ed2d 8b02 	vpush	{d8}
 800e83c:	ee10 6a10 	vmov	r6, s0
 800e840:	eeb0 8a40 	vmov.f32	s16, s0
 800e844:	eef0 8a60 	vmov.f32	s17, s1
 800e848:	d10c      	bne.n	800e864 <__ieee754_powf+0x38>
 800e84a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e84e:	0076      	lsls	r6, r6, #1
 800e850:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e854:	f240 8274 	bls.w	800ed40 <__ieee754_powf+0x514>
 800e858:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e85c:	ecbd 8b02 	vpop	{d8}
 800e860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e864:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e868:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e86c:	d802      	bhi.n	800e874 <__ieee754_powf+0x48>
 800e86e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e872:	d908      	bls.n	800e886 <__ieee754_powf+0x5a>
 800e874:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e878:	d1ee      	bne.n	800e858 <__ieee754_powf+0x2c>
 800e87a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e87e:	0064      	lsls	r4, r4, #1
 800e880:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e884:	e7e6      	b.n	800e854 <__ieee754_powf+0x28>
 800e886:	2e00      	cmp	r6, #0
 800e888:	da1f      	bge.n	800e8ca <__ieee754_powf+0x9e>
 800e88a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e88e:	f080 8260 	bcs.w	800ed52 <__ieee754_powf+0x526>
 800e892:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e896:	d32f      	bcc.n	800e8f8 <__ieee754_powf+0xcc>
 800e898:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e89c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e8a0:	fa49 f503 	asr.w	r5, r9, r3
 800e8a4:	fa05 f303 	lsl.w	r3, r5, r3
 800e8a8:	454b      	cmp	r3, r9
 800e8aa:	d123      	bne.n	800e8f4 <__ieee754_powf+0xc8>
 800e8ac:	f005 0501 	and.w	r5, r5, #1
 800e8b0:	f1c5 0502 	rsb	r5, r5, #2
 800e8b4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e8b8:	d11f      	bne.n	800e8fa <__ieee754_powf+0xce>
 800e8ba:	2c00      	cmp	r4, #0
 800e8bc:	f280 8246 	bge.w	800ed4c <__ieee754_powf+0x520>
 800e8c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e8c4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e8c8:	e7c8      	b.n	800e85c <__ieee754_powf+0x30>
 800e8ca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e8ce:	d111      	bne.n	800e8f4 <__ieee754_powf+0xc8>
 800e8d0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e8d4:	f000 8234 	beq.w	800ed40 <__ieee754_powf+0x514>
 800e8d8:	d906      	bls.n	800e8e8 <__ieee754_powf+0xbc>
 800e8da:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800ebf0 <__ieee754_powf+0x3c4>
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	bfa8      	it	ge
 800e8e2:	eeb0 0a68 	vmovge.f32	s0, s17
 800e8e6:	e7b9      	b.n	800e85c <__ieee754_powf+0x30>
 800e8e8:	2c00      	cmp	r4, #0
 800e8ea:	f280 822c 	bge.w	800ed46 <__ieee754_powf+0x51a>
 800e8ee:	eeb1 0a68 	vneg.f32	s0, s17
 800e8f2:	e7b3      	b.n	800e85c <__ieee754_powf+0x30>
 800e8f4:	2500      	movs	r5, #0
 800e8f6:	e7dd      	b.n	800e8b4 <__ieee754_powf+0x88>
 800e8f8:	2500      	movs	r5, #0
 800e8fa:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e8fe:	d102      	bne.n	800e906 <__ieee754_powf+0xda>
 800e900:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e904:	e7aa      	b.n	800e85c <__ieee754_powf+0x30>
 800e906:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e90a:	f040 8227 	bne.w	800ed5c <__ieee754_powf+0x530>
 800e90e:	2e00      	cmp	r6, #0
 800e910:	f2c0 8224 	blt.w	800ed5c <__ieee754_powf+0x530>
 800e914:	eeb0 0a48 	vmov.f32	s0, s16
 800e918:	ecbd 8b02 	vpop	{d8}
 800e91c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e920:	f000 bae6 	b.w	800eef0 <__ieee754_sqrtf>
 800e924:	2d01      	cmp	r5, #1
 800e926:	d199      	bne.n	800e85c <__ieee754_powf+0x30>
 800e928:	eeb1 0a40 	vneg.f32	s0, s0
 800e92c:	e796      	b.n	800e85c <__ieee754_powf+0x30>
 800e92e:	0ff0      	lsrs	r0, r6, #31
 800e930:	3801      	subs	r0, #1
 800e932:	ea55 0300 	orrs.w	r3, r5, r0
 800e936:	d104      	bne.n	800e942 <__ieee754_powf+0x116>
 800e938:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e93c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e940:	e78c      	b.n	800e85c <__ieee754_powf+0x30>
 800e942:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e946:	d96d      	bls.n	800ea24 <__ieee754_powf+0x1f8>
 800e948:	4baa      	ldr	r3, [pc, #680]	@ (800ebf4 <__ieee754_powf+0x3c8>)
 800e94a:	4598      	cmp	r8, r3
 800e94c:	d808      	bhi.n	800e960 <__ieee754_powf+0x134>
 800e94e:	2c00      	cmp	r4, #0
 800e950:	da0b      	bge.n	800e96a <__ieee754_powf+0x13e>
 800e952:	2000      	movs	r0, #0
 800e954:	ecbd 8b02 	vpop	{d8}
 800e958:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	f000 bac2 	b.w	800eee4 <__math_oflowf>
 800e960:	4ba5      	ldr	r3, [pc, #660]	@ (800ebf8 <__ieee754_powf+0x3cc>)
 800e962:	4598      	cmp	r8, r3
 800e964:	d908      	bls.n	800e978 <__ieee754_powf+0x14c>
 800e966:	2c00      	cmp	r4, #0
 800e968:	dcf3      	bgt.n	800e952 <__ieee754_powf+0x126>
 800e96a:	2000      	movs	r0, #0
 800e96c:	ecbd 8b02 	vpop	{d8}
 800e970:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e974:	f000 bab0 	b.w	800eed8 <__math_uflowf>
 800e978:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e97c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e980:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800ebfc <__ieee754_powf+0x3d0>
 800e984:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e988:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e98c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e990:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e994:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e998:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800ec00 <__ieee754_powf+0x3d4>
 800e99c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9a0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800ec04 <__ieee754_powf+0x3d8>
 800e9a4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e9a8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800ec08 <__ieee754_powf+0x3dc>
 800e9ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e9b0:	eeb0 7a67 	vmov.f32	s14, s15
 800e9b4:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e9b8:	ee17 3a10 	vmov	r3, s14
 800e9bc:	f36f 030b 	bfc	r3, #0, #12
 800e9c0:	ee07 3a10 	vmov	s14, r3
 800e9c4:	eeb0 6a47 	vmov.f32	s12, s14
 800e9c8:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e9cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e9d0:	3d01      	subs	r5, #1
 800e9d2:	4305      	orrs	r5, r0
 800e9d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e9d8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e9dc:	f36f 040b 	bfc	r4, #0, #12
 800e9e0:	bf18      	it	ne
 800e9e2:	eeb0 8a66 	vmovne.f32	s16, s13
 800e9e6:	ee06 4a90 	vmov	s13, r4
 800e9ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e9ee:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e9f2:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e9f6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e9fa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e9fe:	ee17 1a10 	vmov	r1, s14
 800ea02:	2900      	cmp	r1, #0
 800ea04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea08:	f340 80dd 	ble.w	800ebc6 <__ieee754_powf+0x39a>
 800ea0c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ea10:	f240 80ca 	bls.w	800eba8 <__ieee754_powf+0x37c>
 800ea14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	bf4c      	ite	mi
 800ea1e:	2001      	movmi	r0, #1
 800ea20:	2000      	movpl	r0, #0
 800ea22:	e797      	b.n	800e954 <__ieee754_powf+0x128>
 800ea24:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ea28:	bf01      	itttt	eq
 800ea2a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ec0c <__ieee754_powf+0x3e0>
 800ea2e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ea32:	f06f 0317 	mvneq.w	r3, #23
 800ea36:	ee17 7a90 	vmoveq	r7, s15
 800ea3a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ea3e:	bf18      	it	ne
 800ea40:	2300      	movne	r3, #0
 800ea42:	3a7f      	subs	r2, #127	@ 0x7f
 800ea44:	441a      	add	r2, r3
 800ea46:	4b72      	ldr	r3, [pc, #456]	@ (800ec10 <__ieee754_powf+0x3e4>)
 800ea48:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ea4c:	429f      	cmp	r7, r3
 800ea4e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ea52:	dd06      	ble.n	800ea62 <__ieee754_powf+0x236>
 800ea54:	4b6f      	ldr	r3, [pc, #444]	@ (800ec14 <__ieee754_powf+0x3e8>)
 800ea56:	429f      	cmp	r7, r3
 800ea58:	f340 80a4 	ble.w	800eba4 <__ieee754_powf+0x378>
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800ea62:	2600      	movs	r6, #0
 800ea64:	4b6c      	ldr	r3, [pc, #432]	@ (800ec18 <__ieee754_powf+0x3ec>)
 800ea66:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ea6a:	ee07 1a10 	vmov	s14, r1
 800ea6e:	edd3 5a00 	vldr	s11, [r3]
 800ea72:	4b6a      	ldr	r3, [pc, #424]	@ (800ec1c <__ieee754_powf+0x3f0>)
 800ea74:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ea78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea7c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ea80:	1049      	asrs	r1, r1, #1
 800ea82:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ea86:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ea8a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800ea8e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ea92:	ee07 1a90 	vmov	s15, r1
 800ea96:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ea9a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ea9e:	ee15 7a10 	vmov	r7, s10
 800eaa2:	401f      	ands	r7, r3
 800eaa4:	ee06 7a90 	vmov	s13, r7
 800eaa8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800eaac:	ee37 7a65 	vsub.f32	s14, s14, s11
 800eab0:	ee65 7a05 	vmul.f32	s15, s10, s10
 800eab4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800eab8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ec20 <__ieee754_powf+0x3f4>
 800eabc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ec24 <__ieee754_powf+0x3f8>
 800eac0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800eac4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ec28 <__ieee754_powf+0x3fc>
 800eac8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eacc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ebfc <__ieee754_powf+0x3d0>
 800ead0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ead4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ec2c <__ieee754_powf+0x400>
 800ead8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eadc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ec30 <__ieee754_powf+0x404>
 800eae0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eae4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800eae8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800eaec:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800eaf0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800eaf4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800eaf8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800eafc:	eef0 5a67 	vmov.f32	s11, s15
 800eb00:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800eb04:	ee75 5a87 	vadd.f32	s11, s11, s14
 800eb08:	ee15 1a90 	vmov	r1, s11
 800eb0c:	4019      	ands	r1, r3
 800eb0e:	ee05 1a90 	vmov	s11, r1
 800eb12:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800eb16:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800eb1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800eb22:	eee6 7a25 	vfma.f32	s15, s12, s11
 800eb26:	eeb0 6a67 	vmov.f32	s12, s15
 800eb2a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800eb2e:	ee16 1a10 	vmov	r1, s12
 800eb32:	4019      	ands	r1, r3
 800eb34:	ee06 1a10 	vmov	s12, r1
 800eb38:	eeb0 7a46 	vmov.f32	s14, s12
 800eb3c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800eb40:	493c      	ldr	r1, [pc, #240]	@ (800ec34 <__ieee754_powf+0x408>)
 800eb42:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800eb46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb4a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ec38 <__ieee754_powf+0x40c>
 800eb4e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ec3c <__ieee754_powf+0x410>
 800eb52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb56:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ec40 <__ieee754_powf+0x414>
 800eb5a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eb5e:	ed91 7a00 	vldr	s14, [r1]
 800eb62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb66:	ee07 2a10 	vmov	s14, r2
 800eb6a:	4a36      	ldr	r2, [pc, #216]	@ (800ec44 <__ieee754_powf+0x418>)
 800eb6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800eb70:	eeb0 7a67 	vmov.f32	s14, s15
 800eb74:	eea6 7a25 	vfma.f32	s14, s12, s11
 800eb78:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800eb7c:	ed92 5a00 	vldr	s10, [r2]
 800eb80:	ee37 7a05 	vadd.f32	s14, s14, s10
 800eb84:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eb88:	ee17 2a10 	vmov	r2, s14
 800eb8c:	401a      	ands	r2, r3
 800eb8e:	ee07 2a10 	vmov	s14, r2
 800eb92:	ee77 6a66 	vsub.f32	s13, s14, s13
 800eb96:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800eb9a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800eb9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eba2:	e715      	b.n	800e9d0 <__ieee754_powf+0x1a4>
 800eba4:	2601      	movs	r6, #1
 800eba6:	e75d      	b.n	800ea64 <__ieee754_powf+0x238>
 800eba8:	d152      	bne.n	800ec50 <__ieee754_powf+0x424>
 800ebaa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ec48 <__ieee754_powf+0x41c>
 800ebae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebb2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ebb6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	f73f af29 	bgt.w	800ea14 <__ieee754_powf+0x1e8>
 800ebc2:	2386      	movs	r3, #134	@ 0x86
 800ebc4:	e048      	b.n	800ec58 <__ieee754_powf+0x42c>
 800ebc6:	4a21      	ldr	r2, [pc, #132]	@ (800ec4c <__ieee754_powf+0x420>)
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d907      	bls.n	800ebdc <__ieee754_powf+0x3b0>
 800ebcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	bf4c      	ite	mi
 800ebd6:	2001      	movmi	r0, #1
 800ebd8:	2000      	movpl	r0, #0
 800ebda:	e6c7      	b.n	800e96c <__ieee754_powf+0x140>
 800ebdc:	d138      	bne.n	800ec50 <__ieee754_powf+0x424>
 800ebde:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ebe2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ebe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebea:	dbea      	blt.n	800ebc2 <__ieee754_powf+0x396>
 800ebec:	e7ee      	b.n	800ebcc <__ieee754_powf+0x3a0>
 800ebee:	bf00      	nop
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	3f7ffff3 	.word	0x3f7ffff3
 800ebf8:	3f800007 	.word	0x3f800007
 800ebfc:	3eaaaaab 	.word	0x3eaaaaab
 800ec00:	3fb8aa00 	.word	0x3fb8aa00
 800ec04:	3fb8aa3b 	.word	0x3fb8aa3b
 800ec08:	36eca570 	.word	0x36eca570
 800ec0c:	4b800000 	.word	0x4b800000
 800ec10:	001cc471 	.word	0x001cc471
 800ec14:	005db3d6 	.word	0x005db3d6
 800ec18:	0800fc8c 	.word	0x0800fc8c
 800ec1c:	fffff000 	.word	0xfffff000
 800ec20:	3e6c3255 	.word	0x3e6c3255
 800ec24:	3e53f142 	.word	0x3e53f142
 800ec28:	3e8ba305 	.word	0x3e8ba305
 800ec2c:	3edb6db7 	.word	0x3edb6db7
 800ec30:	3f19999a 	.word	0x3f19999a
 800ec34:	0800fc7c 	.word	0x0800fc7c
 800ec38:	3f76384f 	.word	0x3f76384f
 800ec3c:	3f763800 	.word	0x3f763800
 800ec40:	369dc3a0 	.word	0x369dc3a0
 800ec44:	0800fc84 	.word	0x0800fc84
 800ec48:	3338aa3c 	.word	0x3338aa3c
 800ec4c:	43160000 	.word	0x43160000
 800ec50:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ec54:	d96f      	bls.n	800ed36 <__ieee754_powf+0x50a>
 800ec56:	15db      	asrs	r3, r3, #23
 800ec58:	3b7e      	subs	r3, #126	@ 0x7e
 800ec5a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ec5e:	4118      	asrs	r0, r3
 800ec60:	4408      	add	r0, r1
 800ec62:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ec66:	4a4e      	ldr	r2, [pc, #312]	@ (800eda0 <__ieee754_powf+0x574>)
 800ec68:	3b7f      	subs	r3, #127	@ 0x7f
 800ec6a:	411a      	asrs	r2, r3
 800ec6c:	4002      	ands	r2, r0
 800ec6e:	ee07 2a10 	vmov	s14, r2
 800ec72:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ec76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ec7a:	f1c3 0317 	rsb	r3, r3, #23
 800ec7e:	4118      	asrs	r0, r3
 800ec80:	2900      	cmp	r1, #0
 800ec82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec86:	bfb8      	it	lt
 800ec88:	4240      	neglt	r0, r0
 800ec8a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800ec8e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800eda4 <__ieee754_powf+0x578>
 800ec92:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800eda8 <__ieee754_powf+0x57c>
 800ec96:	ee16 3a90 	vmov	r3, s13
 800ec9a:	f36f 030b 	bfc	r3, #0, #12
 800ec9e:	ee06 3a90 	vmov	s13, r3
 800eca2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800eca6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ecaa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ecae:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800edac <__ieee754_powf+0x580>
 800ecb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecb6:	eee0 7a87 	vfma.f32	s15, s1, s14
 800ecba:	eeb0 7a67 	vmov.f32	s14, s15
 800ecbe:	eea6 7a86 	vfma.f32	s14, s13, s12
 800ecc2:	eef0 5a47 	vmov.f32	s11, s14
 800ecc6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800ecca:	ee67 6a07 	vmul.f32	s13, s14, s14
 800ecce:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ecd2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800edb0 <__ieee754_powf+0x584>
 800ecd6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800edb4 <__ieee754_powf+0x588>
 800ecda:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ecde:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800edb8 <__ieee754_powf+0x58c>
 800ece2:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ece6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800edbc <__ieee754_powf+0x590>
 800ecea:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800ecee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800edc0 <__ieee754_powf+0x594>
 800ecf2:	eee6 5a26 	vfma.f32	s11, s12, s13
 800ecf6:	eeb0 6a47 	vmov.f32	s12, s14
 800ecfa:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800ecfe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ed02:	ee67 5a06 	vmul.f32	s11, s14, s12
 800ed06:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ed0a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800ed0e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ed12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ed16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed1e:	ee10 3a10 	vmov	r3, s0
 800ed22:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ed26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ed2a:	da06      	bge.n	800ed3a <__ieee754_powf+0x50e>
 800ed2c:	f000 f854 	bl	800edd8 <scalbnf>
 800ed30:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ed34:	e592      	b.n	800e85c <__ieee754_powf+0x30>
 800ed36:	2000      	movs	r0, #0
 800ed38:	e7a7      	b.n	800ec8a <__ieee754_powf+0x45e>
 800ed3a:	ee00 3a10 	vmov	s0, r3
 800ed3e:	e7f7      	b.n	800ed30 <__ieee754_powf+0x504>
 800ed40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ed44:	e58a      	b.n	800e85c <__ieee754_powf+0x30>
 800ed46:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800edc4 <__ieee754_powf+0x598>
 800ed4a:	e587      	b.n	800e85c <__ieee754_powf+0x30>
 800ed4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ed50:	e584      	b.n	800e85c <__ieee754_powf+0x30>
 800ed52:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ed56:	f43f adbb 	beq.w	800e8d0 <__ieee754_powf+0xa4>
 800ed5a:	2502      	movs	r5, #2
 800ed5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ed60:	f000 f832 	bl	800edc8 <fabsf>
 800ed64:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ed68:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ed6c:	4647      	mov	r7, r8
 800ed6e:	d003      	beq.n	800ed78 <__ieee754_powf+0x54c>
 800ed70:	f1b8 0f00 	cmp.w	r8, #0
 800ed74:	f47f addb 	bne.w	800e92e <__ieee754_powf+0x102>
 800ed78:	2c00      	cmp	r4, #0
 800ed7a:	bfbc      	itt	lt
 800ed7c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ed80:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ed84:	2e00      	cmp	r6, #0
 800ed86:	f6bf ad69 	bge.w	800e85c <__ieee754_powf+0x30>
 800ed8a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ed8e:	ea58 0805 	orrs.w	r8, r8, r5
 800ed92:	f47f adc7 	bne.w	800e924 <__ieee754_powf+0xf8>
 800ed96:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ed9a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ed9e:	e55d      	b.n	800e85c <__ieee754_powf+0x30>
 800eda0:	ff800000 	.word	0xff800000
 800eda4:	3f317218 	.word	0x3f317218
 800eda8:	3f317200 	.word	0x3f317200
 800edac:	35bfbe8c 	.word	0x35bfbe8c
 800edb0:	b5ddea0e 	.word	0xb5ddea0e
 800edb4:	3331bb4c 	.word	0x3331bb4c
 800edb8:	388ab355 	.word	0x388ab355
 800edbc:	bb360b61 	.word	0xbb360b61
 800edc0:	3e2aaaab 	.word	0x3e2aaaab
 800edc4:	00000000 	.word	0x00000000

0800edc8 <fabsf>:
 800edc8:	ee10 3a10 	vmov	r3, s0
 800edcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edd0:	ee00 3a10 	vmov	s0, r3
 800edd4:	4770      	bx	lr
	...

0800edd8 <scalbnf>:
 800edd8:	ee10 3a10 	vmov	r3, s0
 800eddc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ede0:	d02b      	beq.n	800ee3a <scalbnf+0x62>
 800ede2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ede6:	d302      	bcc.n	800edee <scalbnf+0x16>
 800ede8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800edec:	4770      	bx	lr
 800edee:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800edf2:	d123      	bne.n	800ee3c <scalbnf+0x64>
 800edf4:	4b24      	ldr	r3, [pc, #144]	@ (800ee88 <scalbnf+0xb0>)
 800edf6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ee8c <scalbnf+0xb4>
 800edfa:	4298      	cmp	r0, r3
 800edfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee00:	db17      	blt.n	800ee32 <scalbnf+0x5a>
 800ee02:	ee10 3a10 	vmov	r3, s0
 800ee06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee0a:	3a19      	subs	r2, #25
 800ee0c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ee10:	4288      	cmp	r0, r1
 800ee12:	dd15      	ble.n	800ee40 <scalbnf+0x68>
 800ee14:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ee90 <scalbnf+0xb8>
 800ee18:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ee94 <scalbnf+0xbc>
 800ee1c:	ee10 3a10 	vmov	r3, s0
 800ee20:	eeb0 7a67 	vmov.f32	s14, s15
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb8      	it	lt
 800ee28:	eef0 7a66 	vmovlt.f32	s15, s13
 800ee2c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ee30:	4770      	bx	lr
 800ee32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ee98 <scalbnf+0xc0>
 800ee36:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ee3a:	4770      	bx	lr
 800ee3c:	0dd2      	lsrs	r2, r2, #23
 800ee3e:	e7e5      	b.n	800ee0c <scalbnf+0x34>
 800ee40:	4410      	add	r0, r2
 800ee42:	28fe      	cmp	r0, #254	@ 0xfe
 800ee44:	dce6      	bgt.n	800ee14 <scalbnf+0x3c>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	dd06      	ble.n	800ee58 <scalbnf+0x80>
 800ee4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee4e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee52:	ee00 3a10 	vmov	s0, r3
 800ee56:	4770      	bx	lr
 800ee58:	f110 0f16 	cmn.w	r0, #22
 800ee5c:	da09      	bge.n	800ee72 <scalbnf+0x9a>
 800ee5e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ee98 <scalbnf+0xc0>
 800ee62:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ee9c <scalbnf+0xc4>
 800ee66:	ee10 3a10 	vmov	r3, s0
 800ee6a:	eeb0 7a67 	vmov.f32	s14, s15
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	e7d9      	b.n	800ee26 <scalbnf+0x4e>
 800ee72:	3019      	adds	r0, #25
 800ee74:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee78:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee7c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eea0 <scalbnf+0xc8>
 800ee80:	ee07 3a90 	vmov	s15, r3
 800ee84:	e7d7      	b.n	800ee36 <scalbnf+0x5e>
 800ee86:	bf00      	nop
 800ee88:	ffff3cb0 	.word	0xffff3cb0
 800ee8c:	4c000000 	.word	0x4c000000
 800ee90:	7149f2ca 	.word	0x7149f2ca
 800ee94:	f149f2ca 	.word	0xf149f2ca
 800ee98:	0da24260 	.word	0x0da24260
 800ee9c:	8da24260 	.word	0x8da24260
 800eea0:	33000000 	.word	0x33000000

0800eea4 <with_errnof>:
 800eea4:	b510      	push	{r4, lr}
 800eea6:	ed2d 8b02 	vpush	{d8}
 800eeaa:	eeb0 8a40 	vmov.f32	s16, s0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	f7fd fc70 	bl	800c794 <__errno>
 800eeb4:	eeb0 0a48 	vmov.f32	s0, s16
 800eeb8:	ecbd 8b02 	vpop	{d8}
 800eebc:	6004      	str	r4, [r0, #0]
 800eebe:	bd10      	pop	{r4, pc}

0800eec0 <xflowf>:
 800eec0:	b130      	cbz	r0, 800eed0 <xflowf+0x10>
 800eec2:	eef1 7a40 	vneg.f32	s15, s0
 800eec6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eeca:	2022      	movs	r0, #34	@ 0x22
 800eecc:	f7ff bfea 	b.w	800eea4 <with_errnof>
 800eed0:	eef0 7a40 	vmov.f32	s15, s0
 800eed4:	e7f7      	b.n	800eec6 <xflowf+0x6>
	...

0800eed8 <__math_uflowf>:
 800eed8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eee0 <__math_uflowf+0x8>
 800eedc:	f7ff bff0 	b.w	800eec0 <xflowf>
 800eee0:	10000000 	.word	0x10000000

0800eee4 <__math_oflowf>:
 800eee4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eeec <__math_oflowf+0x8>
 800eee8:	f7ff bfea 	b.w	800eec0 <xflowf>
 800eeec:	70000000 	.word	0x70000000

0800eef0 <__ieee754_sqrtf>:
 800eef0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eef4:	4770      	bx	lr
	...

0800eef8 <_init>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	bf00      	nop
 800eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefe:	bc08      	pop	{r3}
 800ef00:	469e      	mov	lr, r3
 800ef02:	4770      	bx	lr

0800ef04 <_fini>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr
